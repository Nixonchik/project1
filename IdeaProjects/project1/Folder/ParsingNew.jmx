<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">tr-release2--regtest.lightning.force.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="host2" elementType="Argument">
            <stringProp name="Argument.name">host2</stringProp>
            <stringProp name="Argument.value">tr-release2--regtest.cs92.my.salesforce.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="login" elementType="Argument">
            <stringProp name="Argument.name">login</stringProp>
            <stringProp name="Argument.value">tradmin@trreleaseorg2.com.regtest</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">7v@d^PULSJtllzHPTnECIMKAfftWRZ1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <boolProp name="HTTPSampler.image_parser">true</boolProp>
        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
      </CacheManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S1_Pdf+docx" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <longProp name="ThreadGroup.start_time">1370726934000</longProp>
        <longProp name="ThreadGroup.end_time">1370726934000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="S1_01_Open_ main_page" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1222 /" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host2}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="QCQQ" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">QCQQ</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;QCQQ&quot; value=&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="4-8 sec" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">6000</stringProp>
            <stringProp name="RandomTimer.range">2000</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="S1_02_login" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1276 /" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="un" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">un</stringProp>
                  <stringProp name="Argument.value">${login}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="width" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">width</stringProp>
                  <stringProp name="Argument.value">1920</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="height" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">height</stringProp>
                  <stringProp name="Argument.value">1080</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasRememberUn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">hasRememberUn</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="startURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">startURL</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="loginURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">loginURL</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="loginType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">loginType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="useSecure" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">useSecure</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="local" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">local</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="lt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">lt</stringProp>
                  <stringProp name="Argument.value">standard</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="qs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">qs</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">locale</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="oauth_token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">oauth_token</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="oauth_callback" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">oauth_callback</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="login" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">login</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serverid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">serverid</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="QCQQ" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">QCQQ</stringProp>
                  <stringProp name="Argument.value">${QCQQ}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="display" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">display</stringProp>
                  <stringProp name="Argument.value">page</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="Argument.value">${login}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ExtraLog" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ExtraLog</stringProp>
                  <stringProp name="Argument.value">%5B%7B%22width%22:1920%7D,%7B%22height%22:1080%7D,%7B%22language%22:%22ru-RU%22%7D,%7B%22offset%22:-3%7D,%7B%22scripts%22:%5B%7B%22size%22:249,%22summary%22:%22if%20(self%20==%20top)%20%7Bdocument.documentElement.style.v%22%7D,%7B%22size%22:586,%22summary%22:%22var%20SFDCSessionVars=%7B%5C%22server%5C%22:%5C%22https:%5C%5C/%5C%5C/test.sale%22%7D,%7B%22url%22:%22https://${host2}/jslibrary/SfdcSessionBase208.js%22%7D,%7B%22url%22:%22https://${host2}/jslibrary/LoginHint208.js%22%7D,%7B%22size%22:26,%22summary%22:%22LoginHint.hideLoginForm();%22%7D,%7B%22size%22:36,%22summary%22:%22LoginHint.getSavedIdentities(false);%22%7D,%7B%22url%22:%22https://${host2}/jslibrary/baselogin4.js%22%7D,%7B%22url%22:%22https://${host2}/jslibrary/LoginMarketingSurveyResponse.js%22%7D,%7B%22url%22:%22https://${host2}/marketing/survey/survey1/1380%22%7D,%7B%22url%22:%22https://${host2}/marketing/survey/survey4/1380%22%7D,%7B%22size%22:357,%22summary%22:%22function%20handleLogin()%7Bdocument.login.un.value=doc%22%7D%5D%7D,%7B%22scriptCount%22:11%7D,%7B%22iframes%22:%5B%22https://c.salesforce.com/login-messages/promos.html%22,%22https://test.salesforce.com/login/sessionserver212.html%22%5D%7D,%7B%22iframeCount%22:2%7D,%7B%22referrer%22:%22NO_REFERRER%22%7D%5D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Fingerprint" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">Fingerprint</stringProp>
                  <stringProp name="Argument.value">%7B%22platform%22:%22Win32%22,%22window%22:%221056x1936%22,%22screen%22:%221080x1920%22,%22color%22:%2224-24%22,%22timezoneOffset%22:%22-180%22,%22canvas%22:%22-344685604%22,%22sessionStorage%22:%22true%22,%22LocalStorage%22:%22true%22,%22indexDB%22:%22true%22,%22webSockets%22:%22true%22,%22plugins%22:%22%22,%22drm%22:1,%22languages%22:%5B%22ru-RU%22,%22ru%22,%22en-US%22,%22en%22%5D,%22fonts%22:%22%22,%22codecs%22:%22gMGIqqqgRqoCqH4=%22%7D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pw" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pw</stringProp>
                  <stringProp name="Argument.value">${password}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Login" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">Login</stringProp>
                  <stringProp name="Argument.value">Log In to Sandbox</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host2}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host2}/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cshc" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">cshc</stringProp>
              <stringProp name="RegexExtractor.regex">cshc=(.+?)&amp;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sid" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">sid</stringProp>
              <stringProp name="RegexExtractor.regex">sid=(.+?)&amp;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1280 /secur/contentDoor" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="startURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">startURL</stringProp>
                  <stringProp name="Argument.value">${protocol}%3A%2F%2Ftr-release2--RegTest.cs92.my.salesforce.com%2Fone%2Fone.app</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sid</stringProp>
                  <stringProp name="Argument.value">${sid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="skipRedirect" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">skipRedirect</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="lm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">lm</stringProp>
                  <stringProp name="Argument.value">eyJlbmMiOiJBMjU2R0NNIiwiYXVkIjoiMDBEM0YwMDAwMDA5UFBpIiwia2lkIjoie1widFwiOlwiMDBEM0YwMDAwMDA5UFBpXCIsXCJ2XCI6XCIwMkcxTjAwMDAwMFFiUEJcIixcImFcIjpcImNvbnRlbnRkb29ydXNlcnRyYW5zaWVudGtleWVuY3J5cHRcIixcInVcIjpcIjAwNTFOMDAwMDA1cGdwb1wifSIsImNyaXQiOlsiaWF0Il0sImlhdCI6MTU1OTAzMjM2OTMxOCwiZXhwIjowfQ%3D%3D..1u27AVIUbpZWrDKt.N18qpCk4LuT4CdLfto6z9Q%3D%3D.qFARJZI7VEbJ_MfcmvZaQQ%3D%3D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">tr-release2--regtest--c.cs92.content.force.com</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/secur/contentDoor</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host2}/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1283 /one/one.app" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host2}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/one/one.app</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://tr-release2--regtest--c.cs92.content.force.com/secur/contentDoor?startURL=${protocol}%3A%2F%2Ftr-release2--RegTest.cs92.my.salesforce.com%2Fone%2Fone.app&amp;sid=00D3F0000009PPi%21AQkAQKlvs0l7eoJZ4sKYyl8sJOKv0OQqU9HZDlm7yca9P2MHD3LcDBzoVGXKHBj2bjfTatYAyJSI5BssJJ48l4.n3uGXYc.5&amp;skipRedirect=1&amp;lm=eyJlbmMiOiJBMjU2R0NNIiwiYXVkIjoiMDBEM0YwMDAwMDA5UFBpIiwia2lkIjoie1widFwiOlwiMDBEM0YwMDAwMDA5UFBpXCIsXCJ2XCI6XCIwMkcxTjAwMDAwMFFiUEJcIixcImFcIjpcImNvbnRlbnRkb29ydXNlcnRyYW5zaWVudGtleWVuY3J5cHRcIixcInVcIjpcIjAwNTFOMDAwMDA1cGdwb1wifSIsImNyaXQiOlsiaWF0Il0sImlhdCI6MTU1OTAzMjM2OTMxOCwiZXhwIjowfQ%3D%3D..1u27AVIUbpZWrDKt.N18qpCk4LuT4CdLfto6z9Q%3D%3D.qFARJZI7VEbJ_MfcmvZaQQ%3D%3D</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="token" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">token</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;token&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="firstPublishLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">firstPublishLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1292 /aura?preloadActions" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">%7B%22mode%22%3A%22PROD%22%2C%22fwuid%22%3A%22pxtF0ZdGYF-z00XsmRUcGQ%22%2C%22loaded%22%3A%7B%22APPLICATION%40markup%3A%2F%2Fone%3Aone%22%3A%22Vel2xmipbW6B0F2Wfw22YA%22%7D%2C%22app%22%3A%22one%3Aone%22%7D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">%7B%22actions%22%3A%5B%7B%22descriptor%22%3A%22serviceComponent%3A%2F%2Fui.global.components.one.one.controller.OneController%2FACTION%24getCurrentApp%22%2C%22params%22%3A%7B%7D%2C%22id%22%3A%220%3Bp%22%7D%5D%7D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/aura?preloadActions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/one/one.app</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">id</stringProp>
              <stringProp name="RegexExtractor.regex">:{&quot;id&quot;:&quot;(.+?)&quot;,&quot;namespacePrefix&quot;:&quot;TR1&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1295 /file-asset/unnamed1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/file-asset/unnamed1</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/one/one.app</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/webp,*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1298 /aura?r=0&amp;aura.HostConfig.getConfigData=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;71;a&quot;,&quot;descriptor&quot;:&quot;aura://HostConfigController/ACTION$getConfigData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/one/one.app</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=0&amp;aura.HostConfig.getConfigData=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/one/one.app</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">55075000000ed96333</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="nonce" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">nonce</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;nonce&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1301 /aura?r=1&amp;ui-flexipage-components-page.FlexipageControllerV2.getPage=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;203;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.flexipage.components.page.FlexipageControllerV2/ACTION$getPage&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;flexiPageDeveloperName&quot;:&quot;TR1__Front_Office_UtilityBar1&quot;},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/one/one.app</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=1&amp;ui-flexipage-components-page.FlexipageControllerV2.getPage=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/one/one.app</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">553450000002de7715</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1303 /file-asset/unnamed1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="height" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">height</stringProp>
                  <stringProp name="Argument.value">80</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="width" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">width</stringProp>
                  <stringProp name="Argument.value">400</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/file-asset/unnamed1</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/l/%7B%22mode%22%3A%22PROD%22%2C%22app%22%3A%22one%3Aone%22%2C%22loaded%22%3A%7B%22APPLICATION%40markup%3A%2F%2Fone%3Aone%22%3A%22Vel2xmipbW6B0F2Wfw22YA%22%7D%2C%22styleContext%22%3A%7B%22c%22%3A%22firefox%22%2C%22x%22%3A%5B%22isDesktop%22%5D%2C%22tokens%22%3A%5B%22markup%3A%2F%2Fforce%3AsldsTokens%22%2C%22markup%3A%2F%2Fforce%3Abase%22%2C%22markup%3A%2F%2Fforce%3AoneSalesforceSkin%22%2C%22markup%3A%2F%2Fforce%3AlevelTwoDensity%22%2C%22markup%3A%2F%2Fforce%3AthemeTokens%22%2C%22markup%3A%2F%2Fforce%3AformFactorLarge%22%5D%2C%22tuid%22%3A%22ZHAX_KjJjptHBeEdFDO12g%22%2C%22cuid%22%3A-1432176237%7D%2C%22pathPrefix%22%3A%22%22%7D/app.css</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/webp,*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1305 /aura?r=3&amp;ui-force-components-controllers-platformStateManager.PlatformStateManager.getTabByNameAndApp=1&amp;ui-force-components-controllers-recordGlobalValueProvider.RecordGvp.getRecord=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;229;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getTabByNameAndApp&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;devName&quot;:&quot;standard-home&quot;,&quot;customApplicationId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;storable&quot;:true},{&quot;id&quot;:&quot;230;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$getRecord&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordDescriptor&quot;:&quot;0051N000005pgpoQAA.undefined.null.null.null.Name,Id.VIEW.false.null.null.null&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/one/one.app</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=3&amp;ui-force-components-controllers-platformStateManager.PlatformStateManager.getTabByNameAndApp=1&amp;ui-force-components-controllers-recordGlobalValueProvider.RecordGvp.getRecord=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/one/one.app</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">55610000000924ee0a</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1304 /aura?r=2&amp;ui-force-components-controllers-empApi.EmpApi.getEmpConfig=1&amp;ui-global-components-one-favorites.Favorites.getFavorites=1&amp;ui-global-components-one-header.Header.getSettings=1&amp;ui-global-components-one-systemMessage.SystemMessage.getSystemMessages=1&amp;ui-notifications-components-notifications-controller.Notifications.getInitializationValues=1&amp;ui-search-components-forcesearch-sgdp.PermsAndPrefsCache.getPermsAndPrefs=1&amp;ui-search-components-forcesearch-sgdp.ScopesCache.getScopeMaps=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;133;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.search.components.forcesearch.sgdp.ScopesCacheController/ACTION$getScopeMaps&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;scopeTypes&quot;:[&quot;SMART_SCOPE&quot;,&quot;PRIMARY&quot;,&quot;FILTER&quot;]},&quot;storable&quot;:true},{&quot;id&quot;:&quot;135;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.search.components.forcesearch.sgdp.PermsAndPrefsCacheController/ACTION$getPermsAndPrefs&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true},{&quot;id&quot;:&quot;147;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.systemMessage.SystemMessageController/ACTION$getSystemMessages&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;isExtensiveMessage&quot;:false}},{&quot;id&quot;:&quot;164;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.favorites.FavoritesController/ACTION$getFavorites&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true},{&quot;id&quot;:&quot;182;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.empApi.EmpApiController/ACTION$getEmpConfig&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}},{&quot;id&quot;:&quot;185;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.notifications.components.notifications.controller.NotificationsController/ACTION$getInitializationValues&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true},{&quot;id&quot;:&quot;195;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.header.HeaderController/ACTION$getSettings&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/one/one.app</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=2&amp;ui-force-components-controllers-empApi.EmpApi.getEmpConfig=1&amp;ui-global-components-one-favorites.Favorites.getFavorites=1&amp;ui-global-components-one-header.Header.getSettings=1&amp;ui-global-components-one-systemMessage.SystemMessage.getSystemMessages=1&amp;ui-notifications-components-notifications-controller.Notifications.getInitializationValues=1&amp;ui-search-components-forcesearch-sgdp.PermsAndPrefsCache.getPermsAndPrefs=1&amp;ui-search-components-forcesearch-sgdp.ScopesCache.getScopeMaps=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/one/one.app</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">5551400000038b2f10</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1309 /aura?r=5&amp;ui-home-impl-landing.Landing.populateTodayGVP=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;286;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.home.impl.landing.LandingController/ACTION$populateTodayGVP&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=5&amp;ui-home-impl-landing.Landing.populateTodayGVP=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">567250000008c04ddd</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1310 /aura?r=6&amp;ui-force-components-controllers-socialPhoto.SocialPhoto.resolvePhotos=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;390;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.socialPhoto.SocialPhotoController/ACTION$resolvePhotos&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;records&quot;:{&quot;0051N000005pgpoQAA&quot;:{}},&quot;refreshCached&quot;:false},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=6&amp;ui-force-components-controllers-socialPhoto.SocialPhoto.resolvePhotos=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">570560000005eeeb5d</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1308 /aura?r=4&amp;ui-flexipage-components-page.FlexipageControllerV2.getPage=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;269;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.flexipage.components.page.FlexipageControllerV2/ACTION$getPage&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;flexiPageDeveloperName&quot;:&quot;Home_Page_Default&quot;},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=4&amp;ui-flexipage-components-page.FlexipageControllerV2.getPage=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">56705000000a77506a</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1317 /aura?r=7&amp;aura.Component.reportDeprecationUsages=1&amp;ui-global-components-one-systemMessage.SystemMessage.getSystemMessages=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;395;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$reportDeprecationUsages&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;usages&quot;:{&quot;AuraComponentService.newComponentDeprecated&quot;:[&quot;flexipage:runtimeComponent&quot;]}}},{&quot;id&quot;:&quot;471;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.systemMessage.SystemMessageController/ACTION$getSystemMessages&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;isExtensiveMessage&quot;:true}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=7&amp;aura.Component.reportDeprecationUsages=1&amp;ui-global-components-one-systemMessage.SystemMessage.getSystemMessages=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">6192400000083cfc8c</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1318 /aura?r=8&amp;ui-today-impl-components-today-taskContainer.TodayTasksCardDataManager.getTasks=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;486;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.today.impl.components.today.taskContainer.TodayTasksCardDataManagerController/ACTION$getTasks&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;limit&quot;:5,&quot;filterType&quot;:&quot;MY_DAY&quot;},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=8&amp;ui-today-impl-components-today-taskContainer.TodayTasksCardDataManager.getTasks=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">65822000000729497f</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1319 /aura?r=9&amp;aura.Component.getComponent=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;489;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$getComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;name&quot;:&quot;markup://force:listTemplate&quot;,&quot;attributes&quot;:{&quot;recordExpression&quot;:&quot;item&quot;,&quot;entityName&quot;:&quot;Task&quot;,&quot;mode&quot;:&quot;VIEW&quot;,&quot;type&quot;:&quot;COMPACT&quot;,&quot;inContextOfComponent&quot;:&quot;runtime_sales_activities:todayTaskContainer&quot;,&quot;actions&quot;:[]}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=9&amp;aura.Component.getComponent=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">65831000000ffec684</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1320 /aura?r=10&amp;ui-force-components-controllers-recordLayoutBroker.RecordLayoutBroker.getLayout=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;521;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordLayoutBroker.RecordLayoutBrokerController/ACTION$getLayout&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;entityName&quot;:&quot;Event&quot;,&quot;mode&quot;:&quot;VIEW&quot;,&quot;type&quot;:&quot;COMPACT&quot;,&quot;inContextOfComponent&quot;:&quot;home:eventContainer&quot;,&quot;pageSize&quot;:-1,&quot;offset&quot;:0}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=10&amp;ui-force-components-controllers-recordLayoutBroker.RecordLayoutBroker.getLayout=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">6588900000013030b5</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1321 /aura?r=11&amp;ui-calendar-impl-controllers.SFDCCalendarDataProvider.getTodayEvents=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;528;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.calendar.impl.controllers.SFDCCalendarDataProviderController/ACTION$getTodayEvents&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;limit&quot;:5},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=11&amp;ui-calendar-impl-controllers.SFDCCalendarDataProvider.getTodayEvents=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">659210000008b83520</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1322 /aura?r=12&amp;ui-wits-impl-components-news.NewsPanel.getNewsMetaData=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;546;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.wits.impl.components.news.NewsPanelController/ACTION$getNewsMetaData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=12&amp;ui-wits-impl-components-news.NewsPanel.getNewsMetaData=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">6593600000031c5b50</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1323 /aura?r=13&amp;ui-flexipage-components-reportchart.ReportChart.getReportInfo=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;554;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.flexipage.components.reportchart.ReportChartController/ACTION$getReportInfo&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;reportName&quot;:&quot;TR1__My_Temp_GP_Trend&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=13&amp;ui-flexipage-components-reportchart.ReportChart.getReportInfo=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">65946000000f087630</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1324 /aura?r=14&amp;aura.Component.reportDeprecationUsages=2&amp;ui-flexipage-components-filterlistcard.FilterListCard.getFilterLabel=2&amp;ui-flexipage-components-reportchart.ReportChart.getReportInfo=3" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;508;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$reportDeprecationUsages&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;usages&quot;:{&quot;AuraComponentService.newComponentDeprecated&quot;:[&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;]}}},{&quot;id&quot;:&quot;562;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.flexipage.components.reportchart.ReportChartController/ACTION$getReportInfo&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;reportName&quot;:&quot;TR1__My_Quarterly_Calls&quot;}},{&quot;id&quot;:&quot;570;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.flexipage.components.reportchart.ReportChartController/ACTION$getReportInfo&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;reportName&quot;:&quot;TR1__Submittals_This_Quarter&quot;}},{&quot;id&quot;:&quot;573;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$reportDeprecationUsages&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;usages&quot;:{&quot;AuraComponentService.newComponentDeprecated&quot;:[&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;]}}},{&quot;id&quot;:&quot;579;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.flexipage.components.reportchart.ReportChartController/ACTION$getReportInfo&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;reportName&quot;:&quot;TR1__Client_Interviews_This_Quarter&quot;}},{&quot;id&quot;:&quot;584;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.flexipage.components.filterlistcard.FilterListCardController/ACTION$getFilterLabel&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;entityName&quot;:&quot;TR1__Closing_Report__c&quot;,&quot;filterName&quot;:&quot;TR1__My_Active_Assignments&quot;}},{&quot;id&quot;:&quot;589;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.flexipage.components.filterlistcard.FilterListCardController/ACTION$getFilterLabel&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;entityName&quot;:&quot;TR1__Closing_Report__c&quot;,&quot;filterName&quot;:&quot;TR1__Assignments_Ending_in_30_Days&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=14&amp;aura.Component.reportDeprecationUsages=2&amp;ui-flexipage-components-filterlistcard.FilterListCard.getFilterLabel=2&amp;ui-flexipage-components-reportchart.ReportChart.getReportInfo=3</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">66598000000a8c2e87</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1327 /aura?r=15&amp;ui-global-components-one-actionsManager.ActionsManager.handleAction=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;597;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.actionsManager.ActionsManagerController/ACTION$handleAction&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;context&quot;:&quot;GLOBAL&quot;,&quot;record&quot;:null,&quot;section&quot;:&quot;COLLABORATE_COMPOSER&quot;,&quot;size&quot;:3,&quot;width&quot;:&quot;SMALL&quot;,&quot;maxWidth&quot;:-1,&quot;actionTypes&quot;:[],&quot;bulkedAction&quot;:false,&quot;actionsRequestId&quot;:0}]}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=15&amp;ui-global-components-one-actionsManager.ActionsManager.handleAction=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">666600000004b0c8d9</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1329 /aura?r=16&amp;ui-chatter-components-aura-components-forceChatter-chatter.Feed.getModel=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;613;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.chatter.components.aura.components.forceChatter.chatter.FeedController/ACTION$getModel&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;type&quot;:&quot;BOOKMARKS&quot;,&quot;subjectId&quot;:&quot;undefined&quot;,&quot;showFeedItemActions&quot;:true,&quot;feedDesign&quot;:&quot;DEFAULT&quot;,&quot;firstPageSize&quot;:4,&quot;hasFeedSwitcher&quot;:false,&quot;showFilteringMenuGroup&quot;:false,&quot;includeRecordActivitiesInFeed&quot;:true,&quot;retrieveOnlyTopLevelThreadedComments&quot;:false}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=16&amp;ui-chatter-components-aura-components-forceChatter-chatter.Feed.getModel=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">66702000000aae79e5</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1331 /aura?r=18&amp;ui-wits-impl-components-news.NewsPanel.notifyError=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;691;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.wits.impl.components.news.NewsPanelController/ACTION$notifyError&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;errorMessage&quot;:&quot;Request to ${protocol}://api.bluetail.salesforce.com/v10/insights/query failed with  status code 0&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=18&amp;ui-wits-impl-components-news.NewsPanel.notifyError=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">668930000004a93b80</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1330 /aura?r=17&amp;ui-analytics-platform-embeddedChart.EmbeddedReportChart.loadChart=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;690;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.analytics.platform.embeddedChart.EmbeddedReportChartController/ACTION$loadChart&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;reportIdOrDeveloperName&quot;:&quot;00O1N000007jedjUAA&quot;,&quot;embeddedChartInput&quot;:{&quot;componentId&quot;:&quot;1:554;a&quot;,&quot;filter&quot;:null,&quot;showTitle&quot;:false,&quot;size&quot;:&quot;auto&quot;,&quot;widthOverrides&quot;:null,&quot;isInteractive&quot;:false,&quot;cacheAge&quot;:86400000,&quot;origin&quot;:&quot;earc&quot;,&quot;isInS1Context&quot;:true,&quot;renderEclairChart&quot;:true}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=17&amp;ui-analytics-platform-embeddedChart.EmbeddedReportChart.loadChart=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">66837000000407f092</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1334 /aura?r=19&amp;ui-force-components-controllers-lists-filterList.FilterList.getFilterListConfig=1&amp;ui-force-components-controllers-lists-listViewDataManager.ListViewDataManager.getItems=2&amp;ui-force-components-controllers-recordLayoutBroker.RecordLayoutBroker.getLayout=2" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;889;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordLayoutBroker.RecordLayoutBrokerController/ACTION$getLayout&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;entityName&quot;:&quot;TR1__Closing_Report__c&quot;,&quot;mode&quot;:&quot;VIEW&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;layoutOverride&quot;:&quot;TR1__My_Active_Assignments&quot;,&quot;inContextOfComponent&quot;:&quot;force:filterList&quot;,&quot;pageSize&quot;:-1,&quot;offset&quot;:0}},{&quot;id&quot;:&quot;895;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.lists.listViewDataManager.ListViewDataManagerController/ACTION$getItems&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;filterName&quot;:&quot;TR1__My_Active_Assignments&quot;,&quot;entityName&quot;:&quot;TR1__Closing_Report__c&quot;,&quot;pageSize&quot;:10,&quot;layoutType&quot;:&quot;LIST&quot;,&quot;sortBy&quot;:null,&quot;getCount&quot;:false,&quot;enableRowActions&quot;:false,&quot;offset&quot;:0},&quot;storable&quot;:true},{&quot;id&quot;:&quot;899;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.lists.filterList.FilterListController/ACTION$getFilterListConfig&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;entityName&quot;:&quot;TR1__Closing_Report__c&quot;},&quot;storable&quot;:true},{&quot;id&quot;:&quot;948;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordLayoutBroker.RecordLayoutBrokerController/ACTION$getLayout&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;entityName&quot;:&quot;TR1__Closing_Report__c&quot;,&quot;mode&quot;:&quot;VIEW&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;layoutOverride&quot;:&quot;TR1__Assignments_Ending_in_30_Days&quot;,&quot;inContextOfComponent&quot;:&quot;force:filterList&quot;,&quot;pageSize&quot;:-1,&quot;offset&quot;:0}},{&quot;id&quot;:&quot;954;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.lists.listViewDataManager.ListViewDataManagerController/ACTION$getItems&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;filterName&quot;:&quot;TR1__Assignments_Ending_in_30_Days&quot;,&quot;entityName&quot;:&quot;TR1__Closing_Report__c&quot;,&quot;pageSize&quot;:10,&quot;layoutType&quot;:&quot;LIST&quot;,&quot;sortBy&quot;:null,&quot;getCount&quot;:false,&quot;enableRowActions&quot;:false,&quot;offset&quot;:0},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=19&amp;ui-force-components-controllers-lists-filterList.FilterList.getFilterListConfig=1&amp;ui-force-components-controllers-lists-listViewDataManager.ListViewDataManager.getItems=2&amp;ui-force-components-controllers-recordLayoutBroker.RecordLayoutBroker.getLayout=2</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">67816000000abbcdb9</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1336 /aura?r=20&amp;ui-analytics-platform-embeddedChart.EmbeddedReportChart.loadChart=3" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;972;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.analytics.platform.embeddedChart.EmbeddedReportChartController/ACTION$loadChart&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;reportIdOrDeveloperName&quot;:&quot;00O1N000007jedmUAA&quot;,&quot;embeddedChartInput&quot;:{&quot;componentId&quot;:&quot;1:562;a&quot;,&quot;filter&quot;:null,&quot;showTitle&quot;:false,&quot;size&quot;:&quot;auto&quot;,&quot;widthOverrides&quot;:null,&quot;isInteractive&quot;:false,&quot;cacheAge&quot;:86400000,&quot;origin&quot;:&quot;earc&quot;,&quot;isInS1Context&quot;:true,&quot;renderEclairChart&quot;:true}}},{&quot;id&quot;:&quot;973;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.analytics.platform.embeddedChart.EmbeddedReportChartController/ACTION$loadChart&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;reportIdOrDeveloperName&quot;:&quot;00O1N000007jedlUAA&quot;,&quot;embeddedChartInput&quot;:{&quot;componentId&quot;:&quot;1:570;a&quot;,&quot;filter&quot;:null,&quot;showTitle&quot;:false,&quot;size&quot;:&quot;auto&quot;,&quot;widthOverrides&quot;:null,&quot;isInteractive&quot;:false,&quot;cacheAge&quot;:86400000,&quot;origin&quot;:&quot;earc&quot;,&quot;isInS1Context&quot;:true,&quot;renderEclairChart&quot;:true}}},{&quot;id&quot;:&quot;974;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.analytics.platform.embeddedChart.EmbeddedReportChartController/ACTION$loadChart&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;reportIdOrDeveloperName&quot;:&quot;00O1N000007jednUAA&quot;,&quot;embeddedChartInput&quot;:{&quot;componentId&quot;:&quot;1:579;a&quot;,&quot;filter&quot;:null,&quot;showTitle&quot;:false,&quot;size&quot;:&quot;auto&quot;,&quot;widthOverrides&quot;:null,&quot;isInteractive&quot;:false,&quot;cacheAge&quot;:86400000,&quot;origin&quot;:&quot;earc&quot;,&quot;isInS1Context&quot;:true,&quot;renderEclairChart&quot;:true}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=20&amp;ui-analytics-platform-embeddedChart.EmbeddedReportChart.loadChart=3</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">6788500000003898e8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1344 /aura?r=21&amp;ui-force-components-controllers-defenseHook.DefenseHook.getDefenseHook=1&amp;ui-force-components-controllers-hostConfig.HostConfig.getConfigData=1&amp;ui-global-components-one-globalCreate.GlobalCreate.getDockableActionsList=1&amp;ui-global-components-one-userProfileCard.UserProfileCard.loadProfileCardInfo=1&amp;ui-identity-components-sessiontimeoutwarn.SessionTimeoutWarn.getSessionTimeoutConfig=1&amp;ui-notifications-components-notifications-controller.Notifications.getNotifications=1&amp;ui-rtc-components-aura-components.RtcDiscoveryBanner.getConfig=1&amp;ui-support-components-crossFrameApiManager.CrossFrameApiManager.getIsLightningOpenCtiUser=1&amp;ui-walkthroughs-components-controllers.Player.willDisplayWalkthroughInternalTool=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1379;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.defenseHook.DefenseHookController/ACTION$getDefenseHook&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}},{&quot;id&quot;:&quot;1380;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.identity.components.sessiontimeoutwarn.SessionTimeoutWarnController/ACTION$getSessionTimeoutConfig&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}},{&quot;id&quot;:&quot;1382;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.support.components.crossFrameApiManager.CrossFrameApiManagerController/ACTION$getIsLightningOpenCtiUser&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true},{&quot;id&quot;:&quot;1383;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.rtc.components.aura.components.RtcDiscoveryBannerController/ACTION$getConfig&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true},{&quot;id&quot;:&quot;1385;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.hostConfig.HostConfigController/ACTION$getConfigData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true},{&quot;id&quot;:&quot;1409;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.globalCreate.GlobalCreateController/ACTION$getDockableActionsList&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}},{&quot;id&quot;:&quot;1410;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.notifications.components.notifications.controller.NotificationsController/ACTION$getNotifications&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;currentLastActivity&quot;:&quot;1970-01-01T00:00:00.000Z&quot;}},{&quot;id&quot;:&quot;1414;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.userProfileCard.UserProfileCardController/ACTION$loadProfileCardInfo&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true},{&quot;id&quot;:&quot;1417;a&quot;,&quot;descriptor&quot;:&quot;java://ui.walkthroughs.components.controllers.PlayerController/ACTION$willDisplayWalkthroughInternalTool&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=21&amp;ui-force-components-controllers-defenseHook.DefenseHook.getDefenseHook=1&amp;ui-force-components-controllers-hostConfig.HostConfig.getConfigData=1&amp;ui-global-components-one-globalCreate.GlobalCreate.getDockableActionsList=1&amp;ui-global-components-one-userProfileCard.UserProfileCard.loadProfileCardInfo=1&amp;ui-identity-components-sessiontimeoutwarn.SessionTimeoutWarn.getSessionTimeoutConfig=1&amp;ui-notifications-components-notifications-controller.Notifications.getNotifications=1&amp;ui-rtc-components-aura-components.RtcDiscoveryBanner.getConfig=1&amp;ui-support-components-crossFrameApiManager.CrossFrameApiManager.getIsLightningOpenCtiUser=1&amp;ui-walkthroughs-components-controllers.Player.willDisplayWalkthroughInternalTool=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">70100000000c575be7</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1346 /aura?r=25&amp;ui-setup-components-aura-components-gear.Gear.getPermissions=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1420;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.setup.components.aura.components.gear.GearController/ACTION$getPermissions&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=25&amp;ui-setup-components-aura-components-gear.Gear.getPermissions=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">70105000000c091ac0</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1342 /aura?r=22&amp;ui-instrumentation-components-beacon.InstrumentationBeacon.sendData=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1378;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.instrumentation.components.beacon.InstrumentationBeaconController/ACTION$sendData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:bootstrap\&quot;,\&quot;ts\&quot;:0,\&quot;duration\&quot;:55492,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (2)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55427,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:11},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (3)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55448,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (4)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55455,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (5)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55458,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;navContainer:render\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55415,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;navContainer:afterRender\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55460,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;duration\&quot;:0}],\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://laf:standardLayoutContainer\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:280},{\&quot;name\&quot;:\&quot;markup://ui:label\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:3}]},\&quot;owner\&quot;:\&quot;laf:appLayoutHost\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;bootstrap\&quot;,\&quot;eventSource\&quot;:\&quot;lightning\&quot;,\&quot;attributes\&quot;:{\&quot;cache\&quot;:{\&quot;appCache\&quot;:false,\&quot;gvps\&quot;:false,\&quot;lightningLayout\&quot;:true},\&quot;execBootstrapJs\&quot;:8332,\&quot;execInlineJs\&quot;:8332,\&quot;appCssLoading\&quot;:null,\&quot;visibilityStateStart\&quot;:\&quot;visible\&quot;,\&quot;execAuraJs\&quot;:14970,\&quot;runInitAsync\&quot;:14974,\&quot;appCssLoadedCallback\&quot;:null,\&quot;runAfterContextCreated\&quot;:20677,\&quot;runAfterInitDefsReady\&quot;:54907,\&quot;runAfterBootstrapReady\&quot;:54908,\&quot;AuraFrameworkEPT\&quot;:54909,\&quot;appCreationStart\&quot;:54928,\&quot;appCreationEnd\&quot;:55067,\&quot;appRenderingStart\&quot;:55067,\&quot;appRenderingEnd\&quot;:55073,\&quot;bootstrapEPT\&quot;:55074,\&quot;cdnEnabled\&quot;:false,\&quot;mode\&quot;:\&quot;PROD\&quot;,\&quot;pageStartTime\&quot;:1559032372042,\&quot;timing\&quot;:{\&quot;navigationStart\&quot;:1559032372042,\&quot;fetchStart\&quot;:1559032375076,\&quot;readyStart\&quot;:3034,\&quot;dnsStart\&quot;:1559032375077,\&quot;dnsEnd\&quot;:1559032375077,\&quot;lookupDomainTime\&quot;:0,\&quot;connectStart\&quot;:1559032375077,\&quot;connectEnd\&quot;:1559032375077,\&quot;connectTime\&quot;:0,\&quot;requestStart\&quot;:1559032375077,\&quot;responseStart\&quot;:1559032375077,\&quot;responseEnd\&quot;:1559032380354,\&quot;requestTime\&quot;:5277,\&quot;domLoading\&quot;:1559032380354,\&quot;domInteractive\&quot;:1559032427125,\&quot;initDomTreeTime\&quot;:46771,\&quot;contentLoadStart\&quot;:1559032427126,\&quot;contentLoadEnd\&quot;:1559032427127,\&quot;domComplete\&quot;:1559032427127,\&quot;domReadyTime\&quot;:2,\&quot;loadEventStart\&quot;:1559032427127,\&quot;loadEventEnd\&quot;:1559032427127,\&quot;loadEventTime\&quot;:0,\&quot;loadTime\&quot;:52051,\&quot;unloadEventStart\&quot;:0,\&quot;unloadEventEnd\&quot;:0,\&quot;unloadEventTime\&quot;:0,\&quot;appCacheTime\&quot;:1,\&quot;redirectTime\&quot;:0},\&quot;type\&quot;:\&quot;COLD\&quot;,\&quot;allRequests\&quot;:[{\&quot;name\&quot;:\&quot;${protocol}://${host}/one/one.app\&quot;,\&quot;initiatorType\&quot;:\&quot;navigation\&quot;,\&quot;duration\&quot;:3035,\&quot;startTime\&quot;:0,\&quot;fetchStart\&quot;:3033,\&quot;requestStart\&quot;:3035,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:3033,\&quot;ttfb\&quot;:3035,\&quot;transfer\&quot;:0,\&quot;transferSize\&quot;:207748,\&quot;encodedBodySize\&quot;:205823,\&quot;decodedBodySize\&quot;:205823},{\&quot;name\&quot;:\&quot;${protocol}://${host}/l/%7B%22mode%22%3A%22PROD%22%2C%22app%22%3A%22one%3Aone%22%2C%22fwuid%22%3A%22pxtF0ZdGYF-z00XsmRUcGQ%22%2C%22loaded%22%3A%7B%22APPLICATION%40markup%3A%2F%2Fone%3Aone%22%3A%22Vel2xmipbW6B0F2Wfw22YA%22%7D%2C%22pathPrefix%22%3A%22%22%2C%22ls%22%3A1%7D/resources.js?version=1558443552000\&quot;,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:3850,\&quot;startTime\&quot;:8318,\&quot;fetchStart\&quot;:8318,\&quot;requestStart\&quot;:8330,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:12,\&quot;transfer\&quot;:3838,\&quot;transferSize\&quot;:9069,\&quot;encodedBodySize\&quot;:8153,\&quot;decodedBodySize\&quot;:8153,\&quot;serverTime\&quot;:19},{\&quot;name\&quot;:\&quot;appcore.js\&quot;,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:37614,\&quot;startTime\&quot;:8319,\&quot;fetchStart\&quot;:8319,\&quot;requestStart\&quot;:8332,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:1,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:56,\&quot;transfer\&quot;:37558,\&quot;transferSize\&quot;:2382443,\&quot;encodedBodySize\&quot;:2381519,\&quot;decodedBodySize\&quot;:2381519},{\&quot;name\&quot;:\&quot;app.js\&quot;,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:46546,\&quot;startTime\&quot;:8319,\&quot;fetchStart\&quot;:8319,\&quot;requestStart\&quot;:8375,\&quot;dns\&quot;:43,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:131,\&quot;transfer\&quot;:46415,\&quot;transferSize\&quot;:7566124,\&quot;encodedBodySize\&quot;:7565200,\&quot;decodedBodySize\&quot;:7565200},{\&quot;name\&quot;:\&quot;/aura_\&quot;,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:6603,\&quot;startTime\&quot;:8319,\&quot;fetchStart\&quot;:8319,\&quot;requestStart\&quot;:8330,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:56,\&quot;transfer\&quot;:6547,\&quot;transferSize\&quot;:628385,\&quot;encodedBodySize\&quot;:627462,\&quot;decodedBodySize\&quot;:627462},{\&quot;name\&quot;:\&quot;app.css\&quot;,\&quot;initiatorType\&quot;:\&quot;link\&quot;,\&quot;duration\&quot;:12300,\&quot;startTime\&quot;:8335,\&quot;fetchStart\&quot;:8335,\&quot;requestStart\&quot;:8450,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:75,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:152,\&quot;transfer\&quot;:12148,\&quot;transferSize\&quot;:1161503,\&quot;encodedBodySize\&quot;:1160587,\&quot;decodedBodySize\&quot;:1160587},{\&quot;name\&quot;:\&quot;${protocol}://${host}/aura?preloadActions\&quot;,\&quot;initiatorType\&quot;:\&quot;xmlhttprequest\&quot;,\&quot;duration\&quot;:2832,\&quot;startTime\&quot;:8335,\&quot;fetchStart\&quot;:8335,\&quot;requestStart\&quot;:8450,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:74,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:115,\&quot;transfer\&quot;:2717,\&quot;transferSize\&quot;:99615,\&quot;encodedBodySize\&quot;:97530,\&quot;decodedBodySize\&quot;:97530,\&quot;serverTime\&quot;:228},{\&quot;name\&quot;:\&quot;${protocol}://${host}/file-asset/unnamed1?v=1\&quot;,\&quot;initiatorType\&quot;:\&quot;css\&quot;,\&quot;duration\&quot;:13038,\&quot;startTime\&quot;:8340,\&quot;fetchStart\&quot;:21378,\&quot;requestStart\&quot;:0,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:-8340,\&quot;transfer\&quot;:21378,\&quot;transferSize\&quot;:0,\&quot;encodedBodySize\&quot;:0,\&quot;decodedBodySize\&quot;:0},{\&quot;name\&quot;:\&quot;${protocol}://${host}/img/one/favicon-152.png\&quot;,\&quot;initiatorType\&quot;:\&quot;other\&quot;,\&quot;duration\&quot;:14614,\&quot;startTime\&quot;:8346,\&quot;fetchStart\&quot;:8346,\&quot;requestStart\&quot;:20636,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:1,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:12291,\&quot;transfer\&quot;:2323,\&quot;transferSize\&quot;:13820,\&quot;encodedBodySize\&quot;:12929,\&quot;decodedBodySize\&quot;:12929},{\&quot;name\&quot;:\&quot;${protocol}://${host}/img/one/favicon.ico\&quot;,\&quot;initiatorType\&quot;:\&quot;other\&quot;,\&quot;duration\&quot;:14314,\&quot;startTime\&quot;:8347,\&quot;fetchStart\&quot;:8347,\&quot;requestStart\&quot;:20636,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:12290,\&quot;transfer\&quot;:2024,\&quot;transferSize\&quot;:6322,\&quot;encodedBodySize\&quot;:5430,\&quot;decodedBodySize\&quot;:5430},{\&quot;name\&quot;:\&quot;${protocol}://${host}/_slds/fonts/v2.3.0/SalesforceSans-Regular.woff2\&quot;,\&quot;initiatorType\&quot;:\&quot;other\&quot;,\&quot;duration\&quot;:4266,\&quot;startTime\&quot;:20694,\&quot;fetchStart\&quot;:20694,\&quot;requestStart\&quot;:20754,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:60,\&quot;transfer\&quot;:4206,\&quot;transferSize\&quot;:28577,\&quot;encodedBodySize\&quot;:27684,\&quot;decodedBodySize\&quot;:27684}],\&quot;requestAppCoreJs\&quot;:{\&quot;name\&quot;:\&quot;appcore.js\&quot;,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:37614,\&quot;startTime\&quot;:8319,\&quot;fetchStart\&quot;:8319,\&quot;requestStart\&quot;:8332,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:1,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:56,\&quot;transfer\&quot;:37558,\&quot;transferSize\&quot;:2382443,\&quot;encodedBodySize\&quot;:2381519,\&quot;decodedBodySize\&quot;:2381519},\&quot;requestAppJs\&quot;:{\&quot;name\&quot;:\&quot;app.js\&quot;,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:46546,\&quot;startTime\&quot;:8319,\&quot;fetchStart\&quot;:8319,\&quot;requestStart\&quot;:8375,\&quot;dns\&quot;:43,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:131,\&quot;transfer\&quot;:46415,\&quot;transferSize\&quot;:7566124,\&quot;encodedBodySize\&quot;:7565200,\&quot;decodedBodySize\&quot;:7565200},\&quot;requestAuraJs\&quot;:{\&quot;name\&quot;:\&quot;/aura_\&quot;,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:6603,\&quot;startTime\&quot;:8319,\&quot;fetchStart\&quot;:8319,\&quot;requestStart\&quot;:8330,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:56,\&quot;transfer\&quot;:6547,\&quot;transferSize\&quot;:628385,\&quot;encodedBodySize\&quot;:627462,\&quot;decodedBodySize\&quot;:627462},\&quot;requestAppCss\&quot;:{\&quot;name\&quot;:\&quot;app.css\&quot;,\&quot;initiatorType\&quot;:\&quot;link\&quot;,\&quot;duration\&quot;:12300,\&quot;startTime\&quot;:8335,\&quot;fetchStart\&quot;:8335,\&quot;requestStart\&quot;:8450,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:75,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:152,\&quot;transfer\&quot;:12148,\&quot;transferSize\&quot;:1161503,\&quot;encodedBodySize\&quot;:1160587,\&quot;decodedBodySize\&quot;:1160587},\&quot;requestLightningLayout\&quot;:{\&quot;name\&quot;:\&quot;${protocol}://${host}/aura?preloadActions\&quot;,\&quot;initiatorType\&quot;:\&quot;xmlhttprequest\&quot;,\&quot;duration\&quot;:2832,\&quot;startTime\&quot;:8335,\&quot;fetchStart\&quot;:8335,\&quot;requestStart\&quot;:8450,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:74,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:115,\&quot;transfer\&quot;:2717,\&quot;transferSize\&quot;:99615,\&quot;encodedBodySize\&quot;:97530,\&quot;decodedBodySize\&quot;:97530,\&quot;serverTime\&quot;:228},\&quot;lightningLayoutCreationStart\&quot;:55094,\&quot;lightningLayoutCreationEnd\&quot;:55376,\&quot;lightningLayoutRenderingStart\&quot;:55377,\&quot;lightningLayoutRenderingEnd\&quot;:55489,\&quot;visibilityStateEnd\&quot;:\&quot;visible\&quot;,\&quot;lightningEPT\&quot;:55492,\&quot;referer\&quot;:\&quot;Login\&quot;,\&quot;appRootRequestId\&quot;:\&quot;63a3c9a72593fa63\&quot;,\&quot;navbarCPUTime\&quot;:0,\&quot;appType\&quot;:\&quot;Standard\&quot;,\&quot;viewportHeight\&quot;:966,\&quot;viewportWidth\&quot;:1920,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:55532,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-click\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:1,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;global-nav-container-load\&quot;,\&quot;scope\&quot;:\&quot;standard-layout-container\&quot;,\&quot;context\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appNavType\&quot;:\&quot;Standard\&quot;,\&quot;appUiType\&quot;:\&quot;Lightning\&quot;,\&quot;tabId\&quot;:\&quot;0Qk1N000000CeVwSAK\&quot;,\&quot;tabContentType\&quot;:\&quot;home\&quot;,\&quot;tabIsCustom\&quot;:false,\&quot;tabIsGranular\&quot;:false,\&quot;numberOfTabs\&quot;:24,\&quot;numberOfTopLevelTabs\&quot;:24,\&quot;numberOfGranularTabs\&quot;:0,\&quot;numberOfUserAddedTabs\&quot;:9,\&quot;isPersonalized\&quot;:true}},\&quot;page\&quot;:{\&quot;entity\&quot;:\&quot;unknown\&quot;,\&quot;entityType\&quot;:\&quot;unknown\&quot;,\&quot;context\&quot;:\&quot;unknown\&quot;}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:55493,\&quot;duration\&quot;:322,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (12)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55536,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:61},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55598,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:4},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55602,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;navContainer:create\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55526,\&quot;context\&quot;:{\&quot;itemCount\&quot;:24},\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;duration\&quot;:5}],\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://one:appnav\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:0},{\&quot;name\&quot;:\&quot;markup://force:recordGlobalValueProvider\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:0}],\&quot;force_record\&quot;:[{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;retrieveDraftsFromOldStorage.55519\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55519,\&quot;context\&quot;:null},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;cacheLookup.55607\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordKey\&quot;:\&quot;$Record.0051N000005pgpoQAA.undefined.null.null.null.Name,Id.VIEW.false.null.null.null\&quot;,\&quot;keyPrefix\&quot;:\&quot;005\&quot;,\&quot;cacheHit\&quot;:false},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;recordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecord\&quot;,\&quot;parentCmpName\&quot;:\&quot;oneUserProfileCardTrigger\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;335:0;p\&quot;,\&quot;recordId\&quot;:\&quot;0051N000005pgpoQAA\&quot;,\&quot;requestConfig\&quot;:\&quot;0051N000005pgpoQAA, layoutType=undefined, layoutOverride=undefined, parentId=undefined, fields=Name,Id, optionalFields=null, mode=VIEW, updateMru=false, noServer=false\&quot;,\&quot;hitMissType\&quot;:\&quot;MISS\&quot;,\&quot;recordAgeMs\&quot;:null}}]},\&quot;owner\&quot;:\&quot;laf:appLayoutHost\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;loadClientLibrary\&quot;,\&quot;attributes\&quot;:{\&quot;library\&quot;:\&quot;canvasrendering\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:newDefs\&quot;,\&quot;ts\&quot;:56141,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;flexipage:page\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;newDefs\&quot;,\&quot;attributes\&quot;:{\&quot;componentDefs\&quot;:[\&quot;markup://flexipage:runtimeBackgroundComponentsWrapper\&quot;,\&quot;markup://one:fp0M01N000000QV8cSAG__pageWithoutSobject__1516162029000\&quot;,\&quot;markup://flexipage:runtimeComponent\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:56671,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;force:record\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;read\&quot;,\&quot;attributes\&quot;:{\&quot;recordId\&quot;:\&quot;0051N000005pgpoQAA\&quot;,\&quot;recordType\&quot;:\&quot;User\&quot;,\&quot;recordTypeSetInClient\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:2,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;read\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;page\&quot;:{\&quot;entity\&quot;:\&quot;unknown\&quot;,\&quot;entityType\&quot;:\&quot;unknown\&quot;,\&quot;context\&quot;:\&quot;unknown\&quot;}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:55244,\&quot;duration\&quot;:1670,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (2)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55427,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:11},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (3)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55448,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (4)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55455,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (5)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55458,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (12)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55536,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:61},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55598,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:4},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55602,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56740,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56742,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;navContainer:render\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55415,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;navContainer:afterRender\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55460,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;navContainer:create\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55526,\&quot;context\&quot;:{\&quot;itemCount\&quot;:24},\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;duration\&quot;:5},{\&quot;ns\&quot;:\&quot;newRouting\&quot;,\&quot;name\&quot;:\&quot;resolvePage\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55605,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;duration\&quot;:1070},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;singlePaneWindowManager:contentSelected\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56683,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;laf:singlePaneWindowManager\&quot;,\&quot;duration\&quot;:12},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;pageHost:loadContent\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56698,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;laf:pageHost\&quot;,\&quot;duration\&quot;:27}],\&quot;transport\&quot;:[{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55345,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:1,\&quot;requestLength\&quot;:873,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;203;a\&quot;],\&quot;requestId\&quot;:\&quot;553450000002de7715\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:37865,\&quot;xhrDuration\&quot;:790,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:55345,\&quot;fetchStart\&quot;:55345,\&quot;requestStart\&quot;:55347,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:3,\&quot;transfer\&quot;:787,\&quot;transferSize\&quot;:39798,\&quot;serverTime\&quot;:105,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:792},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55610,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:3,\&quot;requestLength\&quot;:1301,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;229;a\&quot;,\&quot;230;a\&quot;],\&quot;requestId\&quot;:\&quot;55610000000924ee0a\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:8661,\&quot;xhrDuration\&quot;:1056,\&quot;xhrStall\&quot;:286,\&quot;startTime\&quot;:55610,\&quot;fetchStart\&quot;:55610,\&quot;requestStart\&quot;:55896,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:289,\&quot;transfer\&quot;:767,\&quot;transferSize\&quot;:10593,\&quot;serverTime\&quot;:81,\&quot;xhrDelay\&quot;:0},\&quot;duration\&quot;:1056},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55514,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:2,\&quot;requestLength\&quot;:2434,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;133;a\&quot;,\&quot;135;a\&quot;,\&quot;147;a\&quot;,\&quot;164;a\&quot;,\&quot;182;a\&quot;,\&quot;185;a\&quot;,\&quot;195;a\&quot;],\&quot;requestId\&quot;:\&quot;5551400000038b2f10\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:20657,\&quot;xhrDuration\&quot;:1392,\&quot;xhrStall\&quot;:295,\&quot;startTime\&quot;:55516,\&quot;fetchStart\&quot;:55516,\&quot;requestStart\&quot;:55811,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:295,\&quot;transfer\&quot;:1097,\&quot;transferSize\&quot;:22590,\&quot;serverTime\&quot;:398,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:1395}],\&quot;actions\&quot;:[{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55344,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;203;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;flexipage:page\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.flexipage.components.page.FlexipageControllerV2/ACTION$getPage\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;params\&quot;:{\&quot;flexiPageDeveloperName\&quot;:\&quot;TR1__Front_Office_UtilityBar1\&quot;},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:64,\&quot;db\&quot;:2,\&quot;xhrServerTime\&quot;:100,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:799},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55606,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;229;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getTabByNameAndApp\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:37,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:77,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1068},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55609,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;230;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:recordGlobalValueProvider\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$getRecord\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:14,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:77,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1065}],\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://ui:label\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:3},{\&quot;name\&quot;:\&quot;markup://one:appnav\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:0},{\&quot;name\&quot;:\&quot;markup://force:recordGlobalValueProvider\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:0},{\&quot;name\&quot;:\&quot;markup://laf:pageHost\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:10},{\&quot;name\&quot;:\&quot;markup://home:landing\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:26}],\&quot;force_record\&quot;:[{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;retrieveDraftsFromOldStorage.55519\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55519,\&quot;context\&quot;:null},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;cacheLookup.55607\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordKey\&quot;:\&quot;$Record.0051N000005pgpoQAA.undefined.null.null.null.Name,Id.VIEW.false.null.null.null\&quot;,\&quot;keyPrefix\&quot;:\&quot;005\&quot;,\&quot;cacheHit\&quot;:false},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;recordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecord\&quot;,\&quot;parentCmpName\&quot;:\&quot;oneUserProfileCardTrigger\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;335:0;p\&quot;,\&quot;recordId\&quot;:\&quot;0051N000005pgpoQAA\&quot;,\&quot;requestConfig\&quot;:\&quot;0051N000005pgpoQAA, layoutType=undefined, layoutOverride=undefined, parentId=undefined, fields=Name,Id, optionalFields=null, mode=VIEW, updateMru=false, noServer=false\&quot;,\&quot;hitMissType\&quot;:\&quot;MISS\&quot;,\&quot;recordAgeMs\&quot;:null}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;loadRecordFromServer.55607\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordKey\&quot;:\&quot;$Record.0051N000005pgpoQAA.undefined.null.null.null.Name,Id.VIEW.false.null.null.null\&quot;,\&quot;error\&quot;:false},\&quot;duration\&quot;:1064}]},\&quot;owner\&quot;:\&quot;forceSearch:searchGDPCacheScopes\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-search-sgdp-fetch-getScopeMaps\&quot;,\&quot;attributes\&quot;:{\&quot;tStart\&quot;:1559032427288,\&quot;cacheHit\&quot;:false,\&quot;actionId\&quot;:\&quot;133;a\&quot;,\&quot;fetchedScopeMaps\&quot;:20,\&quot;name\&quot;:\&quot;DEFAULT\&quot;,\&quot;groupId\&quot;:\&quot;DEFAULT\&quot;,\&quot;requestType\&quot;:\&quot;getScopeMaps\&quot;,\&quot;requestId\&quot;:\&quot;forceSearchSearchGDPCacheScopes:201:0;p\&quot;,\&quot;requestCmp\&quot;:\&quot;forceSearchSearchGDPCacheScopes\&quot;,\&quot;requestCmpId\&quot;:\&quot;201:0;p\&quot;,\&quot;params\&quot;:{\&quot;scopeTypes\&quot;:[\&quot;SMART_SCOPE\&quot;,\&quot;PRIMARY\&quot;,\&quot;FILTER\&quot;]},\&quot;sourceCmp\&quot;:\&quot;forceSearch:searchGDPCacheScopes\&quot;,\&quot;time\&quot;:1559032428958,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:55246,\&quot;duration\&quot;:1670,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (2)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55427,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:11},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (3)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55448,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (4)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55455,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (5)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55458,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (12)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55536,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:61},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55598,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:4},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55602,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56740,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56742,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;navContainer:render\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55415,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;navContainer:afterRender\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55460,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;navContainer:create\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55526,\&quot;context\&quot;:{\&quot;itemCount\&quot;:24},\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;duration\&quot;:5},{\&quot;ns\&quot;:\&quot;newRouting\&quot;,\&quot;name\&quot;:\&quot;resolvePage\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55605,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;duration\&quot;:1070},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;singlePaneWindowManager:contentSelected\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56683,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;laf:singlePaneWindowManager\&quot;,\&quot;duration\&quot;:12},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;pageHost:loadContent\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56698,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;laf:pageHost\&quot;,\&quot;duration\&quot;:27}],\&quot;transport\&quot;:[{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55345,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:1,\&quot;requestLength\&quot;:873,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;203;a\&quot;],\&quot;requestId\&quot;:\&quot;553450000002de7715\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:37865,\&quot;xhrDuration\&quot;:790,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:55345,\&quot;fetchStart\&quot;:55345,\&quot;requestStart\&quot;:55347,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:3,\&quot;transfer\&quot;:787,\&quot;transferSize\&quot;:39798,\&quot;serverTime\&quot;:105,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:792},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55610,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:3,\&quot;requestLength\&quot;:1301,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;229;a\&quot;,\&quot;230;a\&quot;],\&quot;requestId\&quot;:\&quot;55610000000924ee0a\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:8661,\&quot;xhrDuration\&quot;:1056,\&quot;xhrStall\&quot;:286,\&quot;startTime\&quot;:55610,\&quot;fetchStart\&quot;:55610,\&quot;requestStart\&quot;:55896,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:289,\&quot;transfer\&quot;:767,\&quot;transferSize\&quot;:10593,\&quot;serverTime\&quot;:81,\&quot;xhrDelay\&quot;:0},\&quot;duration\&quot;:1056},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55514,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:2,\&quot;requestLength\&quot;:2434,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;133;a\&quot;,\&quot;135;a\&quot;,\&quot;147;a\&quot;,\&quot;164;a\&quot;,\&quot;182;a\&quot;,\&quot;185;a\&quot;,\&quot;195;a\&quot;],\&quot;requestId\&quot;:\&quot;5551400000038b2f10\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:20657,\&quot;xhrDuration\&quot;:1392,\&quot;xhrStall\&quot;:295,\&quot;startTime\&quot;:55516,\&quot;fetchStart\&quot;:55516,\&quot;requestStart\&quot;:55811,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:295,\&quot;transfer\&quot;:1097,\&quot;transferSize\&quot;:22590,\&quot;serverTime\&quot;:398,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:1395}],\&quot;actions\&quot;:[{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55344,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;203;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;flexipage:page\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.flexipage.components.page.FlexipageControllerV2/ACTION$getPage\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;params\&quot;:{\&quot;flexiPageDeveloperName\&quot;:\&quot;TR1__Front_Office_UtilityBar1\&quot;},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:64,\&quot;db\&quot;:2,\&quot;xhrServerTime\&quot;:100,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:799},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55606,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;229;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getTabByNameAndApp\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:37,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:77,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1068},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55609,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;230;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:recordGlobalValueProvider\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$getRecord\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:14,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:77,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1065}],\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://ui:label\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:3},{\&quot;name\&quot;:\&quot;markup://one:appnav\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:0},{\&quot;name\&quot;:\&quot;markup://force:recordGlobalValueProvider\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:0},{\&quot;name\&quot;:\&quot;markup://laf:pageHost\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:10},{\&quot;name\&quot;:\&quot;markup://home:landing\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:26}],\&quot;force_record\&quot;:[{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;retrieveDraftsFromOldStorage.55519\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55519,\&quot;context\&quot;:null},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;cacheLookup.55607\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordKey\&quot;:\&quot;$Record.0051N000005pgpoQAA.undefined.null.null.null.Name,Id.VIEW.false.null.null.null\&quot;,\&quot;keyPrefix\&quot;:\&quot;005\&quot;,\&quot;cacheHit\&quot;:false},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;recordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecord\&quot;,\&quot;parentCmpName\&quot;:\&quot;oneUserProfileCardTrigger\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;335:0;p\&quot;,\&quot;recordId\&quot;:\&quot;0051N000005pgpoQAA\&quot;,\&quot;requestConfig\&quot;:\&quot;0051N000005pgpoQAA, layoutType=undefined, layoutOverride=undefined, parentId=undefined, fields=Name,Id, optionalFields=null, mode=VIEW, updateMru=false, noServer=false\&quot;,\&quot;hitMissType\&quot;:\&quot;MISS\&quot;,\&quot;recordAgeMs\&quot;:null}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;loadRecordFromServer.55607\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordKey\&quot;:\&quot;$Record.0051N000005pgpoQAA.undefined.null.null.null.Name,Id.VIEW.false.null.null.null\&quot;,\&quot;error\&quot;:false},\&quot;duration\&quot;:1064}]},\&quot;owner\&quot;:\&quot;forceSearch:searchGDPCachePermsAndPrefs\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-search-sgdp-fetch-getPermsAndPrefs\&quot;,\&quot;attributes\&quot;:{\&quot;tStart\&quot;:1559032427290,\&quot;cacheHit\&quot;:false,\&quot;actionId\&quot;:\&quot;135;a\&quot;,\&quot;name\&quot;:\&quot;DEFAULT\&quot;,\&quot;groupId\&quot;:\&quot;DEFAULT\&quot;,\&quot;requestType\&quot;:\&quot;getPermsAndPrefs\&quot;,\&quot;requestId\&quot;:\&quot;forceSearchSearchGDPCachePermsAndPrefs:195:0;p\&quot;,\&quot;requestCmp\&quot;:\&quot;forceSearchSearchGDPCachePermsAndPrefs\&quot;,\&quot;requestCmpId\&quot;:\&quot;195:0;p\&quot;,\&quot;params\&quot;:{},\&quot;sourceCmp\&quot;:\&quot;forceSearch:searchGDPCachePermsAndPrefs\&quot;,\&quot;time\&quot;:1559032428958,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:57112,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;flexipage:page\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;componentTracker\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:3,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;default\&quot;,\&quot;scope\&quot;:\&quot;component\&quot;,\&quot;context\&quot;:{\&quot;devNameOrId\&quot;:[\&quot;one:utilityBarItem\&quot;,\&quot;one:utilityBarItem\&quot;,\&quot;one:utilityBarItem\&quot;,\&quot;one:utilityBarItem\&quot;]}},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:newDefs\&quot;,\&quot;ts\&quot;:58929,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;flexipage:page\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;newDefs\&quot;,\&quot;attributes\&quot;:{\&quot;componentDefs\&quot;:[\&quot;markup://home:fp0M01N000000QV8dSAG__pageWithoutSobject__1516162029000\&quot;,\&quot;markup://flexipage:runtimeBackgroundComponentsWrapper\&quot;,\&quot;markup://flexipage:runtimeComponent\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:65860,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;force:recordCollection\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;reads\&quot;,\&quot;attributes\&quot;:{\&quot;recordIds\&quot;:[],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:4,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;reads\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:66004,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;flexipage:page\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;componentTracker\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:5,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;default\&quot;,\&quot;scope\&quot;:\&quot;component\&quot;,\&quot;context\&quot;:{\&quot;devNameOrId\&quot;:[\&quot;one:utilityBarItem\&quot;,\&quot;one:utilityBarItem\&quot;,\&quot;one:utilityBarItem\&quot;,\&quot;one:utilityBarItem\&quot;,\&quot;runtime_sales_activities:todayTaskContainer\&quot;,\&quot;home:eventContainer\&quot;,\&quot;home:newsPanel\&quot;,\&quot;flexipage:reportChart\&quot;,\&quot;flexipage:reportChart\&quot;,\&quot;flexipage:reportChart\&quot;,\&quot;flexipage:reportChart\&quot;,\&quot;flexipage:filterListCard\&quot;,\&quot;flexipage:filterListCard\&quot;,\&quot;forceChatter:publisher\&quot;,\&quot;forceChatter:exposedFeed\&quot;]}},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:newDefs\&quot;,\&quot;ts\&quot;:66649,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;force:recordLayoutList\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;newDefs\&quot;,\&quot;attributes\&quot;:{\&quot;componentDefs\&quot;:[\&quot;layout://rl-Task-VIEW-COMPACT----runtime_sales_activities_todayTaskContainer-_1-0-2f5a2f5a7438684a76664f746c5765454f376c4e6b773d3d.c\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:newDefs\&quot;,\&quot;ts\&quot;:66654,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;force:recordLayoutTemplate\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;newDefs\&quot;,\&quot;attributes\&quot;:{\&quot;componentDefs\&quot;:[\&quot;layout://rl-Event-VIEW-COMPACT----home_eventContainer-_1-0-446e78382f476c71597a4739452f52436c6d6d506e413d3d.c\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:66848,\&quot;duration\&quot;:17,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;NewsRequest_1\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66848,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:16},{\&quot;ns\&quot;:\&quot;wits\&quot;,\&quot;name\&quot;:\&quot;SFXPERF:fetchNews\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66848,\&quot;context\&quot;:{\&quot;action\&quot;:\&quot;fetchNews\&quot;},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:16}]},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-wits-fetchNews\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:66866,\&quot;duration\&quot;:33,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://wits:newsTeaserCard\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:26}],\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;wits\&quot;,\&quot;name\&quot;:\&quot;displayNewsItems\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66867,\&quot;context\&quot;:{\&quot;event\&quot;:\&quot;cardRendered\&quot;,\&quot;clientType\&quot;:\&quot;SFXPERF\&quot;},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:26}]},\&quot;owner\&quot;:null,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-wits-fetchNews\&quot;,\&quot;attributes\&quot;:{\&quot;action\&quot;:\&quot;process error callback\&quot;,\&quot;clientType\&quot;:\&quot;SFXPERF\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:66807,\&quot;duration\&quot;:137,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://force:placeholder\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:1},{\&quot;name\&quot;:\&quot;markup://wits:newsTeaserCard\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:26}],\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;NewsRequest_1\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66848,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:16},{\&quot;ns\&quot;:\&quot;wits\&quot;,\&quot;name\&quot;:\&quot;SFXPERF:fetchNews\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66848,\&quot;context\&quot;:{\&quot;action\&quot;:\&quot;fetchNews\&quot;},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:16},{\&quot;ns\&quot;:\&quot;wits\&quot;,\&quot;name\&quot;:\&quot;displayNewsItems\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66867,\&quot;context\&quot;:{\&quot;event\&quot;:\&quot;cardRendered\&quot;,\&quot;clientType\&quot;:\&quot;SFXPERF\&quot;},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:26}]},\&quot;owner\&quot;:\&quot;reports:eclairReportChart\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;loadClientLibrary\&quot;,\&quot;attributes\&quot;:{\&quot;library\&quot;:\&quot;eclairng\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:67701,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;force:recordCollection\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;reads\&quot;,\&quot;attributes\&quot;:{\&quot;recordIds\&quot;:[],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:6,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;reads\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:67778,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;force:recordCollection\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;reads\&quot;,\&quot;attributes\&quot;:{\&quot;recordIds\&quot;:[],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:7,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;reads\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:67923,\&quot;duration\&quot;:67,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://forceChatter:style\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:64}]},\&quot;owner\&quot;:\&quot;forceChatter:feed\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-feed:component:create\&quot;,\&quot;attributes\&quot;:{\&quot;context\&quot;:{\&quot;type\&quot;:\&quot;BOOKMARKS\&quot;,\&quot;subjectId\&quot;:null,\&quot;searchQuery\&quot;:null,\&quot;showFeedItemActions\&quot;:true,\&quot;feedDesign\&quot;:\&quot;DEFAULT\&quot;,\&quot;firstPageSize\&quot;:4,\&quot;hasFeedSwitcher\&quot;:false,\&quot;showFilteringMenuGroup\&quot;:false,\&quot;includeRecordActivitiesInFeed\&quot;:true,\&quot;retrieveOnlyTopLevelThreadedComments\&quot;:false,\&quot;gusTeamId\&quot;:\&quot;a00B0000002pDJa\&quot;,\&quot;hardwareConcurrency\&quot;:4},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:67991,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;forceChatter:feed\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;reads\&quot;,\&quot;attributes\&quot;:{\&quot;operation\&quot;:\&quot;feedLoad\&quot;,\&quot;feedItemIds\&quot;:\&quot;\&quot;,\&quot;sortOrder\&quot;:\&quot;LastModifiedDateDesc\&quot;,\&quot;feedType\&quot;:\&quot;Bookmarks\&quot;,\&quot;startFeedItemPosition\&quot;:0,\&quot;searchQueryId\&quot;:null,\&quot;subjectId\&quot;:\&quot;user\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:8,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;load\&quot;,\&quot;scope\&quot;:\&quot;ChatterFeed\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:67994,\&quot;duration\&quot;:43,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (148)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:68007,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:8},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (149)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:68015,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:5},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (150)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:68021,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0}]},\&quot;owner\&quot;:\&quot;forceChatter:feedInner\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-feed:component:render\&quot;,\&quot;attributes\&quot;:{\&quot;context\&quot;:{\&quot;action\&quot;:\&quot;PageView\&quot;,\&quot;target\&quot;:\&quot;forceChatter:feed:init\&quot;,\&quot;type\&quot;:\&quot;Normal\&quot;,\&quot;gusTeamId\&quot;:\&quot;a00B0000002pDJa\&quot;,\&quot;hardwareConcurrency\&quot;:4},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:65998,\&quot;duration\&quot;:2039,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (138)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66038,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (139)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66039,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (142)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66603,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (143)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66705,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (144)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67863,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (145)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67875,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (148)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:68007,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:8},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (149)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:68015,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:5},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (150)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:68021,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;NewsRequest_1\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66848,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:16},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;RLTCacheInfo\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67721,\&quot;context\&quot;:{\&quot;gusTeamId\&quot;:\&quot;a00B0000003EdjdIAC\&quot;,\&quot;hasLayout\&quot;:false,\&quot;entityName\&quot;:\&quot;TR1__Closing_Report__c\&quot;,\&quot;mode\&quot;:\&quot;VIEW\&quot;,\&quot;type\&quot;:\&quot;LIST\&quot;,\&quot;cmpName\&quot;:\&quot;recordLayoutTemplate\&quot;},\&quot;owner\&quot;:\&quot;force:recordLayoutTemplate\&quot;},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;RLTCacheInfo\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67801,\&quot;context\&quot;:{\&quot;gusTeamId\&quot;:\&quot;a00B0000003EdjdIAC\&quot;,\&quot;hasLayout\&quot;:false,\&quot;entityName\&quot;:\&quot;TR1__Closing_Report__c\&quot;,\&quot;mode\&quot;:\&quot;VIEW\&quot;,\&quot;type\&quot;:\&quot;LIST\&quot;,\&quot;cmpName\&quot;:\&quot;recordLayoutTemplate\&quot;},\&quot;owner\&quot;:\&quot;force:recordLayoutTemplate\&quot;},{\&quot;ns\&quot;:\&quot;wits\&quot;,\&quot;name\&quot;:\&quot;newsPanelRender\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66030,\&quot;context\&quot;:{\&quot;action\&quot;:\&quot;newsPanelRender\&quot;},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:11},{\&quot;ns\&quot;:\&quot;wits\&quot;,\&quot;name\&quot;:\&quot;SFXPERF:fetchNews\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66848,\&quot;context\&quot;:{\&quot;action\&quot;:\&quot;fetchNews\&quot;},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:16},{\&quot;ns\&quot;:\&quot;wits\&quot;,\&quot;name\&quot;:\&quot;displayNewsItems\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66867,\&quot;context\&quot;:{\&quot;event\&quot;:\&quot;cardRendered\&quot;,\&quot;clientType\&quot;:\&quot;SFXPERF\&quot;},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:26},{\&quot;ns\&quot;:\&quot;feeds\&quot;,\&quot;name\&quot;:\&quot;feedXhrAndNetworkTime\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66049,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;forceChatter:feed\&quot;,\&quot;duration\&quot;:1874},{\&quot;ns\&quot;:\&quot;feeds\&quot;,\&quot;name\&quot;:\&quot;feedClientCreateTime\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67923,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;forceChatter:feed\&quot;,\&quot;duration\&quot;:66},{\&quot;ns\&quot;:\&quot;feeds\&quot;,\&quot;name\&quot;:\&quot;feedRenderTime\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67994,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;forceChatter:feedInner\&quot;,\&quot;duration\&quot;:43},{\&quot;ns\&quot;:\&quot;force:recordLayoutTemplate\&quot;,\&quot;name\&quot;:\&quot;layoutItems\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66662,\&quot;context\&quot;:{\&quot;itemCount\&quot;:1}},{\&quot;ns\&quot;:\&quot;force:recordLayoutTemplate\&quot;,\&quot;name\&quot;:\&quot;storageSize\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66662,\&quot;context\&quot;:{\&quot;storageSize\&quot;:\&quot;0.2509765625 KB\&quot;}}],\&quot;transport\&quot;:[{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66663,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:3,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:771,\&quot;startTime\&quot;:66663,\&quot;fetchStart\&quot;:66663,\&quot;requestStart\&quot;:66686,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:24,\&quot;transfer\&quot;:747,\&quot;transferSize\&quot;:112407,\&quot;encodedBodySize\&quot;:111457,\&quot;decodedBodySize\&quot;:111457,\&quot;serverTime\&quot;:36,\&quot;defs\&quot;:[\&quot;markup://runtime_sales_activities:manyWhoName\&quot;,\&quot;markup://runtime_sales_activities:manyWhoNameCompact\&quot;,\&quot;markup://runtime_sales_activities:taskCompactStencil\&quot;],\&quot;xhrDelay\&quot;:5},\&quot;duration\&quot;:776},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66598,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:14,\&quot;requestLength\&quot;:3037,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;508;a\&quot;,\&quot;562;a\&quot;,\&quot;570;a\&quot;,\&quot;573;a\&quot;,\&quot;579;a\&quot;,\&quot;584;a\&quot;,\&quot;589;a\&quot;],\&quot;requestId\&quot;:\&quot;66598000000a8c2e87\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:7630,\&quot;xhrDuration\&quot;:935,\&quot;xhrStall\&quot;:1,\&quot;startTime\&quot;:66599,\&quot;fetchStart\&quot;:66599,\&quot;requestStart\&quot;:66600,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:1,\&quot;transfer\&quot;:934,\&quot;transferSize\&quot;:9563,\&quot;serverTime\&quot;:182,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:938},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66660,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:15,\&quot;requestLength\&quot;:1087,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;597;a\&quot;],\&quot;requestId\&quot;:\&quot;666600000004b0c8d9\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:10907,\&quot;xhrDuration\&quot;:916,\&quot;xhrStall\&quot;:25,\&quot;startTime\&quot;:66660,\&quot;fetchStart\&quot;:66660,\&quot;requestStart\&quot;:66685,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:27,\&quot;transfer\&quot;:889,\&quot;transferSize\&quot;:12840,\&quot;serverTime\&quot;:130,\&quot;xhrDelay\&quot;:337},\&quot;duration\&quot;:1253},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66702,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:16,\&quot;requestLength\&quot;:1146,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;613;a\&quot;],\&quot;requestId\&quot;:\&quot;66702000000aae79e5\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:13087,\&quot;xhrDuration\&quot;:920,\&quot;xhrStall\&quot;:61,\&quot;startTime\&quot;:66702,\&quot;fetchStart\&quot;:66702,\&quot;requestStart\&quot;:66763,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:61,\&quot;transfer\&quot;:859,\&quot;transferSize\&quot;:15020,\&quot;serverTime\&quot;:129,\&quot;xhrDelay\&quot;:298},\&quot;duration\&quot;:1218}],\&quot;actions\&quot;:[{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66050,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;613;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:false,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;forceChatter:feed\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.chatter.components.aura.components.forceChatter.chatter.FeedController/ACTION$getModel\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;params\&quot;:{\&quot;type\&quot;:\&quot;BOOKMARKS\&quot;,\&quot;subjectId\&quot;:\&quot;undefined\&quot;,\&quot;firstPageSize\&quot;:4},\&quot;xhrWait\&quot;:649,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:99,\&quot;db\&quot;:45,\&quot;xhrServerTime\&quot;:125,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:69,\&quot;duration\&quot;:1941}],\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://force:placeholder\&quot;,\&quot;createCount\&quot;:13,\&quot;createTimeTotal\&quot;:8},{\&quot;name\&quot;:\&quot;markup://force:emptyState\&quot;,\&quot;createCount\&quot;:2,\&quot;createTimeTotal\&quot;:1},{\&quot;name\&quot;:\&quot;markup://analytics:embeddedReportChart\&quot;,\&quot;createCount\&quot;:4,\&quot;createTimeTotal\&quot;:167},{\&quot;name\&quot;:\&quot;markup://wits:newsTeaserCard\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:26},{\&quot;name\&quot;:\&quot;markup://force:listTemplate\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:7},{\&quot;name\&quot;:\&quot;markup://flexipage:card\&quot;,\&quot;createCount\&quot;:2,\&quot;createTimeTotal\&quot;:148},{\&quot;name\&quot;:\&quot;markup://forceChatter:style\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:64}],\&quot;force_record\&quot;:[{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;bulkRecordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67702,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecordCollection\&quot;,\&quot;parentCmpName\&quot;:\&quot;auraIf\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;97:584;a\&quot;,\&quot;bulkGetHitCount\&quot;:0,\&quot;bulkGetMissCount\&quot;:0,\&quot;totalRecordsRequested\&quot;:0}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;bulkRecordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67778,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecordCollection\&quot;,\&quot;parentCmpName\&quot;:\&quot;auraIf\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;97:589;a\&quot;,\&quot;bulkGetHitCount\&quot;:0,\&quot;bulkGetMissCount\&quot;:0,\&quot;totalRecordsRequested\&quot;:0}}]},\&quot;owner\&quot;:\&quot;forceChatter:feed\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-feed:centerStage\&quot;,\&quot;attributes\&quot;:{\&quot;context\&quot;:{\&quot;foregroundPanel\&quot;:true,\&quot;feedType\&quot;:\&quot;BOOKMARKS\&quot;,\&quot;subjectId\&quot;:\&quot;undefined\&quot;,\&quot;action\&quot;:\&quot;PageView\&quot;,\&quot;target\&quot;:\&quot;forceChatter:feed:init\&quot;,\&quot;type\&quot;:\&quot;Normal\&quot;,\&quot;gusTeamId\&quot;:\&quot;a00B0000002pDJa\&quot;,\&quot;hardwareConcurrency\&quot;:4},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:newDefs\&quot;,\&quot;ts\&quot;:68830,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;one:one\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;newDefs\&quot;,\&quot;attributes\&quot;:{\&quot;componentDefs\&quot;:[\&quot;layout://rl-TR1__Closing_Report__c-VIEW-LIST--TR1__Assignments_Ending_in_30_Days--force_filterList-_1-0-6c486564426970424d62636352426853314f4b5944413d3d.c\&quot;,\&quot;layout://rl-TR1__Closing_Report__c-VIEW-LIST--TR1__My_Active_Assignments--force_filterList-_1-0-444c5970374e2b366758534c353563386742742f77413d3d.c\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:69529,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;force:recordCollection\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;reads\&quot;,\&quot;attributes\&quot;:{\&quot;recordIds\&quot;:[],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:9,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;reads\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:69538,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;force:recordCollection\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;reads\&quot;,\&quot;attributes\&quot;:{\&quot;recordIds\&quot;:[\&quot;a091N00000bMS2wQAG\&quot;,\&quot;a091N00000bMS2xQAG\&quot;,\&quot;a091N00000bMS2yQAG\&quot;,\&quot;a091N00000bMS2zQAG\&quot;,\&quot;a091N00000bMS30QAG\&quot;,\&quot;a091N00000bMS31QAG\&quot;,\&quot;a091N00000bMS32QAG\&quot;,\&quot;a091N00000bMS33QAG\&quot;,\&quot;a091N00000bMS34QAG\&quot;,\&quot;a091N00000bMS35QAG\&quot;],\&quot;recordType\&quot;:\&quot;TR1__Closing_Report__c\&quot;,\&quot;recordTypeSetInClient\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:10,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;reads\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:69554,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;force:recordCollection\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;reads\&quot;,\&quot;attributes\&quot;:{\&quot;recordIds\&quot;:[],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:11,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;reads\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:69568,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;force:recordCollection\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;reads\&quot;,\&quot;attributes\&quot;:{\&quot;recordIds\&quot;:[\&quot;a091N00000gAidrQAC\&quot;,\&quot;a091N00000gAjE0QAK\&quot;,\&quot;a091N00000gAjE1QAK\&quot;,\&quot;a091N00000gAjDKQA0\&quot;,\&quot;a091N00000gAjE2QAK\&quot;,\&quot;a091N00000gAiCXQA0\&quot;,\&quot;a091N00000gAjE3QAK\&quot;,\&quot;a091N00000gAc9xQAC\&quot;,\&quot;a091N00000gAidsQAC\&quot;,\&quot;a091N00000i9SlyQAE\&quot;],\&quot;recordType\&quot;:\&quot;TR1__Closing_Report__c\&quot;,\&quot;recordTypeSetInClient\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:12,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;reads\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPageView&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:pageView\&quot;,\&quot;ts\&quot;:55605,\&quot;duration\&quot;:14472,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56740,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56742,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (116)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:57041,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (117)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:57043,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (118)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:57044,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (119)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:57045,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (120)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:57049,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (126)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:58908,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (127)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:58908,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (128)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:58909,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (129)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:58910,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (130)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:58911,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (131)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:58911,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (132)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:58913,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (133)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:58914,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (138)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66038,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (139)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66039,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (142)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66603,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (143)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66705,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (144)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67863,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (145)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67875,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (148)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:68007,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:8},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (149)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:68015,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:5},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (150)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:68021,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (156)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69811,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (157)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69813,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (158)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69815,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (159)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69817,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (160)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69820,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (161)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69821,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (162)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69823,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (163)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69824,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (164)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69826,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (165)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69828,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (176)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69959,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (177)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69981,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (178)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69985,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (179)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69987,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (180)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69990,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (181)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69993,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (182)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69994,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (183)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69997,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (184)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69999,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (185)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:70002,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0}],\&quot;transport\&quot;:[{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55610,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:3,\&quot;requestLength\&quot;:1301,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;229;a\&quot;,\&quot;230;a\&quot;],\&quot;requestId\&quot;:\&quot;55610000000924ee0a\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:8661,\&quot;xhrDuration\&quot;:1056,\&quot;xhrStall\&quot;:286,\&quot;startTime\&quot;:55610,\&quot;fetchStart\&quot;:55610,\&quot;requestStart\&quot;:55896,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:289,\&quot;transfer\&quot;:767,\&quot;transferSize\&quot;:10593,\&quot;serverTime\&quot;:81,\&quot;xhrDelay\&quot;:0},\&quot;duration\&quot;:1056},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:56147,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:0,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:850,\&quot;startTime\&quot;:56147,\&quot;fetchStart\&quot;:56147,\&quot;requestStart\&quot;:56180,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:34,\&quot;transfer\&quot;:816,\&quot;transferSize\&quot;:161108,\&quot;encodedBodySize\&quot;:160156,\&quot;decodedBodySize\&quot;:160156,\&quot;serverTime\&quot;:113,\&quot;defs\&quot;:[\&quot;markup://flexipage:componentDecorator\&quot;,\&quot;markup://force:filterDataProvider\&quot;,\&quot;markup://force:listSortOrderChangeAppLevel\&quot;,\&quot;markup://force:listViewStatusInfo\&quot;,\&quot;markup://force:mruDataProvider\&quot;,\&quot;markup://force:notesBaseListViewNonGrid\&quot;,\&quot;markup://force:notesObjectHomeListLibrary\&quot;,\&quot;markup://force:notesObjectHomeListViewIdChange\&quot;,\&quot;markup://force:notesObjectHomeListViewStatusChange\&quot;],\&quot;xhrDelay\&quot;:80},\&quot;duration\&quot;:930},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:56725,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:5,\&quot;requestLength\&quot;:814,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;286;a\&quot;],\&quot;requestId\&quot;:\&quot;567250000008c04ddd\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:7060,\&quot;xhrDuration\&quot;:740,\&quot;xhrStall\&quot;:20,\&quot;startTime\&quot;:56725,\&quot;fetchStart\&quot;:56725,\&quot;requestStart\&quot;:56745,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:21,\&quot;transfer\&quot;:719,\&quot;transferSize\&quot;:8992,\&quot;serverTime\&quot;:31,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:742},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:57056,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:6,\&quot;requestLength\&quot;:923,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;390;a\&quot;],\&quot;requestId\&quot;:\&quot;570560000005eeeb5d\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:7149,\&quot;xhrDuration\&quot;:715,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:57056,\&quot;fetchStart\&quot;:57056,\&quot;requestStart\&quot;:57058,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:3,\&quot;transfer\&quot;:712,\&quot;transferSize\&quot;:9081,\&quot;serverTime\&quot;:28,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:717},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:57122,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:1,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:1731,\&quot;startTime\&quot;:57123,\&quot;fetchStart\&quot;:58164,\&quot;requestStart\&quot;:58165,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:1040,\&quot;ttfb\&quot;:1042,\&quot;transfer\&quot;:689,\&quot;transferSize\&quot;:2930,\&quot;encodedBodySize\&quot;:1982,\&quot;decodedBodySize\&quot;:1982,\&quot;serverTime\&quot;:23,\&quot;defs\&quot;:[\&quot;markup://one:utilityBarContent\&quot;],\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:1733},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:56705,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:4,\&quot;requestLength\&quot;:871,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;269;a\&quot;],\&quot;requestId\&quot;:\&quot;56705000000a77506a\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:57861,\&quot;xhrDuration\&quot;:2164,\&quot;xhrStall\&quot;:1,\&quot;startTime\&quot;:56706,\&quot;fetchStart\&quot;:56706,\&quot;requestStart\&quot;:56707,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:2,\&quot;transfer\&quot;:2162,\&quot;transferSize\&quot;:59794,\&quot;serverTime\&quot;:130,\&quot;xhrDelay\&quot;:57},\&quot;duration\&quot;:2221},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:61923,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:7,\&quot;requestLength\&quot;:1153,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;395;a\&quot;,\&quot;471;a\&quot;],\&quot;requestId\&quot;:\&quot;6192400000083cfc8c\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6854,\&quot;xhrDuration\&quot;:906,\&quot;xhrStall\&quot;:1,\&quot;startTime\&quot;:61924,\&quot;fetchStart\&quot;:61924,\&quot;requestStart\&quot;:61925,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:2,\&quot;transfer\&quot;:904,\&quot;transferSize\&quot;:8786,\&quot;serverTime\&quot;:96,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:909},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:58932,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:2,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:6823,\&quot;startTime\&quot;:58932,\&quot;fetchStart\&quot;:58932,\&quot;requestStart\&quot;:58934,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:2,\&quot;transfer\&quot;:6821,\&quot;transferSize\&quot;:582472,\&quot;encodedBodySize\&quot;:581551,\&quot;decodedBodySize\&quot;:581551,\&quot;defs\&quot;:[\&quot;markup://calendar:refresh\&quot;,\&quot;markup://force:calendarDateLibrary\&quot;,\&quot;markup://force:calendarLibrary\&quot;,\&quot;markup://force:calendarStoreCreate\&quot;,\&quot;markup://force:calendarStoreUpdate\&quot;,\&quot;markup://force:changeCalendarType\&quot;,\&quot;markup://force:emptyState\&quot;,\&quot;markup://force:menuTriggerIcon\&quot;,\&quot;markup://forceChatter:delegateFeedUtilityService\&quot;],\&quot;xhrDelay\&quot;:13},\&quot;duration\&quot;:6836},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65822,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:8,\&quot;requestLength\&quot;:897,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;486;a\&quot;],\&quot;requestId\&quot;:\&quot;65822000000729497f\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6816,\&quot;xhrDuration\&quot;:754,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:65823,\&quot;fetchStart\&quot;:65823,\&quot;requestStart\&quot;:65825,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:3,\&quot;transfer\&quot;:751,\&quot;transferSize\&quot;:8748,\&quot;serverTime\&quot;:62,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:756},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65831,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:9,\&quot;requestLength\&quot;:1067,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;489;a\&quot;],\&quot;requestId\&quot;:\&quot;65831000000ffec684\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:29876,\&quot;xhrDuration\&quot;:811,\&quot;xhrStall\&quot;:33,\&quot;startTime\&quot;:65832,\&quot;fetchStart\&quot;:65832,\&quot;requestStart\&quot;:65865,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:33,\&quot;transfer\&quot;:778,\&quot;transferSize\&quot;:31808,\&quot;serverTime\&quot;:69,\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:815},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65889,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:10,\&quot;requestLength\&quot;:1009,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;521;a\&quot;],\&quot;requestId\&quot;:\&quot;6588900000013030b5\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:16874,\&quot;xhrDuration\&quot;:753,\&quot;xhrStall\&quot;:12,\&quot;startTime\&quot;:65890,\&quot;fetchStart\&quot;:65890,\&quot;requestStart\&quot;:65902,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:19,\&quot;transfer\&quot;:734,\&quot;transferSize\&quot;:18806,\&quot;serverTime\&quot;:44,\&quot;xhrDelay\&quot;:9},\&quot;duration\&quot;:762},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65921,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:11,\&quot;requestLength\&quot;:852,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;528;a\&quot;],\&quot;requestId\&quot;:\&quot;659210000008b83520\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6819,\&quot;xhrDuration\&quot;:762,\&quot;xhrStall\&quot;:28,\&quot;startTime\&quot;:65922,\&quot;fetchStart\&quot;:65922,\&quot;requestStart\&quot;:65950,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:28,\&quot;transfer\&quot;:734,\&quot;transferSize\&quot;:8751,\&quot;serverTime\&quot;:52,\&quot;xhrDelay\&quot;:5},\&quot;duration\&quot;:767},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65946,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:13,\&quot;requestLength\&quot;:852,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;554;a\&quot;],\&quot;requestId\&quot;:\&quot;65946000000f087630\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6828,\&quot;xhrDuration\&quot;:815,\&quot;xhrStall\&quot;:4,\&quot;startTime\&quot;:65946,\&quot;fetchStart\&quot;:65946,\&quot;requestStart\&quot;:65950,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:1,\&quot;ttfb\&quot;:76,\&quot;transfer\&quot;:739,\&quot;transferSize\&quot;:8760,\&quot;serverTime\&quot;:34,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:817},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65936,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:12,\&quot;requestLength\&quot;:823,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;546;a\&quot;],\&quot;requestId\&quot;:\&quot;6593600000031c5b50\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:8174,\&quot;xhrDuration\&quot;:825,\&quot;xhrStall\&quot;:13,\&quot;startTime\&quot;:65937,\&quot;fetchStart\&quot;:65937,\&quot;requestStart\&quot;:65950,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:13,\&quot;transfer\&quot;:812,\&quot;transferSize\&quot;:10106,\&quot;serverTime\&quot;:61,\&quot;xhrDelay\&quot;:82},\&quot;duration\&quot;:907},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66663,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:3,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:771,\&quot;startTime\&quot;:66663,\&quot;fetchStart\&quot;:66663,\&quot;requestStart\&quot;:66686,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:24,\&quot;transfer\&quot;:747,\&quot;transferSize\&quot;:112407,\&quot;encodedBodySize\&quot;:111457,\&quot;decodedBodySize\&quot;:111457,\&quot;serverTime\&quot;:36,\&quot;defs\&quot;:[\&quot;markup://runtime_sales_activities:manyWhoName\&quot;,\&quot;markup://runtime_sales_activities:manyWhoNameCompact\&quot;,\&quot;markup://runtime_sales_activities:taskCompactStencil\&quot;],\&quot;xhrDelay\&quot;:5},\&quot;duration\&quot;:776},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66598,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:14,\&quot;requestLength\&quot;:3037,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;508;a\&quot;,\&quot;562;a\&quot;,\&quot;570;a\&quot;,\&quot;573;a\&quot;,\&quot;579;a\&quot;,\&quot;584;a\&quot;,\&quot;589;a\&quot;],\&quot;requestId\&quot;:\&quot;66598000000a8c2e87\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:7630,\&quot;xhrDuration\&quot;:935,\&quot;xhrStall\&quot;:1,\&quot;startTime\&quot;:66599,\&quot;fetchStart\&quot;:66599,\&quot;requestStart\&quot;:66600,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:1,\&quot;transfer\&quot;:934,\&quot;transferSize\&quot;:9563,\&quot;serverTime\&quot;:182,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:938},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66660,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:15,\&quot;requestLength\&quot;:1087,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;597;a\&quot;],\&quot;requestId\&quot;:\&quot;666600000004b0c8d9\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:10907,\&quot;xhrDuration\&quot;:916,\&quot;xhrStall\&quot;:25,\&quot;startTime\&quot;:66660,\&quot;fetchStart\&quot;:66660,\&quot;requestStart\&quot;:66685,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:27,\&quot;transfer\&quot;:889,\&quot;transferSize\&quot;:12840,\&quot;serverTime\&quot;:130,\&quot;xhrDelay\&quot;:337},\&quot;duration\&quot;:1253},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66702,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:16,\&quot;requestLength\&quot;:1146,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;613;a\&quot;],\&quot;requestId\&quot;:\&quot;66702000000aae79e5\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:13087,\&quot;xhrDuration\&quot;:920,\&quot;xhrStall\&quot;:61,\&quot;startTime\&quot;:66702,\&quot;fetchStart\&quot;:66702,\&quot;requestStart\&quot;:66763,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:61,\&quot;transfer\&quot;:859,\&quot;transferSize\&quot;:15020,\&quot;serverTime\&quot;:129,\&quot;xhrDelay\&quot;:298},\&quot;duration\&quot;:1218},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66893,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:18,\&quot;requestLength\&quot;:942,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;691;a\&quot;],\&quot;requestId\&quot;:\&quot;668930000004a93b80\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6766,\&quot;xhrDuration\&quot;:1331,\&quot;xhrStall\&quot;:540,\&quot;startTime\&quot;:66894,\&quot;fetchStart\&quot;:66894,\&quot;requestStart\&quot;:67434,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:542,\&quot;transfer\&quot;:789,\&quot;transferSize\&quot;:8698,\&quot;serverTime\&quot;:45,\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:1335},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66837,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:17,\&quot;requestLength\&quot;:1191,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;690;a\&quot;],\&quot;requestId\&quot;:\&quot;66837000000407f092\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:10279,\&quot;xhrDuration\&quot;:1470,\&quot;xhrStall\&quot;:493,\&quot;startTime\&quot;:66838,\&quot;fetchStart\&quot;:66838,\&quot;requestStart\&quot;:67331,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:494,\&quot;transfer\&quot;:976,\&quot;transferSize\&quot;:12212,\&quot;serverTime\&quot;:215,\&quot;xhrDelay\&quot;:1},\&quot;duration\&quot;:1471},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67816,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:19,\&quot;requestLength\&quot;:2997,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;889;a\&quot;,\&quot;895;a\&quot;,\&quot;899;a\&quot;,\&quot;948;a\&quot;,\&quot;954;a\&quot;],\&quot;requestId\&quot;:\&quot;67816000000abbcdb9\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:83066,\&quot;xhrDuration\&quot;:974,\&quot;xhrStall\&quot;:1,\&quot;startTime\&quot;:67817,\&quot;fetchStart\&quot;:67817,\&quot;requestStart\&quot;:67818,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:1,\&quot;transfer\&quot;:973,\&quot;transferSize\&quot;:84999,\&quot;serverTime\&quot;:284,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:976},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:68052,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:4,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:956,\&quot;startTime\&quot;:68052,\&quot;fetchStart\&quot;:68052,\&quot;requestStart\&quot;:68226,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:211,\&quot;transfer\&quot;:745,\&quot;transferSize\&quot;:82011,\&quot;encodedBodySize\&quot;:81095,\&quot;decodedBodySize\&quot;:81095,\&quot;serverTime\&quot;:45,\&quot;defs\&quot;:[\&quot;markup://TR1:DocumentParser\&quot;,\&quot;markup://lightning:badge\&quot;,\&quot;markup://lightning:card\&quot;,\&quot;markup://lightning:fileUpload\&quot;,\&quot;markup://lightning:progressBar\&quot;,\&quot;markup://lightning:progressIndicator\&quot;,\&quot;markup://lightning:progressStep\&quot;,\&quot;markup://lightning:radioGroup\&quot;,\&quot;markup://lightning:textarea\&quot;],\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:960},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67885,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:20,\&quot;requestLength\&quot;:2429,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;972;a\&quot;,\&quot;973;a\&quot;,\&quot;974;a\&quot;],\&quot;requestId\&quot;:\&quot;6788500000003898e8\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:18650,\&quot;xhrDuration\&quot;:1408,\&quot;xhrStall\&quot;:298,\&quot;startTime\&quot;:67885,\&quot;fetchStart\&quot;:67885,\&quot;requestStart\&quot;:68183,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:298,\&quot;transfer\&quot;:1110,\&quot;transferSize\&quot;:20583,\&quot;serverTime\&quot;:413,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:1410},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:68835,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:5,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:686,\&quot;startTime\&quot;:68835,\&quot;fetchStart\&quot;:68835,\&quot;requestStart\&quot;:68837,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:2,\&quot;transfer\&quot;:684,\&quot;transferSize\&quot;:11052,\&quot;encodedBodySize\&quot;:10103,\&quot;decodedBodySize\&quot;:10103,\&quot;serverTime\&quot;:23,\&quot;defs\&quot;:[\&quot;markup://force:listRecord\&quot;],\&quot;xhrDelay\&quot;:1},\&quot;duration\&quot;:687}],\&quot;actions\&quot;:[{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55606,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;229;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getTabByNameAndApp\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:37,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:77,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1068},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55609,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;230;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:recordGlobalValueProvider\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$getRecord\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:14,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:77,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1065},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:56721,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;286;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;home:landing\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.home.impl.landing.LandingController/ACTION$populateTodayGVP\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:4,\&quot;serverTime\&quot;:{\&quot;total\&quot;:6,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:28,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:751},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:57056,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;390;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:socialPhotoController\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.socialPhoto.SocialPhotoController/ACTION$resolvePhotos\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:25,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:4,\&quot;duration\&quot;:723},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:56705,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;269;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;flexipage:page\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.flexipage.components.page.FlexipageControllerV2/ACTION$getPage\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;params\&quot;:{\&quot;flexiPageDeveloperName\&quot;:\&quot;Home_Page_Default\&quot;},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:60,\&quot;db\&quot;:17,\&quot;xhrServerTime\&quot;:124,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:2225},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:57086,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;395;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ComponentController/ACTION$reportDeprecationUsages\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:4811,\&quot;enqueueWait\&quot;:26,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:93,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:5750},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:61923,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;471;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;one:systemMessage\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.global.components.one.systemMessage.SystemMessageController/ACTION$getSystemMessages\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:1,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:93,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:6,\&quot;duration\&quot;:920},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65822,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;486;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;runtime_sales_activities:todayTasksCardDataProvider\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.today.impl.components.today.taskContainer.TodayTasksCardDataManagerController/ACTION$getTasks\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;params\&quot;:{\&quot;limit\&quot;:5},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:31,\&quot;db\&quot;:6,\&quot;xhrServerTime\&quot;:59,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:18,\&quot;duration\&quot;:775},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65831,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;489;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ComponentController/ACTION$getComponent\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;params\&quot;:{\&quot;name\&quot;:\&quot;markup://force:listTemplate\&quot;},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:18,\&quot;db\&quot;:1,\&quot;xhrServerTime\&quot;:65,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:819},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65889,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;521;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:recordLayoutTemplate\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.recordLayoutBroker.RecordLayoutBrokerController/ACTION$getLayout\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:13,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:40,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:5,\&quot;duration\&quot;:770},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65921,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;528;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;home:eventCardDataManager\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.calendar.impl.controllers.SFDCCalendarDataProviderController/ACTION$getTodayEvents\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:23,\&quot;db\&quot;:4,\&quot;xhrServerTime\&quot;:48,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:10,\&quot;duration\&quot;:780},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65946,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;554;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;flexipage:reportChart\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.flexipage.components.reportchart.ReportChartController/ACTION$getReportInfo\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:6,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:30,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:67,\&quot;duration\&quot;:885},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65936,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;546;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.wits.impl.components.news.NewsPanelController/ACTION$getNewsMetaData\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:33,\&quot;db\&quot;:4,\&quot;xhrServerTime\&quot;:57,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:4,\&quot;duration\&quot;:914},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65851,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;508;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ComponentController/ACTION$reportDeprecationUsages\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:593,\&quot;enqueueWait\&quot;:154,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:178,\&quot;boxCarCount\&quot;:7},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1688},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65952,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;562;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;flexipage:reportChart\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.flexipage.components.reportchart.ReportChartController/ACTION$getReportInfo\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:593,\&quot;enqueueWait\&quot;:53,\&quot;serverTime\&quot;:{\&quot;total\&quot;:9,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:178,\&quot;boxCarCount\&quot;:7},\&quot;callbackTime\&quot;:64,\&quot;duration\&quot;:1651},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65958,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;570;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;flexipage:reportChart\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.flexipage.components.reportchart.ReportChartController/ACTION$getReportInfo\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:593,\&quot;enqueueWait\&quot;:47,\&quot;serverTime\&quot;:{\&quot;total\&quot;:7,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:178,\&quot;boxCarCount\&quot;:7},\&quot;callbackTime\&quot;:34,\&quot;duration\&quot;:1679},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65959,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;573;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ComponentController/ACTION$reportDeprecationUsages\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:593,\&quot;enqueueWait\&quot;:46,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:178,\&quot;boxCarCount\&quot;:7},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1678},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65962,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;579;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;flexipage:reportChart\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.flexipage.components.reportchart.ReportChartController/ACTION$getReportInfo\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:593,\&quot;enqueueWait\&quot;:43,\&quot;serverTime\&quot;:{\&quot;total\&quot;:7,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:178,\&quot;boxCarCount\&quot;:7},\&quot;callbackTime\&quot;:28,\&quot;duration\&quot;:1703},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65968,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;584;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;flexipage:filterListCard\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.flexipage.components.filterlistcard.FilterListCardController/ACTION$getFilterLabel\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:593,\&quot;enqueueWait\&quot;:37,\&quot;serverTime\&quot;:{\&quot;total\&quot;:97,\&quot;db\&quot;:12,\&quot;xhrServerTime\&quot;:178,\&quot;boxCarCount\&quot;:7},\&quot;callbackTime\&quot;:84,\&quot;duration\&quot;:1781},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65972,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;589;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;flexipage:filterListCard\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.flexipage.components.filterlistcard.FilterListCardController/ACTION$getFilterLabel\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:593,\&quot;enqueueWait\&quot;:33,\&quot;serverTime\&quot;:{\&quot;total\&quot;:22,\&quot;db\&quot;:6,\&quot;xhrServerTime\&quot;:178,\&quot;boxCarCount\&quot;:7},\&quot;callbackTime\&quot;:65,\&quot;duration\&quot;:1842},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65981,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;597;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;one:actionsManager\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.global.components.one.actionsManager.ActionsManagerController/ACTION$handleAction\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:655,\&quot;enqueueWait\&quot;:24,\&quot;serverTime\&quot;:{\&quot;total\&quot;:97,\&quot;db\&quot;:39,\&quot;xhrServerTime\&quot;:125,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:2,\&quot;duration\&quot;:1937},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66050,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;613;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:false,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;forceChatter:feed\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.chatter.components.aura.components.forceChatter.chatter.FeedController/ACTION$getModel\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;params\&quot;:{\&quot;type\&quot;:\&quot;BOOKMARKS\&quot;,\&quot;subjectId\&quot;:\&quot;undefined\&quot;,\&quot;firstPageSize\&quot;:4},\&quot;xhrWait\&quot;:649,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:99,\&quot;db\&quot;:45,\&quot;xhrServerTime\&quot;:125,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:69,\&quot;duration\&quot;:1941},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66866,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;691;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.wits.impl.components.news.NewsPanelController/ACTION$notifyError\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:27,\&quot;serverTime\&quot;:{\&quot;total\&quot;:7,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:39,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1365},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66835,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;690;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;analytics:embeddedReportChart\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.analytics.platform.embeddedChart.EmbeddedReportChartController/ACTION$loadChart\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:130,\&quot;db\&quot;:38,\&quot;xhrServerTime\&quot;:211,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:9,\&quot;duration\&quot;:1486},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67722,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;889;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:recordLayoutTemplate\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.recordLayoutBroker.RecordLayoutBrokerController/ACTION$getLayout\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:92,\&quot;serverTime\&quot;:{\&quot;total\&quot;:93,\&quot;db\&quot;:8,\&quot;xhrServerTime\&quot;:273,\&quot;boxCarCount\&quot;:5},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1108},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67733,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;895;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:listViewDataManager\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.lists.listViewDataManager.ListViewDataManagerController/ACTION$getItems\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:83,\&quot;serverTime\&quot;:{\&quot;total\&quot;:55,\&quot;db\&quot;:40,\&quot;xhrServerTime\&quot;:273,\&quot;boxCarCount\&quot;:5},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1098},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67738,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;899;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:filterList\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.lists.filterList.FilterListController/ACTION$getFilterListConfig\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:78,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:273,\&quot;boxCarCount\&quot;:5},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1093},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67808,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;958;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:filterList\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.lists.filterList.FilterListController/ACTION$getFilterListConfig\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:8,\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1023},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67801,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;948;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:recordLayoutTemplate\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.recordLayoutBroker.RecordLayoutBrokerController/ACTION$getLayout\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:14,\&quot;serverTime\&quot;:{\&quot;total\&quot;:25,\&quot;db\&quot;:7,\&quot;xhrServerTime\&quot;:273,\&quot;boxCarCount\&quot;:5},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1030},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67806,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;954;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:listViewDataManager\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.lists.listViewDataManager.ListViewDataManagerController/ACTION$getItems\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:10,\&quot;serverTime\&quot;:{\&quot;total\&quot;:31,\&quot;db\&quot;:16,\&quot;xhrServerTime\&quot;:273,\&quot;boxCarCount\&quot;:5},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1025},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67857,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;972;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;analytics:embeddedReportChart\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.analytics.platform.embeddedChart.EmbeddedReportChartController/ACTION$loadChart\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:28,\&quot;serverTime\&quot;:{\&quot;total\&quot;:118,\&quot;db\&quot;:30,\&quot;xhrServerTime\&quot;:408,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:9,\&quot;duration\&quot;:1451},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67858,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;973;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;analytics:embeddedReportChart\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.analytics.platform.embeddedChart.EmbeddedReportChartController/ACTION$loadChart\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:27,\&quot;serverTime\&quot;:{\&quot;total\&quot;:119,\&quot;db\&quot;:28,\&quot;xhrServerTime\&quot;:408,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:5,\&quot;duration\&quot;:1455},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67859,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;974;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;analytics:embeddedReportChart\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.analytics.platform.embeddedChart.EmbeddedReportChartController/ACTION$loadChart\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:26,\&quot;serverTime\&quot;:{\&quot;total\&quot;:142,\&quot;db\&quot;:21,\&quot;xhrServerTime\&quot;:408,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:6,\&quot;duration\&quot;:1460}],\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://force:recordGlobalValueProvider\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:0},{\&quot;name\&quot;:\&quot;markup://laf:pageHost\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:10},{\&quot;name\&quot;:\&quot;markup://home:landing\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:26},{\&quot;name\&quot;:\&quot;markup://force:headerButton\&quot;,\&quot;createCount\&quot;:4,\&quot;createTimeTotal\&quot;:25},{\&quot;name\&quot;:\&quot;markup://ui:menu\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:20},{\&quot;name\&quot;:\&quot;markup://uns:notificationsCounter\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:10},{\&quot;name\&quot;:\&quot;markup://force:socialPhotoController\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:1},{\&quot;name\&quot;:\&quot;markup://one:fp0M01N000000QV8cSAG__pageWithoutSobject__1516162029000\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:33},{\&quot;name\&quot;:\&quot;one:utilityBarItem\&quot;,\&quot;createCount\&quot;:4,\&quot;createTimeTotal\&quot;:8},{\&quot;name\&quot;:\&quot;markup://force:dockingPanelOverflow\&quot;,\&quot;createCount\&quot;:2,\&quot;createTimeTotal\&quot;:2},{\&quot;name\&quot;:\&quot;markup://force:entityIcon\&quot;,\&quot;createCount\&quot;:3,\&quot;createTimeTotal\&quot;:5},{\&quot;name\&quot;:\&quot;markup://one:utilityBarContent\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:64},{\&quot;name\&quot;:\&quot;markup://home:fp0M01N000000QV8dSAG__pageWithoutSobject__1516162029000\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:226},{\&quot;name\&quot;:\&quot;runtime_sales_activities:todayTaskContainer\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:64},{\&quot;name\&quot;:\&quot;home:eventContainer\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:78},{\&quot;name\&quot;:\&quot;home:newsPanel\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:7},{\&quot;name\&quot;:\&quot;flexipage:reportChart\&quot;,\&quot;createCount\&quot;:4,\&quot;createTimeTotal\&quot;:19},{\&quot;name\&quot;:\&quot;flexipage:filterListCard\&quot;,\&quot;createCount\&quot;:2,\&quot;createTimeTotal\&quot;:5},{\&quot;name\&quot;:\&quot;forceChatter:publisher\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:8},{\&quot;name\&quot;:\&quot;forceChatter:exposedFeed\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:19},{\&quot;name\&quot;:\&quot;markup://force:placeholder\&quot;,\&quot;createCount\&quot;:13,\&quot;createTimeTotal\&quot;:8},{\&quot;name\&quot;:\&quot;markup://force:emptyState\&quot;,\&quot;createCount\&quot;:2,\&quot;createTimeTotal\&quot;:1},{\&quot;name\&quot;:\&quot;markup://analytics:embeddedReportChart\&quot;,\&quot;createCount\&quot;:4,\&quot;createTimeTotal\&quot;:167},{\&quot;name\&quot;:\&quot;markup://wits:newsTeaserCard\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:26},{\&quot;name\&quot;:\&quot;markup://force:listTemplate\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:7},{\&quot;name\&quot;:\&quot;markup://flexipage:card\&quot;,\&quot;createCount\&quot;:2,\&quot;createTimeTotal\&quot;:148},{\&quot;name\&quot;:\&quot;markup://forceChatter:style\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:64},{\&quot;name\&quot;:\&quot;markup://ui:button\&quot;,\&quot;createCount\&quot;:4,\&quot;createTimeTotal\&quot;:11},{\&quot;name\&quot;:\&quot;markup://one:actionsComposer\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:27},{\&quot;name\&quot;:\&quot;markup://ui:tabItem\&quot;,\&quot;createCount\&quot;:2,\&quot;createTimeTotal\&quot;:4},{\&quot;name\&quot;:\&quot;markup://force:publisherQuickActionCollapser\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:7},{\&quot;name\&quot;:\&quot;markup://force:recordLayout\&quot;,\&quot;createCount\&quot;:20,\&quot;createTimeTotal\&quot;:197}],\&quot;force_record\&quot;:[{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;cacheLookup.55607\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordKey\&quot;:\&quot;$Record.0051N000005pgpoQAA.undefined.null.null.null.Name,Id.VIEW.false.null.null.null\&quot;,\&quot;keyPrefix\&quot;:\&quot;005\&quot;,\&quot;cacheHit\&quot;:false},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;recordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecord\&quot;,\&quot;parentCmpName\&quot;:\&quot;oneUserProfileCardTrigger\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;335:0;p\&quot;,\&quot;recordId\&quot;:\&quot;0051N000005pgpoQAA\&quot;,\&quot;requestConfig\&quot;:\&quot;0051N000005pgpoQAA, layoutType=undefined, layoutOverride=undefined, parentId=undefined, fields=Name,Id, optionalFields=null, mode=VIEW, updateMru=false, noServer=false\&quot;,\&quot;hitMissType\&quot;:\&quot;MISS\&quot;,\&quot;recordAgeMs\&quot;:null}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;loadRecordFromServer.55607\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordKey\&quot;:\&quot;$Record.0051N000005pgpoQAA.undefined.null.null.null.Name,Id.VIEW.false.null.null.null\&quot;,\&quot;error\&quot;:false},\&quot;duration\&quot;:1064},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;bulkRecordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:65861,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecordCollection\&quot;,\&quot;parentCmpName\&quot;:\&quot;auraIf\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;519:0\&quot;,\&quot;bulkGetHitCount\&quot;:0,\&quot;bulkGetMissCount\&quot;:0,\&quot;totalRecordsRequested\&quot;:0,\&quot;layoutType\&quot;:\&quot;COMPACT\&quot;}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;bulkRecordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67702,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecordCollection\&quot;,\&quot;parentCmpName\&quot;:\&quot;auraIf\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;97:584;a\&quot;,\&quot;bulkGetHitCount\&quot;:0,\&quot;bulkGetMissCount\&quot;:0,\&quot;totalRecordsRequested\&quot;:0}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;bulkRecordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67778,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecordCollection\&quot;,\&quot;parentCmpName\&quot;:\&quot;auraIf\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;97:589;a\&quot;,\&quot;bulkGetHitCount\&quot;:0,\&quot;bulkGetMissCount\&quot;:0,\&quot;totalRecordsRequested\&quot;:0}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;bulkRecordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69529,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecordCollection\&quot;,\&quot;parentCmpName\&quot;:\&quot;auraIf\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;97:584;a\&quot;,\&quot;bulkGetHitCount\&quot;:0,\&quot;bulkGetMissCount\&quot;:0,\&quot;totalRecordsRequested\&quot;:0}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;bulkRecordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69539,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecordCollection\&quot;,\&quot;parentCmpName\&quot;:\&quot;auraIf\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;97:584;a\&quot;,\&quot;bulkGetHitCount\&quot;:10,\&quot;bulkGetMissCount\&quot;:0,\&quot;totalRecordsRequested\&quot;:10}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;bulkRecordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69554,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecordCollection\&quot;,\&quot;parentCmpName\&quot;:\&quot;auraIf\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;97:589;a\&quot;,\&quot;bulkGetHitCount\&quot;:0,\&quot;bulkGetMissCount\&quot;:0,\&quot;totalRecordsRequested\&quot;:0}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;bulkRecordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69569,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecordCollection\&quot;,\&quot;parentCmpName\&quot;:\&quot;auraIf\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;97:589;a\&quot;,\&quot;bulkGetHitCount\&quot;:10,\&quot;bulkGetMissCount\&quot;:0,\&quot;totalRecordsRequested\&quot;:10}}]},\&quot;owner\&quot;:\&quot;laf:pageTransactionProcessor\&quot;,\&quot;unixTS\&quot;:false,\&quot;ept\&quot;:14472,\&quot;previousPage\&quot;:{\&quot;context\&quot;:\&quot;undefined\&quot;,\&quot;attributes\&quot;:{}},\&quot;attributes\&quot;:{\&quot;cores\&quot;:4,\&quot;eptDeviation\&quot;:true,\&quot;eptDeviationReason\&quot;:\&quot;PageInBackgroundBeforeLoaded\&quot;,\&quot;backgroundTimeBeforeEPT\&quot;:836,\&quot;density\&quot;:\&quot;COMPACT\&quot;,\&quot;totalEpt\&quot;:70077,\&quot;bootstrapType\&quot;:\&quot;COLD\&quot;,\&quot;defaultCmp\&quot;:[\&quot;one:utilityBarItem\&quot;,\&quot;one:utilityBarItem\&quot;,\&quot;one:utilityBarItem\&quot;,\&quot;one:utilityBarItem\&quot;,\&quot;runtime_sales_activities:todayTaskContainer\&quot;,\&quot;home:eventContainer\&quot;,\&quot;home:newsPanel\&quot;,\&quot;flexipage:reportChart\&quot;,\&quot;flexipage:reportChart\&quot;,\&quot;flexipage:reportChart\&quot;,\&quot;flexipage:reportChart\&quot;,\&quot;flexipage:filterListCard\&quot;,\&quot;flexipage:filterListCard\&quot;,\&quot;forceChatter:publisher\&quot;,\&quot;forceChatter:exposedFeed\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;cacheStats\&quot;:{\&quot;AuraStorage_actions\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:11},\&quot;AuraRecordStore\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:1},\&quot;AuraStorage_tempTabs-1559032427302-836680\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:1},\&quot;AuraRecordStore_oneUserProfileCardTrigger\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:1},\&quot;AuraRecordStore_bulkRecordRequestauraIf\&quot;:{\&quot;hits\&quot;:20,\&quot;misses\&quot;:0},\&quot;AuraStorage_recordLayoutMap\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:3},\&quot;total\&quot;:{\&quot;hits\&quot;:20,\&quot;misses\&quot;:17}},\&quot;complexity\&quot;:{\&quot;ADS_records\&quot;:20,\&quot;ADS_fields\&quot;:230},\&quot;sequence\&quot;:1,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:70080,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;defsUsage\&quot;,\&quot;attributes\&quot;:{\&quot;defs\&quot;:[\&quot;markup://aura:component\&quot;,\&quot;markup://ui:virtualList\&quot;,\&quot;markup://ui:virtualDataGrid\&quot;,\&quot;markup://ui:virtualDataTable\&quot;,\&quot;markup://aura:application\&quot;,\&quot;markup://force:slds\&quot;,\&quot;markup://force:sldsDynamic\&quot;,\&quot;markup://one:one\&quot;,\&quot;markup://aura:html\&quot;,\&quot;markup://aura:text\&quot;,\&quot;markup://force:fingerprint\&quot;,\&quot;markup://force:defenseHook\&quot;,\&quot;markup://one:auraSystemErrorHandler\&quot;,\&quot;markup://one:auraCustomerErrorHandler\&quot;,\&quot;markup://force:downloadHandler\&quot;,\&quot;markup://force:hostConfig\&quot;,\&quot;markup://force:switchToNetworkHandler\&quot;,\&quot;markup://instrumentation:beacon\&quot;,\&quot;markup://laf:platformRouter\&quot;,\&quot;markup://laf:baseRouter\&quot;,\&quot;markup://laf:sObjectRouter\&quot;,\&quot;markup://force:setupRouter\&quot;,\&quot;markup://objectManager:objectManagerRouter\&quot;,\&quot;markup://force:personalSettingsPageRouter\&quot;,\&quot;markup://forceChatter:router\&quot;,\&quot;markup://laf:directCmpReferenceRouter\&quot;,\&quot;markup://laf:navigationServiceAPI\&quot;,\&quot;markup://force:style\&quot;,\&quot;markup://force:access\&quot;,\&quot;markup://laf:appLayoutHost\&quot;,\&quot;markup://force:alohaUrlService\&quot;,\&quot;markup://force:quickActionHandler\&quot;,\&quot;markup://laf:layoutContainer\&quot;,\&quot;markup://aura:expression\&quot;,\&quot;markup://aura:if\&quot;,\&quot;markup://runtime_all_walkthroughs:player\&quot;,\&quot;markup://one:onboardingManagerWrapper\&quot;,\&quot;markup://ui:image\&quot;,\&quot;markup://force:icon\&quot;,\&quot;markup://lightning:icon\&quot;,\&quot;markup://ui:datePickerManager\&quot;,\&quot;markup://force:tempDepend\&quot;,\&quot;markup://flexipage:tempDepend\&quot;,\&quot;markup://runtime_sales_activities:tempDepend\&quot;,\&quot;markup://support:outputPhoneManager\&quot;,\&quot;markup://emailStream:connectEmailWrapper\&quot;,\&quot;markup://emailStream:connectEmail\&quot;,\&quot;markup://one:sessionManager\&quot;,\&quot;markup://salesforceIdentity:sessionTimeoutWarn\&quot;,\&quot;markup://salesforceIdentity:sessionTimeoutWatcher\&quot;,\&quot;markup://voice:getVendorLine\&quot;,\&quot;markup://one:establishVFSessionComponent\&quot;,\&quot;markup://laf:standardLayoutContainer\&quot;,\&quot;markup://force:pageInfo\&quot;,\&quot;markup://laf:platformPageResolver\&quot;,\&quot;markup://force:lds\&quot;,\&quot;markup://force:dirtyStateManager\&quot;,\&quot;markup://one:layoutContainerLib\&quot;,\&quot;markup://laf:pageTransactionProcessor\&quot;,\&quot;markup://laf:navEventManager\&quot;,\&quot;markup://laf:urlProcessor\&quot;,\&quot;markup://laf:baseLayoutContainer\&quot;,\&quot;markup://forceContent:filesManager\&quot;,\&quot;markup://forceContent:modalPreviewManager\&quot;,\&quot;markup://force:quickActionManager\&quot;,\&quot;markup://one:panelService\&quot;,\&quot;markup://force:inlineSpinner\&quot;,\&quot;markup://force:loadingLaser\&quot;,\&quot;markup://one:apiHandler\&quot;,\&quot;markup://force:localRecordChangeObserver\&quot;,\&quot;markup://forceChatter:feedEventsProcessor\&quot;,\&quot;markup://forceChatter:s1FeedsProxy\&quot;,\&quot;markup://support:crossFrameApiManager\&quot;,\&quot;markup://one:actionsManager\&quot;,\&quot;markup://force:targetInteractionHandler\&quot;,\&quot;markup://forceChatter:editManager\&quot;,\&quot;markup://runtime_rtc:rtcDiscoveryBanner\&quot;,\&quot;markup://forceContent:contentHubAuthenticationBanner\&quot;,\&quot;markup://one:keyboardShortcutListener\&quot;,\&quot;markup://one:helpAndTrainingKeyboardShortcuts\&quot;,\&quot;markup://force:logoutHandler\&quot;,\&quot;markup://one:iframeMessageManager\&quot;,\&quot;markup://lightning:messageDispatcher\&quot;,\&quot;markup://force:userAssistancePlatform\&quot;,\&quot;markup://one:header\&quot;,\&quot;markup://forceSearch:desktopHeaderManager\&quot;,\&quot;markup://forceSearch:baseSearch\&quot;,\&quot;markup://forceSearch:desktopHeader\&quot;,\&quot;markup://forceSearch:groupContainer\&quot;,\&quot;markup://forceSearch:inputEntitySelector\&quot;,\&quot;markup://ui:dataProvider\&quot;,\&quot;markup://forceSearch:inputEntitySelectorDataProvider\&quot;,\&quot;markup://lightning:groupedCombobox\&quot;,\&quot;markup://forceSearch:input\&quot;,\&quot;markup://forceSearch:inputDesktop\&quot;,\&quot;markup://forceSearch:optionDataProvider\&quot;,\&quot;markup://forceSearch:inputDataProvider\&quot;,\&quot;markup://forceSearch:inputDesktopDataProvider\&quot;,\&quot;markup://forceSearch:actionDataProvider\&quot;,\&quot;markup://forceSearch:mruDataProvider\&quot;,\&quot;markup://forceSearch:typeAheadDataProvider\&quot;,\&quot;markup://ui:resizeObserver\&quot;,\&quot;markup://forceSearch:inputDesktopPillWrapper\&quot;,\&quot;markup://ui:input\&quot;,\&quot;markup://ui:autocomplete\&quot;,\&quot;markup://forceSearch:searchInputListHeader\&quot;,\&quot;markup://forceSearch:inputDesktopListFooter\&quot;,\&quot;markup://ui:inputTextForAutocomplete\&quot;,\&quot;markup://forceSearch:searchGDP\&quot;,\&quot;markup://forceSearch:searchGDPCache\&quot;,\&quot;markup://forceSearch:searchGDPCacheActivity\&quot;,\&quot;markup://forceSearch:searchGDPCacheMrus\&quot;,\&quot;markup://forceSearch:searchGDPCachePermsAndPrefs\&quot;,\&quot;markup://forceSearch:searchGDPCacheResultsFilters\&quot;,\&quot;markup://forceSearch:searchGDPCacheScopes\&quot;,\&quot;markup://one:appNavContainer\&quot;,\&quot;markup://force:skipLink\&quot;,\&quot;markup://force:onboardingManagerLib\&quot;,\&quot;markup://salesforceIdentity:appLauncherManager\&quot;,\&quot;markup://one:systemMessage\&quot;,\&quot;markup://aura:iteration\&quot;,\&quot;markup://one:ept\&quot;,\&quot;markup://ui:stamp\&quot;,\&quot;markup://auraStorage:fuelGauge\&quot;,\&quot;markup://one:ladybugTrigger\&quot;,\&quot;markup://one:favorites\&quot;,\&quot;markup://one:globalCreate\&quot;,\&quot;markup://one:globalCreateIcon\&quot;,\&quot;markup://one:helpAndTrainingExperience\&quot;,\&quot;markup://ui:interactive\&quot;,\&quot;markup://ui:popupTrigger\&quot;,\&quot;markup://ui:menuTriggerLink\&quot;,\&quot;markup://force:headerMenuTrigger\&quot;,\&quot;markup://ui:tooltip\&quot;,\&quot;markup://setup:gear\&quot;,\&quot;markup://uns:notifications\&quot;,\&quot;markup://force:empApi\&quot;,\&quot;markup://one:userProfileCardTrigger\&quot;,\&quot;markup://force:record\&quot;,\&quot;markup://one:userProfileCardData\&quot;,\&quot;markup://force:toastManager\&quot;,\&quot;markup://force:visualMessageQueue\&quot;,\&quot;markup://force:brandBandPageContainer\&quot;,\&quot;markup://laf:singlePaneWindowManager\&quot;,\&quot;markup://force:recordContentPlugin\&quot;,\&quot;markup://one:searchContentPlugin\&quot;,\&quot;markup://one:editablePagePlugin\&quot;,\&quot;markup://laf:pageCapability\&quot;,\&quot;markup://one:uncacheableContentPlugin\&quot;,\&quot;markup://one:iframeContentPlugin\&quot;,\&quot;markup://laf:standardLayoutContentSelector\&quot;,\&quot;markup://flexipage:page\&quot;,\&quot;markup://force:brandBand\&quot;,\&quot;markup://ui:containerManager\&quot;,\&quot;markup://ui:panelManager2\&quot;,\&quot;markup://one:panelManager\&quot;,\&quot;markup://force:modalSpinner\&quot;,\&quot;markup://force:dotsSpinner\&quot;,\&quot;markup://notes:editPanelManager\&quot;,\&quot;markup://ui:asyncComponentManager\&quot;,\&quot;markup://instrumentation:uiManager\&quot;,\&quot;markup://force:massErrorsManager\&quot;,\&quot;markup://force:hoverPrototypeManager\&quot;,\&quot;markup://force:hoverPrototype\&quot;,\&quot;markup://ui:label\&quot;,\&quot;markup://one:appnav\&quot;,\&quot;markup://force:recordGlobalValueProvider\&quot;,\&quot;markup://laf:pageHost\&quot;,\&quot;markup://laf:windowUpdate\&quot;,\&quot;markup://home:landing\&quot;,\&quot;markup://force:headerButton\&quot;,\&quot;markup://ui:button\&quot;,\&quot;markup://ui:popup\&quot;,\&quot;markup://ui:menu\&quot;,\&quot;markup://ui:popupTarget\&quot;,\&quot;markup://ui:menuList\&quot;,\&quot;markup://uns:notificationsCounter\&quot;,\&quot;markup://force:socialPhoto\&quot;,\&quot;markup://force:socialPhotoController\&quot;,\&quot;markup://one:fp0M01N000000QV8cSAG__pageWithoutSobject__1516162029000\&quot;,\&quot;markup://one:utilityBar\&quot;,\&quot;markup://flexipage:runtimeComponent\&quot;,\&quot;markup://flexipage:componentDecorator\&quot;,\&quot;markup://one:utilityBarItem\&quot;,\&quot;markup://one:dockingPanelManager\&quot;,\&quot;markup://one:utilityBarContainer\&quot;,\&quot;markup://one:utilPanelManager\&quot;,\&quot;markup://force:dockingPanelOverflow\&quot;,\&quot;markup://force:entityIcon\&quot;,\&quot;markup://one:utilityBarContent\&quot;,\&quot;markup://force:popOutManagerAura\&quot;,\&quot;markup://force:popOutManager\&quot;,\&quot;markup://laf:windowMessengerAura\&quot;,\&quot;markup://home:fp0M01N000000QV8dSAG__pageWithoutSobject__1516162029000\&quot;,\&quot;markup://home:homeCard\&quot;,\&quot;markup://runtime_sales_activities:todayTaskContainer\&quot;,\&quot;markup://runtime_sales_activities:todayTasksFilter\&quot;,\&quot;markup://runtime_sales_activities:todayTasksList\&quot;,\&quot;markup://force:recordLayoutList\&quot;,\&quot;markup://runtime_sales_activities:todayTasksCardDataProvider\&quot;,\&quot;markup://force:placeholder\&quot;,\&quot;markup://ui:abstractList\&quot;,\&quot;markup://ui:infiniteList\&quot;,\&quot;markup://force:recordLayout\&quot;,\&quot;markup://force:listTemplate\&quot;,\&quot;markup://force:baseCard\&quot;,\&quot;markup://home:eventContainer\&quot;,\&quot;markup://force:recordList\&quot;,\&quot;markup://force:dataManager\&quot;,\&quot;markup://home:eventCardDataManager\&quot;,\&quot;markup://force:recordCollection\&quot;,\&quot;markup://force:recordListDummyDataProvider\&quot;,\&quot;markup://force:recordLayoutTemplate\&quot;,\&quot;markup://home:newsPanel\&quot;,\&quot;markup://wits:newsPanel\&quot;,\&quot;markup://aura:renderIf\&quot;,\&quot;markup://flexipage:card\&quot;,\&quot;markup://flexipage:reportChart\&quot;,\&quot;markup://flexipage:filterListCard\&quot;,\&quot;markup://forceChatter:publisher\&quot;,\&quot;markup://force:actionsContainer\&quot;,\&quot;markup://aura:unescapedHtml\&quot;,\&quot;markup://forceChatter:exposedFeed\&quot;,\&quot;markup://forceChatter:exposedFeedDesktop\&quot;,\&quot;markup://lightning:workspaceAPI\&quot;,\&quot;markup://forceChatter:feed\&quot;,\&quot;markup://force:emptyState\&quot;,\&quot;markup://analytics:embeddedReportChart\&quot;,\&quot;markup://analytics:embeddedChart\&quot;,\&quot;markup://ui:message\&quot;,\&quot;markup://force:message\&quot;,\&quot;markup://ui:block\&quot;,\&quot;markup://analytics:cordaChart\&quot;,\&quot;markup://analytics:csrPopChart\&quot;,\&quot;markup://ui:scroller\&quot;,\&quot;markup://analytics:pluginChart\&quot;,\&quot;markup://reports:eclairReportChart\&quot;,\&quot;markup://reports:eclairChart\&quot;,\&quot;markup://wits:newsTeaserCard\&quot;,\&quot;markup://wits:newsCardsContainer\&quot;,\&quot;markup://lightning:buttonIcon\&quot;,\&quot;markup://lightning:primitiveIcon\&quot;,\&quot;markup://force:filterList\&quot;,\&quot;markup://offline:banner\&quot;,\&quot;markup://ui:outputText\&quot;,\&quot;markup://offline:sash\&quot;,\&quot;markup://aura:label\&quot;,\&quot;markup://force:filterMenu\&quot;,\&quot;markup://force:listViewDataManagerAdapter\&quot;,\&quot;markup://force:listViewDataManager\&quot;,\&quot;markup://force:card\&quot;,\&quot;markup://forceChatter:style\&quot;,\&quot;markup://forceChatter:feedInner\&quot;,\&quot;markup://forceChatter:richLinkPreviewMetadata\&quot;,\&quot;markup://forceChatter:contentVisibilityMonitor\&quot;,\&quot;markup://forceChatter:scroller\&quot;,\&quot;markup://feeds_sorter:sorter\&quot;,\&quot;markup://forceChatter:searchInFeed\&quot;,\&quot;markup://lightning:input\&quot;,\&quot;markup://forceChatter:feedElementIteration\&quot;,\&quot;markup://forceChatter:emptyFeed\&quot;,\&quot;markup://forceChatter:newContent\&quot;,\&quot;markup://one:actionsComposer\&quot;,\&quot;markup://ui:tabset\&quot;,\&quot;markup://ui:tabBar\&quot;,\&quot;markup://ui:tabOverflowMenuItem\&quot;,\&quot;markup://ui:tab\&quot;,\&quot;markup://ui:tabItem\&quot;,\&quot;markup://force:publisherQuickActionCollapser\&quot;,\&quot;layout://rl-TR1__Closing_Report__c-VIEW-LIST--TR1__My_Active_Assignments--force_filterList-_1-0-444c5970374e2b366758534c353563386742742f77413d3d.c\&quot;,\&quot;markup://force:listRecord\&quot;,\&quot;markup://force:listRecordItem\&quot;,\&quot;markup://ui:infiniteListRow\&quot;,\&quot;markup://force:actionRow\&quot;,\&quot;layout://rl-TR1__Closing_Report__c-VIEW-LIST--TR1__Assignments_Ending_in_30_Days--force_filterList-_1-0-6c486564426970424d62636352426853314f4b5944413d3d.c\&quot;,\&quot;markup://ui:outputDate\&quot;],\&quot;pageCounter\&quot;:1,\&quot;phase\&quot;:\&quot;EPT\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:13,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;defsUsage\&quot;,\&quot;scope\&quot;:\&quot;defsUsage\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;}]}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=22&amp;ui-instrumentation-components-beacon.InstrumentationBeacon.sendData=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">70101000000d18900e</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1348 /aura?r=26&amp;ui-setup-components-aura-components-gear.Gear.getEntitySupport=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1421;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.setup.components.aura.components.gear.GearController/ACTION$getEntitySupport&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=26&amp;ui-setup-components-aura-components-gear.Gear.getEntitySupport=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">71067000000826ec7c</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1349 /aura?r=27&amp;ui-force-components-controllers-platformStateManager.PlatformStateManager.getActionOverrides=1&amp;ui-force-components-controllers-platformStateManager.PlatformStateManager.getKeyPrefixesWithRecordTypes=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1467;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getActionOverrides&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;sObjectNames&quot;:[&quot;Account&quot;,&quot;AccountBrand&quot;,&quot;AccountContactRelation&quot;,&quot;AccountInsight&quot;,&quot;AccountRelationship&quot;,&quot;AccountTeamMember&quot;,&quot;AccountUserTerritory2View&quot;,&quot;ActionCadence&quot;,&quot;ActionPlan&quot;,&quot;ActionPlanItem&quot;,&quot;ActionPlanTemplate&quot;,&quot;ActionPlanTemplateItem&quot;,&quot;ActionPlanTemplateVersion&quot;,&quot;ActiveScratchOrg&quot;,&quot;ActivityHistory&quot;,&quot;AddOnDefinition&quot;,&quot;Address&quot;,&quot;AiImageDetectedObject&quot;,&quot;AiImageObject&quot;,&quot;AiImageTrainingObject&quot;,&quot;AppMenuItem&quot;,&quot;Asset&quot;,&quot;AssetRelationship&quot;,&quot;AssignedResource&quot;,&quot;AssociatedLocation&quot;,&quot;AttachedContentNote&quot;,&quot;CallTemplate&quot;,&quot;Campaign&quot;,&quot;CampaignInfluence&quot;,&quot;CampaignInsight&quot;,&quot;CampaignMember&quot;,&quot;CampaignMemberStatus&quot;,&quot;Candidate_Community__c&quot;,&quot;CareBarrier&quot;,&quot;CareBarrierDeterminant&quot;,&quot;CareBarrierType&quot;,&quot;CareDeterminant&quot;,&quot;CareDeterminantType&quot;,&quot;CareDiagnosis&quot;,&quot;CareInterventionType&quot;,&quot;CarePreauth&quot;,&quot;CarePreauthItem&quot;,&quot;CareProgram&quot;,&quot;CareProgramCampaign&quot;,&quot;CareProgramEnrollee&quot;,&quot;CareProgramTeamMember&quot;,&quot;CareRequest&quot;,&quot;CareRequestDrug&quot;,&quot;CareRequestItem&quot;,&quot;Case&quot;,&quot;CaseComment&quot;,&quot;CaseContactRole&quot;,&quot;CaseMilestone&quot;,&quot;ChannelProgram&quot;,&quot;ChannelProgramLevel&quot;,&quot;ChannelProgramMember&quot;,&quot;Claim&quot;,&quot;CloudServiceProvider&quot;,&quot;CollaborationGroup&quot;,&quot;CommerceOrder&quot;,&quot;Consent__c&quot;,&quot;ConsumptionRate&quot;,&quot;ConsumptionSchedule&quot;,&quot;Contact&quot;,&quot;ContactPointAddress&quot;,&quot;ContactPointConsent&quot;,&quot;ContactPointEmail&quot;,&quot;ContactPointPhone&quot;,&quot;ContactPointTypeConsent&quot;,&quot;ContactRequest&quot;,&quot;ContactSuggestionInsight&quot;,&quot;ContentDocument&quot;,&quot;ContentDocumentListViewMapping&quot;,&quot;ContentNote&quot;,&quot;ContentVersion&quot;,&quot;ContentWorkspace&quot;,&quot;Contract&quot;,&quot;ContractContactRole&quot;,&quot;ContractLineItem&quot;,&quot;Contract_Type_Mapping__c&quot;,&quot;Country__c&quot;,&quot;CoverageBenefit&quot;,&quot;CoverageBenefitItem&quot;,&quot;CoverageLimit&quot;,&quot;CoverageType&quot;,&quot;CustomerAssetAuto&quot;,&quot;CustomerAssetHome&quot;,&quot;Dashboard&quot;,&quot;DataSharingCustomerLocal&quot;,&quot;DataSharingOrder&quot;,&quot;DataUseLegalBasis&quot;,&quot;DataUsePurpose&quot;,&quot;DssOrder&quot;,&quot;DuplicateRecordItem&quot;,&quot;DuplicateRecordSet&quot;,&quot;EditionDefinition&quot;,&quot;EmailMessage&quot;,&quot;EmailMessageRelation&quot;,&quot;EmailTemplate&quot;,&quot;EmbeddedServiceConfig&quot;,&quot;EmbeddedServiceLiveAgent&quot;,&quot;EngagementProgram&quot;,&quot;EngagementProgramVersion&quot;,&quot;EnhancedEmailTemplate&quot;,&quot;Entitlement&quot;,&quot;EntityMilestone&quot;,&quot;EnvironmentHubMember&quot;,&quot;Event&quot;,&quot;FeedItem&quot;,&quot;Folder&quot;,&quot;HealthCareDiagnosis&quot;,&quot;HealthCareProcedure&quot;,&quot;IdentityDocument&quot;,&quot;Image&quot;,&quot;InStoreLocation&quot;,&quot;IncludedLicenseDefinition&quot;,&quot;Individual&quot;,&quot;InsightsApplication&quot;,&quot;InsurancePolicy&quot;,&quot;InsurancePolicyAsset&quot;,&quot;InsurancePolicyBeneficiary&quot;,&quot;InsurancePolicyCoverageLimit&quot;,&quot;InsurancePolicyMember&quot;,&quot;InsurancePolicyOwner&quot;,&quot;InsuranceProfile&quot;,&quot;JobBoardsSiteMapping__c&quot;,&quot;KeyPerformanceIndicator&quot;,&quot;KnowledgeArticleVersion&quot;,&quot;LandingPage&quot;,&quot;Lead&quot;,&quot;Lens&quot;,&quot;LicensingError&quot;,&quot;LicensingRequest&quot;,&quot;ListEmail&quot;,&quot;ListEmailSentResult&quot;,&quot;LiveAgentSession&quot;,&quot;LiveChatTranscript&quot;,&quot;LiveChatVisitor&quot;,&quot;Location&quot;,&quot;Macro&quot;,&quot;MaintenanceAsset&quot;,&quot;MaintenancePlan&quot;,&quot;MarketingForm&quot;,&quot;MarketingLink&quot;,&quot;MemberPlan&quot;,&quot;MessagingChannel&quot;,&quot;MessagingDeliveryError&quot;,&quot;MessagingEndUser&quot;,&quot;MessagingSession&quot;,&quot;MessagingTemplate&quot;,&quot;NamespaceRegistry&quot;,&quot;Note&quot;,&quot;ObjectTerritory2Association&quot;,&quot;OpenActivity&quot;,&quot;OperatingHours&quot;,&quot;Opportunity&quot;,&quot;OpportunityContactRole&quot;,&quot;OpportunityContactRoleSuggestionInsight&quot;,&quot;OpportunityInsight&quot;,&quot;OpportunityLineItem&quot;,&quot;OpportunityLineItemSchedule&quot;,&quot;OpportunitySplit&quot;,&quot;OpportunityTeamMember&quot;,&quot;Order&quot;,&quot;OrderDeliveryGroup&quot;,&quot;OrderDeliveryGroupLine&quot;,&quot;OrderItem&quot;,&quot;OrderPriceAdjustDistrLine&quot;,&quot;OrderPriceAdjustmentLine&quot;,&quot;PartnerFundAllocation&quot;,&quot;PartnerFundClaim&quot;,&quot;PartnerFundRequest&quot;,&quot;PartnerMarketingBudget&quot;,&quot;PersonAccount&quot;,&quot;PersonEducation&quot;,&quot;PersonEmployment&quot;,&quot;PersonLifeEvent&quot;,&quot;PersonList&quot;,&quot;PersonListMember&quot;,&quot;PlanBenefit&quot;,&quot;PlanBenefitItem&quot;,&quot;PlatformLicenseDefinition&quot;,&quot;Pricebook2&quot;,&quot;PricebookEntry&quot;,&quot;ProcessInstanceHistory&quot;,&quot;ProcessInstanceStep&quot;,&quot;ProcessInstanceWorkitem&quot;,&quot;Producer&quot;,&quot;Product2&quot;,&quot;ProductConsumed&quot;,&quot;ProductConsumptionSchedule&quot;,&quot;ProductCoverage&quot;,&quot;ProductCoverageLimit&quot;,&quot;ProductItem&quot;,&quot;ProductItemTransaction&quot;,&quot;ProductLicenseMap&quot;,&quot;ProductRequest&quot;,&quot;ProductRequestLineItem&quot;,&quot;ProductRequired&quot;,&quot;ProductTransfer&quot;,&quot;PurchaserPlan&quot;,&quot;PurchaserPlanAssn&quot;,&quot;QuickText&quot;,&quot;Quote&quot;,&quot;QuoteLineItem&quot;,&quot;Recommendation&quot;,&quot;RecordType&quot;,&quot;Report&quot;,&quot;ResourceAbsence&quot;,&quot;ResourcePreference&quot;,&quot;RetailLocationGroup&quot;,&quot;RetailStore&quot;,&quot;RetailStoreKpi&quot;,&quot;RetailStoreVisitTemplate&quot;,&quot;RetailVisitKpi&quot;,&quot;RetailVisitTemplate&quot;,&quot;RetailVisitTemplateWorkTask&quot;,&quot;RetailVisitWorkTask&quot;,&quot;RetailWorkTask&quot;,&quot;RetailWorkTaskKpi&quot;,&quot;ReturnOrder&quot;,&quot;ReturnOrderLineItem&quot;,&quot;SalesAgreement&quot;,&quot;SalesAgreementProduct&quot;,&quot;SalesAgreementProductSchedule&quot;,&quot;Scorecard&quot;,&quot;ScorecardAssociation&quot;,&quot;ScorecardMetric&quot;,&quot;ScratchOrgInfo&quot;,&quot;ServiceAppointment&quot;,&quot;ServiceAppointmentCapacityUsage&quot;,&quot;ServiceContract&quot;,&quot;ServiceCrew&quot;,&quot;ServiceCrewMember&quot;,&quot;ServiceResource&quot;,&quot;ServiceResourceCapacity&quot;,&quot;ServiceResourceSkill&quot;,&quot;ServiceTerritory&quot;,&quot;ServiceTerritoryLocation&quot;,&quot;ServiceTerritoryMember&quot;,&quot;ServiceTerritoryWorkType&quot;,&quot;SettingUsageDefinition&quot;,&quot;SettingUsageMap&quot;,&quot;Shipment&quot;,&quot;SiqExchangeConnection&quot;,&quot;SkillRequirement&quot;,&quot;SocialPersona&quot;,&quot;SocialPost&quot;,&quot;StandardPermissionSet&quot;,&quot;StreamingChannel&quot;,&quot;Survey&quot;,&quot;SurveyEmailBranding&quot;,&quot;SurveyInvitation&quot;,&quot;SurveyQuestion&quot;,&quot;SurveyQuestionChoice&quot;,&quot;SurveyQuestionResponse&quot;,&quot;SurveyResponse&quot;,&quot;SurveyVersion&quot;,&quot;TR1__ADP__c&quot;,&quot;TR1__ATS_Configuration_Settings__c&quot;,&quot;TR1__ATS_Job_AppV2_Picklist_Mapping__c&quot;,&quot;TR1__AccountPool__c&quot;,&quot;TR1__Account_Address__c&quot;,&quot;TR1__Activate_Triggers__c&quot;,&quot;TR1__AdjustedGrossProfit__c&quot;,&quot;TR1__Agreement__c&quot;,&quot;TR1__Application_History__c&quot;,&quot;TR1__Application_V2__c&quot;,&quot;TR1__Application__c&quot;,&quot;TR1__AreaCode__c&quot;,&quot;TR1__Associate_PO_Closing_Report__c&quot;,&quot;TR1__Associated_Qualification__c&quot;,&quot;TR1__BHLO_Log__c&quot;,&quot;TR1__BHTK_Indexing_status__c&quot;,&quot;TR1__BHTK_User_Authentication__c&quot;,&quot;TR1__Blacklisted__c&quot;,&quot;TR1__Branch__c&quot;,&quot;TR1__CalendarDays__c&quot;,&quot;TR1__Call_List_Member__c&quot;,&quot;TR1__Call_List__c&quot;,&quot;TR1__CandidateManagerActionMenu__c&quot;,&quot;TR1__CandidateManagerViewMenu__c&quot;,&quot;TR1__Candidate_Availability_D2D__c&quot;,&quot;TR1__Candidate_Availability__c&quot;,&quot;TR1__Candidate_Consents__c&quot;,&quot;TR1__Candidate_Finder_Source_Setting__c&quot;,&quot;TR1__Candidate_Summary__c&quot;,&quot;TR1__Candidates_Marketed__c&quot;,&quot;TR1__ClosingReportSettings__c&quot;,&quot;TR1__Closing_Report_Schedule__c&quot;,&quot;TR1__Closing_Report__c&quot;,&quot;TR1__Commission__c&quot;,&quot;TR1__Consent_Type__c&quot;,&quot;TR1__ContactDocument__c&quot;,&quot;TR1__ContactRecordTypes__c&quot;,&quot;TR1__ContactSelectedFields__c&quot;,&quot;TR1__Contact_Accrual__c&quot;,&quot;TR1__Contact_Address__c&quot;,&quot;TR1__Contact_Assessment__c&quot;,&quot;TR1__Contact_fields__c&quot;,&quot;TR1__Country_Code__c&quot;,&quot;TR1__DaxtraSearchProperties__c&quot;,&quot;TR1__Debug_Log__c&quot;,&quot;TR1__Document_Session__c&quot;,&quot;TR1__EMail__c&quot;,&quot;TR1__EducationHistory__c&quot;,&quot;TR1__EmploymentHistory__c&quot;,&quot;TR1__Expense_Report_Detail__c&quot;,&quot;TR1__Expense_Report__c&quot;,&quot;TR1__ExternalSearch__c&quot;,&quot;TR1__External_Search_Junction__c&quot;,&quot;TR1__External_Search_Result__c&quot;,&quot;TR1__External_Search_Status__c&quot;,&quot;TR1__External_Timesheet_Hours__c&quot;,&quot;TR1__FieldIdMapping__c&quot;,&quot;TR1__Fixed_Assets__c&quot;,&quot;TR1__Fyre_Account_Settings__c&quot;,&quot;TR1__Fyre_Parameter_Mapping__c&quot;,&quot;TR1__Fyre_Payload_Job_Type_Mapping__c&quot;,&quot;TR1__Fyre_VMS__c&quot;,&quot;TR1__GDPRConfigurations__c&quot;,&quot;TR1__Generated_Document__c&quot;,&quot;TR1__Gross_Profit__c&quot;,&quot;TR1__Hirabl_Account_Settings__c&quot;,&quot;TR1__Interaction__c&quot;,&quot;TR1__Internal_Onboarding__c&quot;,&quot;TR1__Invoice__c&quot;,&quot;TR1__JobManagerActionMenu__c&quot;,&quot;TR1__JobManagerViewMenu__c&quot;,&quot;TR1__JobRecordType__c&quot;,&quot;TR1__Job_Board_Application__c&quot;,&quot;TR1__Job_Board_Search_Options__c&quot;,&quot;TR1__Job_Board__c&quot;,&quot;TR1__Job_Finder_Source_Setting__c&quot;,&quot;TR1__Job_Leads__c&quot;,&quot;TR1__Job_Reporting__c&quot;,&quot;TR1__Job__c&quot;,&quot;TR1__Jobee_Parameter_Mapping__c&quot;,&quot;TR1__Jobs_Feeds__c&quot;,&quot;TR1__LKIntegrationMapping__c&quot;,&quot;TR1__LK_EasyApplyAPIParameters__c&quot;,&quot;TR1__LK_EasyApplyApplicant__c&quot;,&quot;TR1__LK_IntegrationRecord__c&quot;,&quot;TR1__LabelUtility__c&quot;,&quot;TR1__LinkedIn_App__c&quot;,&quot;TR1__MassResumeProcessor__c&quot;,&quot;TR1__Mass_Job_Monitor__c&quot;,&quot;TR1__Mass_Reject__c&quot;,&quot;TR1__Master_Skill__c&quot;,&quot;TR1__Master_Skills_Translation__c&quot;,&quot;TR1__Matching_Job_Fields_in_Scheduler_Popup__c&quot;,&quot;TR1__Message__c&quot;,&quot;TR1__Mini_Profile__c&quot;,&quot;TR1__Monitor_Bulk_Job__c&quot;,&quot;TR1__Offer__c&quot;,&quot;TR1__Opportunity_Discussed__c&quot;,&quot;TR1__Other_Utility__c&quot;,&quot;TR1__Potential__c&quot;,&quot;TR1__Purchase_Order_Spend__c&quot;,&quot;TR1__Purchase_Order__c&quot;,&quot;TR1__Qualification_Package__c&quot;,&quot;TR1__Qualification__c&quot;,&quot;TR1__RC_Article__c&quot;,&quot;TR1__RateLimit__c&quot;,&quot;TR1__RatePeriod__c&quot;,&quot;TR1__Rate__c&quot;,&quot;TR1__Rates_Mapping__c&quot;,&quot;TR1__Reference__c&quot;,&quot;TR1__Report_Utility__c&quot;,&quot;TR1__Resource_Availability_Overlap__c&quot;,&quot;TR1__ResumeParserCredentials__c&quot;,&quot;TR1__ResumeSearch__c&quot;,&quot;TR1__SAM_User_Settings__c&quot;,&quot;TR1__SF_Purchase_Order_Send__c&quot;,&quot;TR1__SF_Purchase_Order__c&quot;,&quot;TR1__Saved_Search_Contact_Link__c&quot;,&quot;TR1__Saved_Search__c&quot;,&quot;TR1__SchedulerMethods__c&quot;,&quot;TR1__Scheduler_Utilities__c&quot;,&quot;TR1__Screening__c&quot;,&quot;TR1__Search_History__c&quot;,&quot;TR1__Search_Synonym__c&quot;,&quot;TR1__Send_Out_Schedule_V2__c&quot;,&quot;TR1__Send_Out_Schedule__c&quot;,&quot;TR1__Send_Out__c&quot;,&quot;TR1__ShiftWork__c&quot;,&quot;TR1__Skills__c&quot;,&quot;TR1__StateRegionalAreaMapping__c&quot;,&quot;TR1__Submittal__c&quot;,&quot;TR1__SystemProperties__c&quot;,&quot;TR1__TalentRoverProperties__c&quot;,&quot;TR1__Template__c&quot;,&quot;TR1__TextKernel__c&quot;,&quot;TR1__TimeType__c&quot;,&quot;TR1__Timesheet_Detail__c&quot;,&quot;TR1__Timesheet__c&quot;,&quot;TR1__Train_Station__c&quot;,&quot;TR1__UserSubscription__c&quot;,&quot;TR1__Vacancy_D2D__c&quot;,&quot;TR1__Worker_Comp__c&quot;,&quot;TR1__Zip_Code_Mapping__c&quot;,&quot;TabDefinition&quot;,&quot;Task&quot;,&quot;Tenant&quot;,&quot;TenantParameterMap&quot;,&quot;TimeSheet&quot;,&quot;TimeSheetEntry&quot;,&quot;TimeSheetTemplate&quot;,&quot;TimeSlot&quot;,&quot;Topic&quot;,&quot;TrialEnvironmentSignup&quot;,&quot;UsageEntitlement&quot;,&quot;UsageEntitlementPeriod&quot;,&quot;UsageEntitlementUsage&quot;,&quot;UsageFactor&quot;,&quot;User&quot;,&quot;UserAppMenuItem&quot;,&quot;UserLicenseDefinition&quot;,&quot;Vacanc_Category_Mapping__c&quot;,&quot;Vacancy_Country_Mapping__c&quot;,&quot;Vacancy_Education_Level__c&quot;,&quot;Vacancy_Employment_Type_Mapping__c&quot;,&quot;Vacancy_Experience_Duration_Mapping__c&quot;,&quot;Vacancy_Industry_Mapping__c&quot;,&quot;Vacancy_Level_Mapping__c&quot;,&quot;Vacancy_Parameter_Mapping__c&quot;,&quot;Vacancy_Salary_Frequency__c&quot;,&quot;Vacancy_Shift_Mapping__c&quot;,&quot;Vacancy_Status_Mapping__c&quot;,&quot;Vacancy_Sub_Catagory_Mapping__c&quot;,&quot;VisionPredictionSettings&quot;,&quot;Visit&quot;,&quot;WorkCapacityLimit&quot;,&quot;WorkCapacityUsage&quot;,&quot;WorkOrder&quot;,&quot;WorkOrderLineItem&quot;,&quot;WorkSkillRouting&quot;,&quot;WorkType&quot;,&quot;WorkTypeGroup&quot;,&quot;WorkTypeGroupMember&quot;],&quot;appId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;storable&quot;:true},{&quot;id&quot;:&quot;1468;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getKeyPrefixesWithRecordTypes&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=27&amp;ui-force-components-controllers-platformStateManager.PlatformStateManager.getActionOverrides=1&amp;ui-force-components-controllers-platformStateManager.PlatformStateManager.getKeyPrefixesWithRecordTypes=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">710900000009564d0d</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1343 /aura?r=23&amp;ui-search-components-forcesearch-sgdp.MRUCache.getGlobalMrus=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1387;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.search.components.forcesearch.sgdp.MRUCacheController/ACTION$getGlobalMrus&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;maxResults&quot;:200,&quot;lastTenMrus&quot;:null}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=23&amp;ui-search-components-forcesearch-sgdp.MRUCache.getGlobalMrus=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">70103000000bc9c6d4</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1354 /aura?r=28&amp;ui-global-components-one-onboardingManager.OnboardingManager.getPayload=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1479;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.onboardingManager.OnboardingManagerController/ACTION$getPayload&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=28&amp;ui-global-components-one-onboardingManager.OnboardingManager.getPayload=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">7256100000027b9cb8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1341 /_nc_external/system/security/session/SessionTimeServlet" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="buster" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">buster</stringProp>
                  <stringProp name="Argument.value">${__time(,)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/_nc_external/system/security/session/SessionTimeServlet</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1345 /aura?r=24&amp;ui-setup-components-aura-components-gear.Gear.getGearSetupApps=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1419;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.setup.components.aura.components.gear.GearController/ACTION$getGearSetupApps&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;customAppId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=24&amp;ui-setup-components-aura-components-gear.Gear.getGearSetupApps=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">7010500000016cad2d</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="7-8 sec" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">6000</stringProp>
            <stringProp name="RandomTimer.range">1000</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </LoopController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="7-11 sec" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">9000</stringProp>
              <stringProp name="RandomTimer.range">2000</stringProp>
            </GaussianRandomTimer>
            <hashTree/>
          </hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">.\Resumepdfdocx.csv</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">path,name,doc,size</stringProp>
          </CSVDataSet>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="S1_03_Click_Parser" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1360 /aura?r=29&amp;aura.Component.getComponent=1" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="message" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">message</stringProp>
                    <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1584;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$getComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;name&quot;:&quot;markup://forceChatter:lightningComponent&quot;,&quot;attributes&quot;:{&quot;contextualMessages&quot;:[],&quot;publisherId&quot;:&quot;00D3F0000009PPi:Global::Dockable:Desktop:09D1N000007PtSd&quot;,&quot;publisherFeedType&quot;:&quot;News&quot;,&quot;quickActionLabel&quot;:&quot;Resume Parser&quot;,&quot;quickActionApiName&quot;:&quot;TR1__Lightning_Resume_Parser&quot;,&quot;quickActionSubjectId&quot;:&quot;0051N000005pgpoQAA&quot;,&quot;isComposerContext&quot;:true,&quot;isInDockingPanel&quot;:true}}}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.context" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">aura.context</stringProp>
                    <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.pageURI" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">aura.pageURI</stringProp>
                    <stringProp name="Argument.value">/lightning/page/home</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.token" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">aura.token</stringProp>
                    <stringProp name="Argument.value">${token}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/aura?r=29&amp;aura.Component.getComponent=1</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                  </elementProp>
                  <elementProp name="X-SFDC-Request-Id" elementType="Header">
                    <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                    <stringProp name="Header.value">924510000002d69061</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                  </elementProp>
                  <elementProp name="DNT" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1361 /aura?r=30&amp;TR1.DocumentParser.fetchCompLiterals=1" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="message" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">message</stringProp>
                    <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1612;a&quot;,&quot;descriptor&quot;:&quot;apex://TR1.DocumentParserController/ACTION$fetchCompLiterals&quot;,&quot;callingDescriptor&quot;:&quot;markup://TR1:DocumentParser&quot;,&quot;params&quot;:{},&quot;version&quot;:null,&quot;storable&quot;:true}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.context" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">aura.context</stringProp>
                    <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.pageURI" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">aura.pageURI</stringProp>
                    <stringProp name="Argument.value">/lightning/page/home</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.token" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">aura.token</stringProp>
                    <stringProp name="Argument.value">${token}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/aura?r=30&amp;TR1.DocumentParser.fetchCompLiterals=1</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                  </elementProp>
                  <elementProp name="X-SFDC-Request-Id" elementType="Header">
                    <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                    <stringProp name="Header.value">9384000000041260b5</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                  </elementProp>
                  <elementProp name="DNT" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1362 /aura?r=31&amp;ui-instrumentation-components-beacon.InstrumentationBeacon.sendData=1" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="message" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">message</stringProp>
                    <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1620;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.instrumentation.components.beacon.InstrumentationBeaconController/ACTION$sendData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:70089,\&quot;duration\&quot;:19,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;forceSearch:searchGDPCachePermsAndPrefs\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-search-sgdp-request-getPermsAndPrefs\&quot;,\&quot;attributes\&quot;:{\&quot;tStart\&quot;:1559032442131,\&quot;cacheHit\&quot;:true,\&quot;etCacheGet\&quot;:2,\&quot;tSending\&quot;:1559032442133,\&quot;etDataCopy\&quot;:0,\&quot;tEnd\&quot;:1559032442151,\&quot;etSendDataWait\&quot;:18,\&quot;etTransaction\&quot;:20,\&quot;name\&quot;:\&quot;DEFAULT\&quot;,\&quot;groupId\&quot;:\&quot;DEFAULT\&quot;,\&quot;requestType\&quot;:\&quot;getPermsAndPrefs\&quot;,\&quot;requestId\&quot;:\&quot;forceSearchInputDesktop:103:0;p\&quot;,\&quot;requestCmp\&quot;:\&quot;forceSearchInputDesktop\&quot;,\&quot;requestCmpId\&quot;:\&quot;103:0;p\&quot;,\&quot;params\&quot;:{},\&quot;sourceCmp\&quot;:\&quot;forceSearch:searchGDPCachePermsAndPrefs\&quot;,\&quot;time\&quot;:1559032442151,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:70091,\&quot;duration\&quot;:26,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;forceSearch:searchGDPCacheScopes\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-search-sgdp-request-getScopeMaps\&quot;,\&quot;attributes\&quot;:{\&quot;tStart\&quot;:1559032442133,\&quot;cacheHit\&quot;:true,\&quot;etCacheGet\&quot;:2,\&quot;tSending\&quot;:1559032442135,\&quot;etDataCopy\&quot;:0,\&quot;tEnd\&quot;:1559032442159,\&quot;etSendDataWait\&quot;:24,\&quot;etTransaction\&quot;:26,\&quot;name\&quot;:\&quot;DEFAULT\&quot;,\&quot;groupId\&quot;:\&quot;DEFAULT\&quot;,\&quot;requestType\&quot;:\&quot;getScopeMaps\&quot;,\&quot;requestId\&quot;:\&quot;forceSearchInputDesktop:103:0;p\&quot;,\&quot;requestCmp\&quot;:\&quot;forceSearchInputDesktop\&quot;,\&quot;requestCmpId\&quot;:\&quot;103:0;p\&quot;,\&quot;params\&quot;:{\&quot;scopeTypes\&quot;:[\&quot;FILTER\&quot;,\&quot;SMART_SCOPE\&quot;,\&quot;PRIMARY\&quot;]},\&quot;sourceCmp\&quot;:\&quot;forceSearch:searchGDPCacheScopes\&quot;,\&quot;time\&quot;:1559032442159,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:72707,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:null,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-notification\&quot;,\&quot;attributes\&quot;:{\&quot;data\&quot;:{\&quot;notificationSupported\&quot;:true,\&quot;defaultNotificationPerm\&quot;:\&quot;default\&quot;,\&quot;userSetNotificationPerm\&quot;:\&quot;default\&quot;},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:14,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;session-timeout-notification\&quot;,\&quot;scope\&quot;:\&quot;sessiontimeoutwarn\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:70087,\&quot;duration\&quot;:2662,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (196)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:71079,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1}],\&quot;transport\&quot;:[{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70099,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:21,\&quot;requestLength\&quot;:2968,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;1379;a\&quot;,\&quot;1380;a\&quot;,\&quot;1382;a\&quot;,\&quot;1383;a\&quot;,\&quot;1385;a\&quot;,\&quot;1409;a\&quot;,\&quot;1410;a\&quot;,\&quot;1414;a\&quot;,\&quot;1417;a\&quot;],\&quot;requestId\&quot;:\&quot;70100000000c575be7\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:31955,\&quot;xhrDuration\&quot;:921,\&quot;xhrStall\&quot;:24,\&quot;startTime\&quot;:70100,\&quot;fetchStart\&quot;:70100,\&quot;requestStart\&quot;:70124,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:25,\&quot;transfer\&quot;:896,\&quot;transferSize\&quot;:33888,\&quot;serverTime\&quot;:107,\&quot;xhrDelay\&quot;:1},\&quot;duration\&quot;:922},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70105,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:25,\&quot;requestLength\&quot;:830,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;1420;a\&quot;],\&quot;requestId\&quot;:\&quot;70105000000c091ac0\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6971,\&quot;xhrDuration\&quot;:1024,\&quot;xhrStall\&quot;:305,\&quot;startTime\&quot;:70105,\&quot;fetchStart\&quot;:70105,\&quot;requestStart\&quot;:70410,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:306,\&quot;transfer\&quot;:718,\&quot;transferSize\&quot;:8903,\&quot;serverTime\&quot;:29,\&quot;xhrDelay\&quot;:42},\&quot;duration\&quot;:1066},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70101,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:22,\&quot;requestLength\&quot;:175971,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;1378;a\&quot;],\&quot;requestId\&quot;:\&quot;70101000000d18900e\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6814,\&quot;xhrDuration\&quot;:1173,\&quot;xhrStall\&quot;:22,\&quot;startTime\&quot;:70102,\&quot;fetchStart\&quot;:70102,\&quot;requestStart\&quot;:70124,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:23,\&quot;transfer\&quot;:1150,\&quot;transferSize\&quot;:8747,\&quot;serverTime\&quot;:293,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:1176},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71067,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:26,\&quot;requestLength\&quot;:832,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;1421;a\&quot;],\&quot;requestId\&quot;:\&quot;71067000000826ec7c\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:8371,\&quot;xhrDuration\&quot;:794,\&quot;xhrStall\&quot;:61,\&quot;startTime\&quot;:71068,\&quot;fetchStart\&quot;:71068,\&quot;requestStart\&quot;:71129,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:61,\&quot;transfer\&quot;:733,\&quot;transferSize\&quot;:10303,\&quot;serverTime\&quot;:45,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:796},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71090,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:27,\&quot;requestLength\&quot;:13495,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;1467;a\&quot;,\&quot;1468;a\&quot;],\&quot;requestId\&quot;:\&quot;710900000009564d0d\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:13109,\&quot;xhrDuration\&quot;:1288,\&quot;xhrStall\&quot;:182,\&quot;startTime\&quot;:71094,\&quot;fetchStart\&quot;:71094,\&quot;requestStart\&quot;:71276,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:183,\&quot;transfer\&quot;:1105,\&quot;transferSize\&quot;:15042,\&quot;serverTime\&quot;:297,\&quot;xhrDelay\&quot;:5},\&quot;duration\&quot;:1293},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70121,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:6,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:2425,\&quot;startTime\&quot;:70122,\&quot;fetchStart\&quot;:71715,\&quot;requestStart\&quot;:71863,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:1592,\&quot;ttfb\&quot;:1741,\&quot;transfer\&quot;:684,\&quot;transferSize\&quot;:69650,\&quot;encodedBodySize\&quot;:68701,\&quot;decodedBodySize\&quot;:68701,\&quot;serverTime\&quot;:29,\&quot;defs\&quot;:[\&quot;markup://one:onboardingManager\&quot;],\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:2429},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70103,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:23,\&quot;requestLength\&quot;:855,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;1387;a\&quot;],\&quot;requestId\&quot;:\&quot;70103000000bc9c6d4\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:106370,\&quot;xhrDuration\&quot;:2641,\&quot;xhrStall\&quot;:21,\&quot;startTime\&quot;:70103,\&quot;fetchStart\&quot;:70103,\&quot;requestStart\&quot;:70124,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:22,\&quot;transfer\&quot;:2619,\&quot;transferSize\&quot;:108303,\&quot;serverTime\&quot;:447,\&quot;xhrDelay\&quot;:0},\&quot;duration\&quot;:2641}],\&quot;actions\&quot;:[{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70094,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1409;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;one:globalCreate\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.global.components.one.globalCreate.GlobalCreateController/ACTION$getDockableActionsList\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:45,\&quot;db\&quot;:12,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:16,\&quot;duration\&quot;:971},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70094,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1410;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;uns:notifications\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.notifications.components.notifications.controller.NotificationsController/ACTION$getNotifications\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:3,\&quot;db\&quot;:1,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:971},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70096,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1414;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;one:userProfileCardData\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.global.components.one.userProfileCard.UserProfileCardController/ACTION$loadProfileCardInfo\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:970},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70096,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1417;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;runtime_all_walkthroughs:player\&quot;,\&quot;def\&quot;:\&quot;java://ui.walkthroughs.components.controllers.PlayerController/ACTION$willDisplayWalkthroughInternalTool\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:970},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70097,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1420;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;setup:gear\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.setup.components.aura.components.gear.GearController/ACTION$getPermissions\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:6,\&quot;enqueueWait\&quot;:2,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:24,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:1075},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70097,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1421;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;setup:gear\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.setup.components.aura.components.gear.GearController/ACTION$getEntitySupport\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:968,\&quot;enqueueWait\&quot;:2,\&quot;serverTime\&quot;:{\&quot;total\&quot;:18,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:43,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:1771},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71088,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1467;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getActionOverrides\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:2,\&quot;serverTime\&quot;:{\&quot;total\&quot;:256,\&quot;db\&quot;:3,\&quot;xhrServerTime\&quot;:292,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:1299},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71095,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1469;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getActionOverrides\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:77,\&quot;enqueueWait\&quot;:2,\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1292},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71089,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1468;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getKeyPrefixesWithRecordTypes\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:8,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:292,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1298},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71095,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1470;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getKeyPrefixesWithRecordTypes\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:77,\&quot;enqueueWait\&quot;:2,\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1293}],\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://ui:menu\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:16},{\&quot;name\&quot;:\&quot;markup://one:onboardingManager\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:7}]},\&quot;owner\&quot;:\&quot;forceSearch:searchGDPCacheMrus\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-search-sgdp-fetch-getGlobalMrus\&quot;,\&quot;attributes\&quot;:{\&quot;tStart\&quot;:1559032442130,\&quot;cacheHit\&quot;:false,\&quot;actionId\&quot;:\&quot;1387;a\&quot;,\&quot;fetchedGlobalMrus\&quot;:200,\&quot;fetchedGlobalMruNumEntities\&quot;:10,\&quot;deletedGlobalMrus\&quot;:0,\&quot;name\&quot;:\&quot;DEFAULT\&quot;,\&quot;groupId\&quot;:\&quot;DEFAULT\&quot;,\&quot;requestType\&quot;:\&quot;getGlobalMrus\&quot;,\&quot;requestId\&quot;:\&quot;forceSearchSearchGDPCacheMrus:192:0;p\&quot;,\&quot;requestCmp\&quot;:\&quot;forceSearchSearchGDPCacheMrus\&quot;,\&quot;requestCmpId\&quot;:\&quot;192:0;p\&quot;,\&quot;params\&quot;:{},\&quot;sourceCmp\&quot;:\&quot;forceSearch:searchGDPCacheMrus\&quot;,\&quot;time\&quot;:1559032444792,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:89796,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;aura:html\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;click\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:15,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;global-action-button__menu-trigger-link\&quot;,\&quot;scope\&quot;:\&quot;one-header\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:90724,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;aura:html\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;click\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:16,\&quot;locator\&quot;:{\&quot;context\&quot;:{\&quot;devNameOrId\&quot;:\&quot;TR1__Lightning_Resume_Parser\&quot;},\&quot;target\&quot;:\&quot;global-action-item__menu-item\&quot;,\&quot;scope\&quot;:\&quot;one-header\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:90760,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;force:dockingPanel\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-click\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:17,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;force-dockingPanel-create\&quot;,\&quot;scope\&quot;:\&quot;one-one\&quot;,\&quot;context\&quot;:{\&quot;type\&quot;:\&quot;TR1__Lightning_Resume_Parser\&quot;}},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:70081,\&quot;duration\&quot;:24609,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (196)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:71079,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (198)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:90772,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (199)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:90772,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (200)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:90773,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (201)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:90774,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (203)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93864,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (204)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93866,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (205)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93866,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (206)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93868,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:6},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (207)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93874,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (208)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93875,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (209)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93876,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (210)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93876,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (211)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93876,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (212)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93877,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (213)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93878,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (214)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93879,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (215)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93879,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (216)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93881,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93885,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (221)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:94637,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:94639,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:3}],\&quot;transport\&quot;:[{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70099,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:21,\&quot;requestLength\&quot;:2968,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;1379;a\&quot;,\&quot;1380;a\&quot;,\&quot;1382;a\&quot;,\&quot;1383;a\&quot;,\&quot;1385;a\&quot;,\&quot;1409;a\&quot;,\&quot;1410;a\&quot;,\&quot;1414;a\&quot;,\&quot;1417;a\&quot;],\&quot;requestId\&quot;:\&quot;70100000000c575be7\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:31955,\&quot;xhrDuration\&quot;:921,\&quot;xhrStall\&quot;:24,\&quot;startTime\&quot;:70100,\&quot;fetchStart\&quot;:70100,\&quot;requestStart\&quot;:70124,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:25,\&quot;transfer\&quot;:896,\&quot;transferSize\&quot;:33888,\&quot;serverTime\&quot;:107,\&quot;xhrDelay\&quot;:1},\&quot;duration\&quot;:922},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70105,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:25,\&quot;requestLength\&quot;:830,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;1420;a\&quot;],\&quot;requestId\&quot;:\&quot;70105000000c091ac0\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6971,\&quot;xhrDuration\&quot;:1024,\&quot;xhrStall\&quot;:305,\&quot;startTime\&quot;:70105,\&quot;fetchStart\&quot;:70105,\&quot;requestStart\&quot;:70410,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:306,\&quot;transfer\&quot;:718,\&quot;transferSize\&quot;:8903,\&quot;serverTime\&quot;:29,\&quot;xhrDelay\&quot;:42},\&quot;duration\&quot;:1066},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70101,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:22,\&quot;requestLength\&quot;:175971,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;1378;a\&quot;],\&quot;requestId\&quot;:\&quot;70101000000d18900e\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6814,\&quot;xhrDuration\&quot;:1173,\&quot;xhrStall\&quot;:22,\&quot;startTime\&quot;:70102,\&quot;fetchStart\&quot;:70102,\&quot;requestStart\&quot;:70124,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:23,\&quot;transfer\&quot;:1150,\&quot;transferSize\&quot;:8747,\&quot;serverTime\&quot;:293,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:1176},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71067,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:26,\&quot;requestLength\&quot;:832,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;1421;a\&quot;],\&quot;requestId\&quot;:\&quot;71067000000826ec7c\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:8371,\&quot;xhrDuration\&quot;:794,\&quot;xhrStall\&quot;:61,\&quot;startTime\&quot;:71068,\&quot;fetchStart\&quot;:71068,\&quot;requestStart\&quot;:71129,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:61,\&quot;transfer\&quot;:733,\&quot;transferSize\&quot;:10303,\&quot;serverTime\&quot;:45,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:796},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71090,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:27,\&quot;requestLength\&quot;:13495,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;1467;a\&quot;,\&quot;1468;a\&quot;],\&quot;requestId\&quot;:\&quot;710900000009564d0d\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:13109,\&quot;xhrDuration\&quot;:1288,\&quot;xhrStall\&quot;:182,\&quot;startTime\&quot;:71094,\&quot;fetchStart\&quot;:71094,\&quot;requestStart\&quot;:71276,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:183,\&quot;transfer\&quot;:1105,\&quot;transferSize\&quot;:15042,\&quot;serverTime\&quot;:297,\&quot;xhrDelay\&quot;:5},\&quot;duration\&quot;:1293},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70121,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:6,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:2425,\&quot;startTime\&quot;:70122,\&quot;fetchStart\&quot;:71715,\&quot;requestStart\&quot;:71863,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:1592,\&quot;ttfb\&quot;:1741,\&quot;transfer\&quot;:684,\&quot;transferSize\&quot;:69650,\&quot;encodedBodySize\&quot;:68701,\&quot;decodedBodySize\&quot;:68701,\&quot;serverTime\&quot;:29,\&quot;defs\&quot;:[\&quot;markup://one:onboardingManager\&quot;],\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:2429},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70103,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:23,\&quot;requestLength\&quot;:855,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;1387;a\&quot;],\&quot;requestId\&quot;:\&quot;70103000000bc9c6d4\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:106370,\&quot;xhrDuration\&quot;:2641,\&quot;xhrStall\&quot;:21,\&quot;startTime\&quot;:70103,\&quot;fetchStart\&quot;:70103,\&quot;requestStart\&quot;:70124,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:22,\&quot;transfer\&quot;:2619,\&quot;transferSize\&quot;:108303,\&quot;serverTime\&quot;:447,\&quot;xhrDelay\&quot;:0},\&quot;duration\&quot;:2641},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:72561,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:28,\&quot;requestLength\&quot;:817,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;1479;a\&quot;],\&quot;requestId\&quot;:\&quot;7256100000027b9cb8\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6800,\&quot;xhrDuration\&quot;:763,\&quot;xhrStall\&quot;:3,\&quot;startTime\&quot;:72561,\&quot;fetchStart\&quot;:72561,\&quot;requestStart\&quot;:72564,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:3,\&quot;transfer\&quot;:760,\&quot;transferSize\&quot;:8732,\&quot;serverTime\&quot;:36,\&quot;xhrDelay\&quot;:1},\&quot;duration\&quot;:764},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70105,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:24,\&quot;requestLength\&quot;:876,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;1419;a\&quot;],\&quot;requestId\&quot;:\&quot;7010500000016cad2d\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:7071,\&quot;xhrDuration\&quot;:4144,\&quot;xhrStall\&quot;:20,\&quot;startTime\&quot;:70105,\&quot;fetchStart\&quot;:70105,\&quot;requestStart\&quot;:70125,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:20,\&quot;transfer\&quot;:4124,\&quot;transferSize\&quot;:9003,\&quot;serverTime\&quot;:45,\&quot;xhrDelay\&quot;:0},\&quot;duration\&quot;:4144},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:90798,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:7,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:1645,\&quot;startTime\&quot;:90799,\&quot;fetchStart\&quot;:91624,\&quot;requestStart\&quot;:91624,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:825,\&quot;ttfb\&quot;:826,\&quot;transfer\&quot;:819,\&quot;transferSize\&quot;:224113,\&quot;encodedBodySize\&quot;:223162,\&quot;decodedBodySize\&quot;:223162,\&quot;serverTime\&quot;:124,\&quot;defs\&quot;:[\&quot;markup://forceChatter:lightningComponent\&quot;],\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:1649},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:92451,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:29,\&quot;requestLength\&quot;:1252,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;1584;a\&quot;],\&quot;requestId\&quot;:\&quot;924510000002d69061\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:11651,\&quot;xhrDuration\&quot;:1325,\&quot;xhrStall\&quot;:1,\&quot;startTime\&quot;:92451,\&quot;fetchStart\&quot;:92451,\&quot;requestStart\&quot;:92452,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:3,\&quot;transfer\&quot;:1322,\&quot;transferSize\&quot;:13584,\&quot;serverTime\&quot;:632,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:1327},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:93840,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:30,\&quot;requestLength\&quot;:845,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;1612;a\&quot;],\&quot;requestId\&quot;:\&quot;9384000000041260b5\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:8091,\&quot;xhrDuration\&quot;:788,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:93841,\&quot;fetchStart\&quot;:93841,\&quot;requestStart\&quot;:93843,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:2,\&quot;transfer\&quot;:786,\&quot;transferSize\&quot;:10023,\&quot;serverTime\&quot;:99,\&quot;xhrDelay\&quot;:1},\&quot;duration\&quot;:789}],\&quot;actions\&quot;:[{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70084,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1379;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:defenseHook\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.defenseHook.DefenseHookController/ACTION$getDefenseHook\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:13,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:16,\&quot;duration\&quot;:959},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70084,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1380;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;salesforceIdentity:sessionTimeoutWarn\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.identity.components.sessiontimeoutwarn.SessionTimeoutWarnController/ACTION$getSessionTimeoutConfig\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:13,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:960},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70085,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1382;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;support:crossFrameApiManager\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.support.components.crossFrameApiManager.CrossFrameApiManagerController/ACTION$getIsLightningOpenCtiUser\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:14,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:959},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70086,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1383;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;runtime_rtc:rtcDiscoveryBanner\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.rtc.components.aura.components.RtcDiscoveryBannerController/ACTION$getConfig\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:13,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:958},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70087,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1385;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:hostConfig\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.hostConfig.HostConfigController/ACTION$getConfigData\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:12,\&quot;serverTime\&quot;:{\&quot;total\&quot;:21,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:5,\&quot;duration\&quot;:962},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70094,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1409;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;one:globalCreate\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.global.components.one.globalCreate.GlobalCreateController/ACTION$getDockableActionsList\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:45,\&quot;db\&quot;:12,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:16,\&quot;duration\&quot;:971},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70094,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1410;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;uns:notifications\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.notifications.components.notifications.controller.NotificationsController/ACTION$getNotifications\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:3,\&quot;db\&quot;:1,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:971},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70096,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1414;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;one:userProfileCardData\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.global.components.one.userProfileCard.UserProfileCardController/ACTION$loadProfileCardInfo\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:970},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70096,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1417;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;runtime_all_walkthroughs:player\&quot;,\&quot;def\&quot;:\&quot;java://ui.walkthroughs.components.controllers.PlayerController/ACTION$willDisplayWalkthroughInternalTool\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:970},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70097,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1420;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;setup:gear\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.setup.components.aura.components.gear.GearController/ACTION$getPermissions\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:6,\&quot;enqueueWait\&quot;:2,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:24,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:1075},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70081,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1378;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.instrumentation.components.beacon.InstrumentationBeaconController/ACTION$sendData\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:4,\&quot;enqueueWait\&quot;:16,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:290,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1197},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70097,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1421;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;setup:gear\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.setup.components.aura.components.gear.GearController/ACTION$getEntitySupport\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:968,\&quot;enqueueWait\&quot;:2,\&quot;serverTime\&quot;:{\&quot;total\&quot;:18,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:43,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:1771},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71088,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1467;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getActionOverrides\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:2,\&quot;serverTime\&quot;:{\&quot;total\&quot;:256,\&quot;db\&quot;:3,\&quot;xhrServerTime\&quot;:292,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:1299},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71095,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1469;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getActionOverrides\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:77,\&quot;enqueueWait\&quot;:2,\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1292},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71089,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1468;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getKeyPrefixesWithRecordTypes\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:8,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:292,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1298},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71095,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1470;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getKeyPrefixesWithRecordTypes\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:77,\&quot;enqueueWait\&quot;:2,\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1293},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70088,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1387;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;forceSearch:searchGDPCacheMrus\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.search.components.forcesearch.sgdp.MRUCacheController/ACTION$getGlobalMrus\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:6,\&quot;enqueueWait\&quot;:9,\&quot;serverTime\&quot;:{\&quot;total\&quot;:412,\&quot;db\&quot;:1,\&quot;xhrServerTime\&quot;:442,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:3,\&quot;duration\&quot;:2662},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:72560,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1479;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;one:onboardingManager\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.global.components.one.onboardingManager.OnboardingManagerController/ACTION$getPayload\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:5,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:32,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:767},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70096,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1419;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;setup:gear\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.setup.components.aura.components.gear.GearController/ACTION$getGearSetupApps\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:6,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:17,\&quot;db\&quot;:9,\&quot;xhrServerTime\&quot;:44,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:4,\&quot;duration\&quot;:4160},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:92451,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1584;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ComponentController/ACTION$getComponent\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;params\&quot;:{\&quot;name\&quot;:\&quot;markup://forceChatter:lightningComponent\&quot;},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:130,\&quot;db\&quot;:3,\&quot;xhrServerTime\&quot;:475,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:58,\&quot;duration\&quot;:1387},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:93837,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1612;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;TR1:DocumentParser\&quot;,\&quot;def\&quot;:\&quot;apex://TR1.DocumentParserController/ACTION$fetchCompLiterals\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:9,\&quot;db\&quot;:2,\&quot;xhrServerTime\&quot;:94,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:3,\&quot;duration\&quot;:796}],\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://ui:menu\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:16},{\&quot;name\&quot;:\&quot;markup://one:onboardingManager\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:7},{\&quot;name\&quot;:\&quot;markup://ui:tooltipAdvanced\&quot;,\&quot;createCount\&quot;:2,\&quot;createTimeTotal\&quot;:12},{\&quot;name\&quot;:\&quot;markup://force:dockableActionRunnable\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:56},{\&quot;name\&quot;:\&quot;markup://forceChatter:lightningComponent\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:57},{\&quot;name\&quot;:\&quot;markup://lightning:radioGroup\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:0}]},\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;pageTracker\&quot;,\&quot;attributes\&quot;:{\&quot;pageId\&quot;:1,\&quot;pageTrackerId\&quot;:1,\&quot;phase\&quot;:\&quot;CONTINUE\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;}]}}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.context" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">aura.context</stringProp>
                    <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.pageURI" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">aura.pageURI</stringProp>
                    <stringProp name="Argument.value">/lightning/page/home</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.token" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">aura.token</stringProp>
                    <stringProp name="Argument.value">${token}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/aura?r=31&amp;ui-instrumentation-components-beacon.InstrumentationBeacon.sendData=1</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                  </elementProp>
                  <elementProp name="X-SFDC-Request-Id" elementType="Header">
                    <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                    <stringProp name="Header.value">94814000000ee78bcf</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                  </elementProp>
                  <elementProp name="DNT" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="S1_05_Click_Parser_${size}" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1370 /aura?r=35&amp;TR1.DocumentParser.parseDocument=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="message" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">message</stringProp>
                      <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1730;a&quot;,&quot;descriptor&quot;:&quot;apex://TR1.DocumentParserController/ACTION$parseDocument&quot;,&quot;callingDescriptor&quot;:&quot;markup://TR1:DocumentParser&quot;,&quot;params&quot;:{&quot;docId&quot;:&quot;${docid}&quot;,&quot;docName&quot;:&quot;${doc}&quot;},&quot;version&quot;:null}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.context" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.context</stringProp>
                      <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.pageURI" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.pageURI</stringProp>
                      <stringProp name="Argument.value">/lightning/page/home</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">aura.token</stringProp>
                      <stringProp name="Argument.value">${token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/aura?r=35&amp;TR1.DocumentParser.parseDocument=1</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                    </elementProp>
                    <elementProp name="X-SFDC-Request-Id" elementType="Header">
                      <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                      <stringProp name="Header.value">13452500000060cbd3</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="data" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">data</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;data&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1377 /aura?r=40&amp;ui-force-components-controllers-recordGlobalValueProvider.RecordGvp.getRecord=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="message" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">message</stringProp>
                      <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1737;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$getRecord&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordDescriptor&quot;:&quot;${data}.undefined.null.null.null.Id,RecordTypeId.VIEW.true.null.null.null&quot;}}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.context" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.context</stringProp>
                      <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.pageURI" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.pageURI</stringProp>
                      <stringProp name="Argument.value">/lightning/page/home</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">aura.token</stringProp>
                      <stringProp name="Argument.value">${token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/aura?r=40&amp;ui-force-components-controllers-recordGlobalValueProvider.RecordGvp.getRecord=1</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                    </elementProp>
                    <elementProp name="X-SFDC-Request-Id" elementType="Header">
                      <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                      <stringProp name="Header.value">22303100000064125e</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1378 /aura?r=41&amp;ui-force-components-controllers-detail.Detail.getEntityConfig=1&amp;ui-force-components-controllers-detail.Detail.getRecord=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="message" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">message</stringProp>
                      <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1923;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.detail.DetailController/ACTION$getRecord&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;${data}&quot;,&quot;record&quot;:null,&quot;inContextOfComponent&quot;:&quot;&quot;,&quot;mode&quot;:&quot;EDIT&quot;,&quot;layoutType&quot;:&quot;FULL&quot;,&quot;defaultFieldValues&quot;:null},&quot;storable&quot;:true},{&quot;id&quot;:&quot;1924;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.detail.DetailController/ACTION$getEntityConfig&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;${data}&quot;,&quot;layoutType&quot;:&quot;FULL&quot;,&quot;mode&quot;:&quot;EDIT&quot;},&quot;storable&quot;:true}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.context" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.context</stringProp>
                      <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.pageURI" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.pageURI</stringProp>
                      <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">aura.token</stringProp>
                      <stringProp name="Argument.value">${token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/aura?r=41&amp;ui-force-components-controllers-detail.Detail.getEntityConfig=1&amp;ui-force-components-controllers-detail.Detail.getRecord=1</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                    </elementProp>
                    <elementProp name="X-SFDC-Request-Id" elementType="Header">
                      <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                      <stringProp name="Header.value">2239670000008361a0</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1379 /aura?r=42&amp;ui-flexipage-components-page.FlexipageControllerV2.getPage=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="message" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">message</stringProp>
                      <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1979;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.flexipage.components.page.FlexipageControllerV2/ACTION$getPage&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;flexiPageDeveloperName&quot;:&quot;Contact_3_Column_Page3&quot;,&quot;sObjectName&quot;:&quot;Contact&quot;},&quot;storable&quot;:true}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.context" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.context</stringProp>
                      <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.pageURI" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.pageURI</stringProp>
                      <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">aura.token</stringProp>
                      <stringProp name="Argument.value">${token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/aura?r=42&amp;ui-flexipage-components-page.FlexipageControllerV2.getPage=1</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                    </elementProp>
                    <elementProp name="X-SFDC-Request-Id" elementType="Header">
                      <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                      <stringProp name="Header.value">224006000000137b5e</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1380 /aura?r=43&amp;ui-force-components-controllers-recordLayoutBroker.RecordLayoutBroker.getRecordAndLayout=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="message" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">message</stringProp>
                      <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1973;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordLayoutBroker.RecordLayoutBrokerController/ACTION$getRecordAndLayout&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;${data}&quot;,&quot;mode&quot;:&quot;VIEW&quot;,&quot;type&quot;:&quot;COMPACT&quot;,&quot;stencilOverride&quot;:&quot;force:highlightsStencilDesktop&quot;,&quot;inContextOfComponent&quot;:&quot;force:highlights&quot;,&quot;pageSize&quot;:-1,&quot;offset&quot;:0,&quot;updateMru&quot;:true,&quot;errorContext&quot;:{&quot;componentStack&quot;:&quot;[laf:pageHost] &gt; [one:recordHomeFlexipage] &gt; [one:recordHomeFlexipage] &gt; [one:recordHomeFlexipage] &gt; [force:recordLayoutBroker] &gt; [force:recordLayoutBroker] &gt; [force:recordLayoutBroker]&quot;}}}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.context" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.context</stringProp>
                      <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.pageURI" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.pageURI</stringProp>
                      <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">aura.token</stringProp>
                      <stringProp name="Argument.value">${token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/aura?r=43&amp;ui-force-components-controllers-recordLayoutBroker.RecordLayoutBroker.getRecordAndLayout=1</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                    </elementProp>
                    <elementProp name="X-SFDC-Request-Id" elementType="Header">
                      <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                      <stringProp name="Header.value">224011000000648cfc</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1384 /aura?r=44&amp;ui-force-components-controllers-dedupe.DedupeManager.getConfig=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="message" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">message</stringProp>
                      <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;2043;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.dedupe.DedupeManagerController/ACTION$getConfig&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;entityApiName&quot;:&quot;Contact&quot;,&quot;recordTypeId&quot;:&quot;0121N000001ZxLTQA0&quot;,&quot;recordId&quot;:&quot;${data}&quot;},&quot;storable&quot;:true}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.context" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.context</stringProp>
                      <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.pageURI" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.pageURI</stringProp>
                      <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">aura.token</stringProp>
                      <stringProp name="Argument.value">${token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/aura?r=44&amp;ui-force-components-controllers-dedupe.DedupeManager.getConfig=1</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                    </elementProp>
                    <elementProp name="X-SFDC-Request-Id" elementType="Header">
                      <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                      <stringProp name="Header.value">226351000000080d61</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1385 /aura?r=45&amp;ui-force-components-controllers-inputAddress.InputAddress.getAddressAutocompleteUrl=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="message" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">message</stringProp>
                      <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;2812;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.inputAddress.InputAddressController/ACTION$getAddressAutocompleteUrl&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.context" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.context</stringProp>
                      <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.pageURI" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.pageURI</stringProp>
                      <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">aura.token</stringProp>
                      <stringProp name="Argument.value">${token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/aura?r=45&amp;ui-force-components-controllers-inputAddress.InputAddress.getAddressAutocompleteUrl=1</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                    </elementProp>
                    <elementProp name="X-SFDC-Request-Id" elementType="Header">
                      <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                      <stringProp name="Header.value">2273650000006acfc8</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1388 /apex/LinkedInProfilePluginPage" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">id</stringProp>
                      <stringProp name="Argument.value">${data}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="tour" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">tour</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="isdtp" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">isdtp</stringProp>
                      <stringProp name="Argument.value">p1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="sfdcIFrameOrigin" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">sfdcIFrameOrigin</stringProp>
                      <stringProp name="Argument.value">${protocol}://${host}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="sfdcIFrameHost" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">sfdcIFrameHost</stringProp>
                      <stringProp name="Argument.value">web</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="nonce" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">nonce</stringProp>
                      <stringProp name="Argument.value">${nonce}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ltn_app_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ltn_app_id</stringProp>
                      <stringProp name="Argument.value">${id}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="clc" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">clc</stringProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">tr-release2--regtest--tr1.cs92.visual.force.com</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/apex/LinkedInProfilePluginPage</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${host}/</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1389 /apex/ResumeManager5" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">id</stringProp>
                      <stringProp name="Argument.value">${data}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="tour" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">tour</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="isdtp" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">isdtp</stringProp>
                      <stringProp name="Argument.value">p1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="sfdcIFrameOrigin" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">sfdcIFrameOrigin</stringProp>
                      <stringProp name="Argument.value">${protocol}://${host}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="sfdcIFrameHost" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">sfdcIFrameHost</stringProp>
                      <stringProp name="Argument.value">web</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="nonce" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">nonce</stringProp>
                      <stringProp name="Argument.value">${nonce}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ltn_app_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ltn_app_id</stringProp>
                      <stringProp name="Argument.value">${id}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="clc" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">clc</stringProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">tr-release2--regtest--tr1.cs92.visual.force.com</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/apex/ResumeManager5</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${host}/</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1390 /apex/CandidateManager" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">id</stringProp>
                      <stringProp name="Argument.value">${data}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="tour" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">tour</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="isdtp" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">isdtp</stringProp>
                      <stringProp name="Argument.value">p1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="sfdcIFrameOrigin" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">sfdcIFrameOrigin</stringProp>
                      <stringProp name="Argument.value">${protocol}://${host}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="sfdcIFrameHost" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">sfdcIFrameHost</stringProp>
                      <stringProp name="Argument.value">web</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="nonce" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">nonce</stringProp>
                      <stringProp name="Argument.value">${nonce}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ltn_app_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ltn_app_id</stringProp>
                      <stringProp name="Argument.value">${id}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="clc" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">clc</stringProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">tr-release2--regtest--tr1.cs92.visual.force.com</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/apex/CandidateManager</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${host}/</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1391 /aura?r=46&amp;ui-force-components-controllers-recordLayoutBroker.RecordLayoutBroker.getLayout=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="message" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">message</stringProp>
                      <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1812;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordLayoutBroker.RecordLayoutBrokerController/ACTION$getRecordAndLayout&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;${data}&quot;,&quot;mode&quot;:&quot;VIEW&quot;,&quot;type&quot;:&quot;COMPACT&quot;,&quot;stencilOverride&quot;:&quot;force:highlightsStencilDesktop&quot;,&quot;inContextOfComponent&quot;:&quot;force:highlights&quot;,&quot;pageSize&quot;:-1,&quot;offset&quot;:0,&quot;updateMru&quot;:true,&quot;errorContext&quot;:{&quot;componentStack&quot;:&quot;[laf:pageHost] &gt; [one:recordHomeFlexipage] &gt; [one:recordHomeFlexipage] &gt; [one:recordHomeFlexipage] &gt; [force:recordLayoutBroker] &gt; [force:recordLayoutBroker] &gt; [force:recordLayoutBroker]&quot;}}}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.context" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.context</stringProp>
                      <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.pageURI" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.pageURI</stringProp>
                      <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">aura.token</stringProp>
                      <stringProp name="Argument.value">${token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/aura?r=46&amp;ui-force-components-controllers-recordLayoutBroker.RecordLayoutBroker.getLayout=1</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                    </elementProp>
                    <elementProp name="X-SFDC-Request-Id" elementType="Header">
                      <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                      <stringProp name="Header.value">2287280000008c15c0</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1392 /aura?r=48&amp;TR1.TRS_CreteCACtlr.getselectOptions=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="message" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">message</stringProp>
                      <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;3692;a&quot;,&quot;descriptor&quot;:&quot;apex://TR1.TRS_CreteCACtlr/ACTION$getselectOptions&quot;,&quot;callingDescriptor&quot;:&quot;markup://TR1:CreateAvailability&quot;,&quot;params&quot;:{&quot;ObjectName&quot;:&quot;Candidate_Availability__c&quot;,&quot;fld&quot;:&quot;Type__c&quot;},&quot;version&quot;:null}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.context" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.context</stringProp>
                      <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.pageURI" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.pageURI</stringProp>
                      <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">aura.token</stringProp>
                      <stringProp name="Argument.value">${token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/aura?r=48&amp;TR1.TRS_CreteCACtlr.getselectOptions=1</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                    </elementProp>
                    <elementProp name="X-SFDC-Request-Id" elementType="Header">
                      <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                      <stringProp name="Header.value">228751000000d49898</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1393 /aura?r=47&amp;TR1.TRS_CreteCACtlr.getOrgDefaults=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="message" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">message</stringProp>
                      <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;3691;a&quot;,&quot;descriptor&quot;:&quot;apex://TR1.TRS_CreteCACtlr/ACTION$getOrgDefaults&quot;,&quot;callingDescriptor&quot;:&quot;markup://TR1:CreateAvailability&quot;,&quot;params&quot;:{},&quot;version&quot;:null}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.context" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.context</stringProp>
                      <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.pageURI" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.pageURI</stringProp>
                      <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">aura.token</stringProp>
                      <stringProp name="Argument.value">${token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/aura?r=47&amp;TR1.TRS_CreteCACtlr.getOrgDefaults=1</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                    </elementProp>
                    <elementProp name="X-SFDC-Request-Id" elementType="Header">
                      <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                      <stringProp name="Header.value">228749000000c38de8</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1396 /resource/1549981040000/TR1__JobApplicationManagerCSS" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/resource/1549981040000/TR1__JobApplicationManagerCSS</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/css,*/*;q=0.1</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1397 /resource/1549438193000/TR1__BaseUtility" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/resource/1549438193000/TR1__BaseUtility</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1398 /aura?r=49&amp;ui-merge-components-controller.Merge.getMergeCandidates=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="message" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">message</stringProp>
                      <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;3744;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.merge.components.controller.MergeController/ACTION$getMergeCandidates&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;0033F00000D3xEgQAJ&quot;}}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.context" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.context</stringProp>
                      <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.pageURI" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.pageURI</stringProp>
                      <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">aura.token</stringProp>
                      <stringProp name="Argument.value">${token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/aura?r=49&amp;ui-merge-components-controller.Merge.getMergeCandidates=1</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                    </elementProp>
                    <elementProp name="X-SFDC-Request-Id" elementType="Header">
                      <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                      <stringProp name="Header.value">228837000000ebc083</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1399 /aura?r=50&amp;ui-force-components-controllers-relatedList.RelatedListContainer.getRelatedListInfos=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="message" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">message</stringProp>
                      <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;3760;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.relatedList.RelatedListContainerController/ACTION$getRelatedListInfos&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;location&quot;:&quot;ALL&quot;},&quot;storable&quot;:true}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.context" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.context</stringProp>
                      <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.pageURI" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.pageURI</stringProp>
                      <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">aura.token</stringProp>
                      <stringProp name="Argument.value">${token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/aura?r=50&amp;ui-force-components-controllers-relatedList.RelatedListContainer.getRelatedListInfos=1</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                    </elementProp>
                    <elementProp name="X-SFDC-Request-Id" elementType="Header">
                      <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                      <stringProp name="Header.value">228850000000dcf08a</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1400 /aura?r=51&amp;aura.Component.reportDeprecationUsages=3&amp;ui-force-components-controllers-socialPhoto.SocialPhoto.resolvePhotos=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="message" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">message</stringProp>
                      <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;3669;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$reportDeprecationUsages&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;usages&quot;:{&quot;AuraComponentService.newComponentDeprecated&quot;:[&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;]}}},{&quot;id&quot;:&quot;3729;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$reportDeprecationUsages&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;usages&quot;:{&quot;AuraComponentService.newComponentDeprecated&quot;:[&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;]}}},{&quot;id&quot;:&quot;3779;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$reportDeprecationUsages&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;usages&quot;:{&quot;AuraComponentService.newComponentDeprecated&quot;:[&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;]}}},{&quot;id&quot;:&quot;3868;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.socialPhoto.SocialPhotoController/ACTION$resolvePhotos&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;records&quot;:{&quot;0011N00001W0YiJQAV&quot;:{}},&quot;refreshCached&quot;:false},&quot;storable&quot;:true}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.context" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.context</stringProp>
                      <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.pageURI" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.pageURI</stringProp>
                      <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">aura.token</stringProp>
                      <stringProp name="Argument.value">${token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/aura?r=51&amp;aura.Component.reportDeprecationUsages=3&amp;ui-force-components-controllers-socialPhoto.SocialPhoto.resolvePhotos=1</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                    </elementProp>
                    <elementProp name="X-SFDC-Request-Id" elementType="Header">
                      <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                      <stringProp name="Header.value">22898900000067fe33</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1402 /aura?r=52&amp;ui-force-components-controllers-socialPhoto.SocialPhoto.resolvePhotos=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="message" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">message</stringProp>
                      <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;3972;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.socialPhoto.SocialPhotoController/ACTION$resolvePhotos&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;records&quot;:{&quot;0033F00000D3xEgQAJ&quot;:{}},&quot;refreshCached&quot;:false},&quot;storable&quot;:true}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.context" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.context</stringProp>
                      <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.pageURI" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.pageURI</stringProp>
                      <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">aura.token</stringProp>
                      <stringProp name="Argument.value">${token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/aura?r=52&amp;ui-force-components-controllers-socialPhoto.SocialPhoto.resolvePhotos=1</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                    </elementProp>
                    <elementProp name="X-SFDC-Request-Id" elementType="Header">
                      <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                      <stringProp name="Header.value">2296950000000166af</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1403 /aura?r=53&amp;ui-global-components-one-actionsManager.ActionsManager.handleAction=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="message" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">message</stringProp>
                      <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;3954;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.actionsManager.ActionsManagerController/ACTION$handleAction&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;recordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;context&quot;:&quot;CHATTER&quot;,&quot;entityApiName&quot;:&quot;Contact&quot;,&quot;record&quot;:{&quot;sobjectType&quot;:&quot;Contact&quot;,&quot;Id&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;RecordTypeId&quot;:&quot;0121N000001ZxLTQA0&quot;,&quot;SystemModstamp&quot;:&quot;2019-05-28T08:36:35.000Z&quot;,&quot;SystemModstamp__f&quot;:&quot;28/05/2019 03:36&quot;,&quot;SystemModstamp__l&quot;:&quot;28/05/2019 03:36&quot;,&quot;Account&quot;:{&quot;sobjectType&quot;:&quot;Account&quot;,&quot;Id&quot;:&quot;0011N00001W0YiJQAV&quot;,&quot;Name&quot;:&quot;PoolAccountName - 7&quot;,&quot;RecordTypeId&quot;:&quot;0121N000001ZxLUQA0&quot;,&quot;RecordType&quot;:{&quot;sobjectType&quot;:&quot;RecordType&quot;,&quot;Id&quot;:&quot;0121N000001ZxLUQA0&quot;,&quot;Name&quot;:&quot;Account&quot;}},&quot;Account__f&quot;:&quot;PoolAccountName - 7&quot;,&quot;Account__l&quot;:&quot;PoolAccountName - 7&quot;,&quot;AccountId&quot;:&quot;0011N00001W0YiJQAV&quot;,&quot;CreatedDate&quot;:&quot;2019-05-28T08:36:26.000Z&quot;,&quot;CreatedDate__f&quot;:&quot;28/05/2019 03:36&quot;,&quot;CreatedDate__l&quot;:&quot;28/05/2019 03:36&quot;,&quot;Email&quot;:&quot;bethy.dimitrova@tut.com&quot;,&quot;FirstName&quot;:&quot;Bethy&quot;,&quot;LastModifiedById&quot;:&quot;0051N000005pgpoQAA&quot;,&quot;LastModifiedDate&quot;:&quot;2019-05-28T08:36:31.000Z&quot;,&quot;LastModifiedDate__f&quot;:&quot;28/05/2019 03:36&quot;,&quot;LastModifiedDate__l&quot;:&quot;28/05/2019 03:36&quot;,&quot;LastName&quot;:&quot;Dimitrova&quot;,&quot;MiddleName&quot;:null,&quot;MobilePhone&quot;:null,&quot;Name&quot;:&quot;Bethy Dimitrova&quot;,&quot;Owner&quot;:{&quot;sobjectType&quot;:&quot;User&quot;,&quot;Id&quot;:&quot;0051N000005pgpoQAA&quot;,&quot;Name&quot;:&quot;Talent Rover Administrator&quot;,&quot;SystemModstamp&quot;:&quot;2019-05-28T08:07:17.000Z&quot;,&quot;SystemModstamp__f&quot;:&quot;28/05/2019 03:07&quot;,&quot;SystemModstamp__l&quot;:&quot;28/05/2019 03:07&quot;},&quot;Owner__f&quot;:&quot;Talent Rover Administrator&quot;,&quot;Owner__l&quot;:&quot;Talent Rover Administrator&quot;,&quot;OwnerId&quot;:&quot;0051N000005pgpoQAA&quot;,&quot;Phone&quot;:null,&quot;PhotoUrl&quot;:&quot;/services/images/photo/0033F00000D3xEgQAJ&quot;,&quot;Salutation&quot;:null,&quot;Suffix&quot;:null,&quot;Title&quot;:&quot;Technical Operations Officer&quot;,&quot;RecordType&quot;:{&quot;sobjectType&quot;:&quot;RecordType&quot;,&quot;Id&quot;:&quot;0121N000001ZxLTQA0&quot;,&quot;Name&quot;:&quot;Candidate&quot;}},&quot;section&quot;:&quot;SINGLE_ACTION_LINKS&quot;,&quot;inContextOfComponent&quot;:&quot;highlightsStencilDesktopVertical&quot;,&quot;size&quot;:3,&quot;maxWidth&quot;:-1,&quot;actionTypes&quot;:[],&quot;bulkedAction&quot;:false,&quot;actionsRequestId&quot;:1},{&quot;recordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;context&quot;:&quot;RECORD&quot;,&quot;entityApiName&quot;:&quot;Contact&quot;,&quot;record&quot;:{&quot;sobjectType&quot;:&quot;Contact&quot;,&quot;Id&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;RecordTypeId&quot;:&quot;0121N000001ZxLTQA0&quot;,&quot;SystemModstamp&quot;:&quot;2019-05-28T08:36:35.000Z&quot;,&quot;SystemModstamp__f&quot;:&quot;28/05/2019 03:36&quot;,&quot;SystemModstamp__l&quot;:&quot;28/05/2019 03:36&quot;,&quot;Account&quot;:{&quot;sobjectType&quot;:&quot;Account&quot;,&quot;Id&quot;:&quot;0011N00001W0YiJQAV&quot;,&quot;Name&quot;:&quot;PoolAccountName - 7&quot;,&quot;RecordTypeId&quot;:&quot;0121N000001ZxLUQA0&quot;,&quot;RecordType&quot;:{&quot;sobjectType&quot;:&quot;RecordType&quot;,&quot;Id&quot;:&quot;0121N000001ZxLUQA0&quot;,&quot;Name&quot;:&quot;Account&quot;}},&quot;Account__f&quot;:&quot;PoolAccountName - 7&quot;,&quot;Account__l&quot;:&quot;PoolAccountName - 7&quot;,&quot;AccountId&quot;:&quot;0011N00001W0YiJQAV&quot;,&quot;CreatedDate&quot;:&quot;2019-05-28T08:36:26.000Z&quot;,&quot;CreatedDate__f&quot;:&quot;28/05/2019 03:36&quot;,&quot;CreatedDate__l&quot;:&quot;28/05/2019 03:36&quot;,&quot;Email&quot;:&quot;bethy.dimitrova@tut.com&quot;,&quot;FirstName&quot;:&quot;Bethy&quot;,&quot;LastModifiedById&quot;:&quot;0051N000005pgpoQAA&quot;,&quot;LastModifiedDate&quot;:&quot;2019-05-28T08:36:31.000Z&quot;,&quot;LastModifiedDate__f&quot;:&quot;28/05/2019 03:36&quot;,&quot;LastModifiedDate__l&quot;:&quot;28/05/2019 03:36&quot;,&quot;LastName&quot;:&quot;Dimitrova&quot;,&quot;MiddleName&quot;:null,&quot;MobilePhone&quot;:null,&quot;Name&quot;:&quot;Bethy Dimitrova&quot;,&quot;Owner&quot;:{&quot;sobjectType&quot;:&quot;User&quot;,&quot;Id&quot;:&quot;0051N000005pgpoQAA&quot;,&quot;Name&quot;:&quot;Talent Rover Administrator&quot;,&quot;SystemModstamp&quot;:&quot;2019-05-28T08:07:17.000Z&quot;,&quot;SystemModstamp__f&quot;:&quot;28/05/2019 03:07&quot;,&quot;SystemModstamp__l&quot;:&quot;28/05/2019 03:07&quot;},&quot;Owner__f&quot;:&quot;Talent Rover Administrator&quot;,&quot;Owner__l&quot;:&quot;Talent Rover Administrator&quot;,&quot;OwnerId&quot;:&quot;0051N000005pgpoQAA&quot;,&quot;Phone&quot;:null,&quot;PhotoUrl&quot;:&quot;/services/images/photo/0033F00000D3xEgQAJ&quot;,&quot;Salutation&quot;:null,&quot;Suffix&quot;:null,&quot;Title&quot;:&quot;Technical Operations Officer&quot;,&quot;RecordType&quot;:{&quot;sobjectType&quot;:&quot;RecordType&quot;,&quot;Id&quot;:&quot;0121N000001ZxLTQA0&quot;,&quot;Name&quot;:&quot;Candidate&quot;}},&quot;section&quot;:&quot;PAGE&quot;,&quot;inContextOfComponent&quot;:&quot;force:highlights&quot;,&quot;size&quot;:3,&quot;maxWidth&quot;:0,&quot;actionTypes&quot;:[],&quot;bulkedAction&quot;:false,&quot;actionsRequestId&quot;:2}]}}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.context" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.context</stringProp>
                      <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.pageURI" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.pageURI</stringProp>
                      <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">aura.token</stringProp>
                      <stringProp name="Argument.value">${token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/aura?r=53&amp;ui-global-components-one-actionsManager.ActionsManager.handleAction=1</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                    </elementProp>
                    <elementProp name="X-SFDC-Request-Id" elementType="Header">
                      <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                      <stringProp name="Header.value">229744000000622817</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1407 /resource/1548078413000/TR1__KanbanSwimlaneCSS" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/resource/1548078413000/TR1__KanbanSwimlaneCSS</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/css,*/*;q=0.1</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1408 /resource/1518000972000/TR1__LightningJqueryV3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/resource/1518000972000/TR1__LightningJqueryV3</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1409 /aura?r=54&amp;TR1.ATSv2_Candidate_ListView.getInit=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="message" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">message</stringProp>
                      <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;4012;a&quot;,&quot;descriptor&quot;:&quot;apex://TR1.ATSv2_Candidate_ListViewController/ACTION$getInit&quot;,&quot;callingDescriptor&quot;:&quot;markup://TR1:ATSv2_Candidate_ListView&quot;,&quot;params&quot;:{&quot;sObjectName&quot;:&quot;Application_V2__c&quot;,&quot;fieldSetName&quot;:&quot;ATSv2_Candidate_ListView&quot;,&quot;parentRecordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;stage&quot;:&quot;ALL&quot;,&quot;selectiveType&quot;:&quot;All&quot;},&quot;version&quot;:null}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.context" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.context</stringProp>
                      <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.pageURI" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.pageURI</stringProp>
                      <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">aura.token</stringProp>
                      <stringProp name="Argument.value">${token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/aura?r=54&amp;TR1.ATSv2_Candidate_ListView.getInit=1</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                    </elementProp>
                    <elementProp name="X-SFDC-Request-Id" elementType="Header">
                      <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                      <stringProp name="Header.value">230370000000eb5554</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1410 /aura?r=55&amp;ui-force-components-controllers-multiTemplateVirtualList.MultiTemplateVirtualList.getRecordLayoutComponent=4&amp;ui-force-components-controllers-relatedList.RelatedListContainerDataProvider.getRecords=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="message" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">message</stringProp>
                      <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;4045;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.multiTemplateVirtualList.MultiTemplateVirtualListController/ACTION$getRecordLayoutComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;inContextOfComponent&quot;:&quot;force:relatedListCard&quot;,&quot;listReference&quot;:{&quot;inContextOfRecordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;listViewIdOrName&quot;:&quot;TR1__References__r&quot;,&quot;entityKeyPrefixOrApiName&quot;:&quot;TR1__Reference__c&quot;},&quot;layoutType&quot;:&quot;RELATED_LIST&quot;}},{&quot;id&quot;:&quot;4059;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.multiTemplateVirtualList.MultiTemplateVirtualListController/ACTION$getRecordLayoutComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;inContextOfComponent&quot;:&quot;force:relatedListCard&quot;,&quot;listReference&quot;:{&quot;inContextOfRecordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;listViewIdOrName&quot;:&quot;TR1__Opportunities_Discussed__r&quot;,&quot;entityKeyPrefixOrApiName&quot;:&quot;TR1__Opportunity_Discussed__c&quot;},&quot;layoutType&quot;:&quot;RELATED_LIST&quot;}},{&quot;id&quot;:&quot;4073;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.multiTemplateVirtualList.MultiTemplateVirtualListController/ACTION$getRecordLayoutComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;inContextOfComponent&quot;:&quot;force:relatedListCard&quot;,&quot;listReference&quot;:{&quot;inContextOfRecordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;listViewIdOrName&quot;:&quot;TR1__Closes__r&quot;,&quot;entityKeyPrefixOrApiName&quot;:&quot;TR1__Closing_Report__c&quot;},&quot;layoutType&quot;:&quot;RELATED_LIST&quot;}},{&quot;id&quot;:&quot;4087;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.multiTemplateVirtualList.MultiTemplateVirtualListController/ACTION$getRecordLayoutComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;inContextOfComponent&quot;:&quot;force:relatedListCard&quot;,&quot;listReference&quot;:{&quot;inContextOfRecordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;listViewIdOrName&quot;:&quot;TR1__Timesheets__r&quot;,&quot;entityKeyPrefixOrApiName&quot;:&quot;TR1__Timesheet__c&quot;},&quot;layoutType&quot;:&quot;RELATED_LIST&quot;}},{&quot;id&quot;:&quot;4120;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.relatedList.RelatedListContainerDataProviderController/ACTION$getRecords&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;relatedListApiNames&quot;:[&quot;TR1__References__r&quot;,&quot;TR1__Opportunities_Discussed__r&quot;,&quot;TR1__Closes__r&quot;,&quot;TR1__Timesheets__r&quot;],&quot;numRecordsToShow&quot;:10,&quot;showPartialCount&quot;:true},&quot;storable&quot;:true}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.context" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.context</stringProp>
                      <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.pageURI" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.pageURI</stringProp>
                      <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">aura.token</stringProp>
                      <stringProp name="Argument.value">${token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/aura?r=55&amp;ui-force-components-controllers-multiTemplateVirtualList.MultiTemplateVirtualList.getRecordLayoutComponent=4&amp;ui-force-components-controllers-relatedList.RelatedListContainerDataProvider.getRecords=1</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                    </elementProp>
                    <elementProp name="X-SFDC-Request-Id" elementType="Header">
                      <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                      <stringProp name="Header.value">231269000000743ac5</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1424 /aura?r=58&amp;TR1.TRS_CandidateCalendarCtrlCls.getAvailabilitiesOnload=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="message" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">message</stringProp>
                      <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;4382;a&quot;,&quot;descriptor&quot;:&quot;apex://TR1.TRS_CandidateCalendarCtrlCls/ACTION$getAvailabilitiesOnload&quot;,&quot;callingDescriptor&quot;:&quot;markup://TR1:TRS_CandidateCalendar&quot;,&quot;params&quot;:{&quot;contactId&quot;:&quot;0033F00000D3xEgQAJ&quot;},&quot;version&quot;:null}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.context" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.context</stringProp>
                      <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.pageURI" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.pageURI</stringProp>
                      <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">aura.token</stringProp>
                      <stringProp name="Argument.value">${token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/aura?r=58&amp;TR1.TRS_CandidateCalendarCtrlCls.getAvailabilitiesOnload=1</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                    </elementProp>
                    <elementProp name="X-SFDC-Request-Id" elementType="Header">
                      <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                      <stringProp name="Header.value">23390400000073a696</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1422 /aura?r=57&amp;ui-global-components-one-actionsManager.ActionsManager.handleAction=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="message" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">message</stringProp>
                      <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;4374;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.actionsManager.ActionsManagerController/ACTION$handleAction&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;context&quot;:&quot;RELATED_LIST&quot;,&quot;entityApiName&quot;:&quot;AttachedContentDocument&quot;,&quot;listNameOrId&quot;:&quot;AttachedContentDocuments&quot;,&quot;recordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;actionsRequestId&quot;:3}]}}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.context" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.context</stringProp>
                      <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.pageURI" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.pageURI</stringProp>
                      <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">aura.token</stringProp>
                      <stringProp name="Argument.value">${token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/aura?r=57&amp;ui-global-components-one-actionsManager.ActionsManager.handleAction=1</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                    </elementProp>
                    <elementProp name="X-SFDC-Request-Id" elementType="Header">
                      <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                      <stringProp name="Header.value">233790000000a63606</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1423 /aura?r=56&amp;ui-force-components-controllers-multiTemplateVirtualList.MultiTemplateVirtualList.getRecordLayoutComponent=4&amp;ui-force-components-controllers-relatedList.RelatedListContainerDataProvider.getRecords=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="message" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">message</stringProp>
                      <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;4317;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.relatedList.RelatedListContainerDataProviderController/ACTION$getRecords&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;relatedListApiNames&quot;:[&quot;TR1__Consents__r&quot;,&quot;TR1__Contact_Documents__r&quot;,&quot;AttachedContentNotes&quot;,&quot;AttachedContentDocuments&quot;],&quot;numRecordsToShow&quot;:10,&quot;showPartialCount&quot;:true},&quot;storable&quot;:true},{&quot;id&quot;:&quot;4326;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.multiTemplateVirtualList.MultiTemplateVirtualListController/ACTION$getRecordLayoutComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;inContextOfComponent&quot;:&quot;force:relatedListCard&quot;,&quot;listReference&quot;:{&quot;inContextOfRecordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;listViewIdOrName&quot;:&quot;TR1__Consents__r&quot;,&quot;entityKeyPrefixOrApiName&quot;:&quot;TR1__Candidate_Consents__c&quot;},&quot;layoutType&quot;:&quot;RELATED_LIST&quot;}},{&quot;id&quot;:&quot;4341;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.multiTemplateVirtualList.MultiTemplateVirtualListController/ACTION$getRecordLayoutComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;inContextOfComponent&quot;:&quot;force:relatedListCard&quot;,&quot;listReference&quot;:{&quot;inContextOfRecordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;listViewIdOrName&quot;:&quot;TR1__Contact_Documents__r&quot;,&quot;entityKeyPrefixOrApiName&quot;:&quot;TR1__ContactDocument__c&quot;},&quot;layoutType&quot;:&quot;RELATED_LIST&quot;}},{&quot;id&quot;:&quot;4356;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.multiTemplateVirtualList.MultiTemplateVirtualListController/ACTION$getRecordLayoutComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;inContextOfComponent&quot;:&quot;force:relatedListCard&quot;,&quot;listReference&quot;:{&quot;inContextOfRecordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;listViewIdOrName&quot;:&quot;AttachedContentNotes&quot;,&quot;entityKeyPrefixOrApiName&quot;:&quot;AttachedContentNote&quot;},&quot;layoutType&quot;:&quot;RELATED_LIST&quot;}},{&quot;id&quot;:&quot;4371;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.multiTemplateVirtualList.MultiTemplateVirtualListController/ACTION$getRecordLayoutComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;inContextOfComponent&quot;:&quot;force:relatedListCard&quot;,&quot;listReference&quot;:{&quot;inContextOfRecordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;listViewIdOrName&quot;:&quot;AttachedContentDocuments&quot;,&quot;entityKeyPrefixOrApiName&quot;:&quot;AttachedContentDocument&quot;},&quot;layoutType&quot;:&quot;RELATED_LIST&quot;}}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.context" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.context</stringProp>
                      <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.pageURI" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.pageURI</stringProp>
                      <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">aura.token</stringProp>
                      <stringProp name="Argument.value">${token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/aura?r=56&amp;ui-force-components-controllers-multiTemplateVirtualList.MultiTemplateVirtualList.getRecordLayoutComponent=4&amp;ui-force-components-controllers-relatedList.RelatedListContainerDataProvider.getRecords=1</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                    </elementProp>
                    <elementProp name="X-SFDC-Request-Id" elementType="Header">
                      <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                      <stringProp name="Header.value">233789000000a3672e</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1425 /aura?r=59&amp;TR1.TRS_CandidateCalendarCtrlCls.getCalendarDefaults=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="message" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">message</stringProp>
                      <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;4383;a&quot;,&quot;descriptor&quot;:&quot;apex://TR1.TRS_CandidateCalendarCtrlCls/ACTION$getCalendarDefaults&quot;,&quot;callingDescriptor&quot;:&quot;markup://TR1:TRS_CandidateCalendar&quot;,&quot;params&quot;:{},&quot;version&quot;:null}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.context" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.context</stringProp>
                      <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.pageURI" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">aura.pageURI</stringProp>
                      <stringProp name="Argument.value">/lightning/r/Contact/${data}view</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="aura.token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">aura.token</stringProp>
                      <stringProp name="Argument.value">${token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/aura?r=59&amp;TR1.TRS_CandidateCalendarCtrlCls.getCalendarDefaults=1</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                    </elementProp>
                    <elementProp name="X-SFDC-Request-Id" elementType="Header">
                      <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                      <stringProp name="Header.value">234665000000da48a2</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="4-8 sec" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">6000</stringProp>
              <stringProp name="RandomTimer.range">2000</stringProp>
            </GaussianRandomTimer>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="S1_04_Upload_0_${size}mb_resume" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1365 /aura?r=32&amp;ui-content-components-forceContent-fileUploadAction.FileUploadAction.getUploadConfig=1" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="message" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">message</stringProp>
                    <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1624;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.content.components.forceContent.fileUploadAction.FileUploadActionController/ACTION$getUploadConfig&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.context" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">aura.context</stringProp>
                    <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.pageURI" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">aura.pageURI</stringProp>
                    <stringProp name="Argument.value">/lightning/page/home</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.token" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">aura.token</stringProp>
                    <stringProp name="Argument.value">${token}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/aura?r=32&amp;ui-content-components-forceContent-fileUploadAction.FileUploadAction.getUploadConfig=1</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                  </elementProp>
                  <elementProp name="X-SFDC-Request-Id" elementType="Header">
                    <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                    <stringProp name="Header.value">113754000000909caa</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                  </elementProp>
                  <elementProp name="DNT" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1367 /aura?r=33&amp;ui-chatter-components-aura-components-forceChatter-chatter.PublisherFileAttachment.getFileUploaderParams=1" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="message" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">message</stringProp>
                    <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1670;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.chatter.components.aura.components.forceChatter.chatter.PublisherFileAttachmentController/ACTION$getFileUploaderParams&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.context" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">aura.context</stringProp>
                    <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.pageURI" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">aura.pageURI</stringProp>
                    <stringProp name="Argument.value">/lightning/page/home</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.token" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">aura.token</stringProp>
                    <stringProp name="Argument.value">${token}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/aura?r=33&amp;ui-chatter-components-aura-components-forceChatter-chatter.PublisherFileAttachment.getFileUploaderParams=1</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                  </elementProp>
                  <elementProp name="X-SFDC-Request-Id" elementType="Header">
                    <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                    <stringProp name="Header.value">114581000000b77cc0</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                  </elementProp>
                  <elementProp name="DNT" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="csrfToken" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">csrfToken</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;csrfToken&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1368 /chatter/handlers/file/body" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="${path}" elementType="HTTPFileArg">
                    <stringProp name="File.path">${path}</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                    <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.wordprocessingml.document</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="token" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">token</stringProp>
                    <stringProp name="Argument.value">${csrfToken}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="fromUITier" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">fromUITier</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="target" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">target</stringProp>
                    <stringProp name="Argument.value">ContentVersion</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/chatter/handlers/file/body</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                  </elementProp>
                  <elementProp name="DNT" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="content_body_id" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">content_body_id</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;content_body_id&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1369 /aura?r=34&amp;ui-chatter-components-aura-components-forceChatter-chatter.PublisherFileAttachment.saveContentVersion=1" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="message" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">message</stringProp>
                    <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1691;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.chatter.components.aura.components.forceChatter.chatter.PublisherFileAttachmentController/ACTION$saveContentVersion&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;title&quot;:&quot;${name}&quot;,&quot;firstPublishLocationId&quot;:&quot;${firstPublishLocationId}&quot;,&quot;pathOnClient&quot;:&quot;${doc}&quot;,&quot;contentBodyId&quot;:&quot;${content_body_id}&quot;}}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.context" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">aura.context</stringProp>
                    <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.pageURI" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">aura.pageURI</stringProp>
                    <stringProp name="Argument.value">/lightning/page/home</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="aura.token" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">aura.token</stringProp>
                    <stringProp name="Argument.value">${token}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/aura?r=34&amp;ui-chatter-components-aura-components-forceChatter-chatter.PublisherFileAttachment.saveContentVersion=1</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                  </elementProp>
                  <elementProp name="X-SFDC-Request-Id" elementType="Header">
                    <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                    <stringProp name="Header.value">1170790000005e133d</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                  </elementProp>
                  <elementProp name="DNT" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="docid" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">docid</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;docid&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="7-11 sec" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">9000</stringProp>
            <stringProp name="RandomTimer.range">2000</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S2_300skills_txt" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1370726934000</longProp>
        <longProp name="ThreadGroup.end_time">1370726934000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">.\Resume300.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">path,name,doc</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="S2_01_Open_ main_page" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1222 /" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host2}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="QCQQ" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">QCQQ</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;QCQQ&quot; value=&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="S2_02_login" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1276 /" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="un" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">un</stringProp>
                  <stringProp name="Argument.value">${login}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="width" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">width</stringProp>
                  <stringProp name="Argument.value">1920</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="height" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">height</stringProp>
                  <stringProp name="Argument.value">1080</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasRememberUn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">hasRememberUn</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="startURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">startURL</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="loginURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">loginURL</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="loginType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">loginType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="useSecure" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">useSecure</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="local" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">local</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="lt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">lt</stringProp>
                  <stringProp name="Argument.value">standard</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="qs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">qs</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">locale</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="oauth_token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">oauth_token</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="oauth_callback" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">oauth_callback</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="login" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">login</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serverid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">serverid</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="QCQQ" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">QCQQ</stringProp>
                  <stringProp name="Argument.value">${QCQQ}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="display" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">display</stringProp>
                  <stringProp name="Argument.value">page</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="Argument.value">${login}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ExtraLog" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ExtraLog</stringProp>
                  <stringProp name="Argument.value">%5B%7B%22width%22:1920%7D,%7B%22height%22:1080%7D,%7B%22language%22:%22ru-RU%22%7D,%7B%22offset%22:-3%7D,%7B%22scripts%22:%5B%7B%22size%22:249,%22summary%22:%22if%20(self%20==%20top)%20%7Bdocument.documentElement.style.v%22%7D,%7B%22size%22:586,%22summary%22:%22var%20SFDCSessionVars=%7B%5C%22server%5C%22:%5C%22https:%5C%5C/%5C%5C/test.sale%22%7D,%7B%22url%22:%22https://${host2}/jslibrary/SfdcSessionBase208.js%22%7D,%7B%22url%22:%22https://${host2}/jslibrary/LoginHint208.js%22%7D,%7B%22size%22:26,%22summary%22:%22LoginHint.hideLoginForm();%22%7D,%7B%22size%22:36,%22summary%22:%22LoginHint.getSavedIdentities(false);%22%7D,%7B%22url%22:%22https://${host2}/jslibrary/baselogin4.js%22%7D,%7B%22url%22:%22https://${host2}/jslibrary/LoginMarketingSurveyResponse.js%22%7D,%7B%22url%22:%22https://${host2}/marketing/survey/survey1/1380%22%7D,%7B%22url%22:%22https://${host2}/marketing/survey/survey4/1380%22%7D,%7B%22size%22:357,%22summary%22:%22function%20handleLogin()%7Bdocument.login.un.value=doc%22%7D%5D%7D,%7B%22scriptCount%22:11%7D,%7B%22iframes%22:%5B%22https://c.salesforce.com/login-messages/promos.html%22,%22https://test.salesforce.com/login/sessionserver212.html%22%5D%7D,%7B%22iframeCount%22:2%7D,%7B%22referrer%22:%22NO_REFERRER%22%7D%5D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Fingerprint" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">Fingerprint</stringProp>
                  <stringProp name="Argument.value">%7B%22platform%22:%22Win32%22,%22window%22:%221056x1936%22,%22screen%22:%221080x1920%22,%22color%22:%2224-24%22,%22timezoneOffset%22:%22-180%22,%22canvas%22:%22-344685604%22,%22sessionStorage%22:%22true%22,%22LocalStorage%22:%22true%22,%22indexDB%22:%22true%22,%22webSockets%22:%22true%22,%22plugins%22:%22%22,%22drm%22:1,%22languages%22:%5B%22ru-RU%22,%22ru%22,%22en-US%22,%22en%22%5D,%22fonts%22:%22%22,%22codecs%22:%22gMGIqqqgRqoCqH4=%22%7D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pw" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pw</stringProp>
                  <stringProp name="Argument.value">${password}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Login" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">Login</stringProp>
                  <stringProp name="Argument.value">Log In to Sandbox</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host2}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host2}/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cshc" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">cshc</stringProp>
              <stringProp name="RegexExtractor.regex">cshc=(.+?)&amp;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sid" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">sid</stringProp>
              <stringProp name="RegexExtractor.regex">sid=(.+?)&amp;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1280 /secur/contentDoor" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="startURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">startURL</stringProp>
                  <stringProp name="Argument.value">${protocol}%3A%2F%2Ftr-release2--RegTest.cs92.my.salesforce.com%2Fone%2Fone.app</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sid</stringProp>
                  <stringProp name="Argument.value">${sid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="skipRedirect" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">skipRedirect</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="lm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">lm</stringProp>
                  <stringProp name="Argument.value">eyJlbmMiOiJBMjU2R0NNIiwiYXVkIjoiMDBEM0YwMDAwMDA5UFBpIiwia2lkIjoie1widFwiOlwiMDBEM0YwMDAwMDA5UFBpXCIsXCJ2XCI6XCIwMkcxTjAwMDAwMFFiUEJcIixcImFcIjpcImNvbnRlbnRkb29ydXNlcnRyYW5zaWVudGtleWVuY3J5cHRcIixcInVcIjpcIjAwNTFOMDAwMDA1cGdwb1wifSIsImNyaXQiOlsiaWF0Il0sImlhdCI6MTU1OTAzMjM2OTMxOCwiZXhwIjowfQ%3D%3D..1u27AVIUbpZWrDKt.N18qpCk4LuT4CdLfto6z9Q%3D%3D.qFARJZI7VEbJ_MfcmvZaQQ%3D%3D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">tr-release2--regtest--c.cs92.content.force.com</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/secur/contentDoor</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host2}/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1283 /one/one.app" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host2}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/one/one.app</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://tr-release2--regtest--c.cs92.content.force.com/secur/contentDoor?startURL=${protocol}%3A%2F%2Ftr-release2--RegTest.cs92.my.salesforce.com%2Fone%2Fone.app&amp;sid=00D3F0000009PPi%21AQkAQKlvs0l7eoJZ4sKYyl8sJOKv0OQqU9HZDlm7yca9P2MHD3LcDBzoVGXKHBj2bjfTatYAyJSI5BssJJ48l4.n3uGXYc.5&amp;skipRedirect=1&amp;lm=eyJlbmMiOiJBMjU2R0NNIiwiYXVkIjoiMDBEM0YwMDAwMDA5UFBpIiwia2lkIjoie1widFwiOlwiMDBEM0YwMDAwMDA5UFBpXCIsXCJ2XCI6XCIwMkcxTjAwMDAwMFFiUEJcIixcImFcIjpcImNvbnRlbnRkb29ydXNlcnRyYW5zaWVudGtleWVuY3J5cHRcIixcInVcIjpcIjAwNTFOMDAwMDA1cGdwb1wifSIsImNyaXQiOlsiaWF0Il0sImlhdCI6MTU1OTAzMjM2OTMxOCwiZXhwIjowfQ%3D%3D..1u27AVIUbpZWrDKt.N18qpCk4LuT4CdLfto6z9Q%3D%3D.qFARJZI7VEbJ_MfcmvZaQQ%3D%3D</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="token" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">token</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;token&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="firstPublishLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">firstPublishLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1292 /aura?preloadActions" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">%7B%22mode%22%3A%22PROD%22%2C%22fwuid%22%3A%22pxtF0ZdGYF-z00XsmRUcGQ%22%2C%22loaded%22%3A%7B%22APPLICATION%40markup%3A%2F%2Fone%3Aone%22%3A%22Vel2xmipbW6B0F2Wfw22YA%22%7D%2C%22app%22%3A%22one%3Aone%22%7D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">%7B%22actions%22%3A%5B%7B%22descriptor%22%3A%22serviceComponent%3A%2F%2Fui.global.components.one.one.controller.OneController%2FACTION%24getCurrentApp%22%2C%22params%22%3A%7B%7D%2C%22id%22%3A%220%3Bp%22%7D%5D%7D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/aura?preloadActions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/one/one.app</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">id</stringProp>
              <stringProp name="RegexExtractor.regex">:{&quot;id&quot;:&quot;(.+?)&quot;,&quot;namespacePrefix&quot;:&quot;TR1&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1295 /file-asset/unnamed1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/file-asset/unnamed1</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/one/one.app</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/webp,*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1298 /aura?r=0&amp;aura.HostConfig.getConfigData=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;71;a&quot;,&quot;descriptor&quot;:&quot;aura://HostConfigController/ACTION$getConfigData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/one/one.app</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=0&amp;aura.HostConfig.getConfigData=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/one/one.app</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">55075000000ed96333</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="nonce" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">nonce</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;nonce&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1301 /aura?r=1&amp;ui-flexipage-components-page.FlexipageControllerV2.getPage=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;203;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.flexipage.components.page.FlexipageControllerV2/ACTION$getPage&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;flexiPageDeveloperName&quot;:&quot;TR1__Front_Office_UtilityBar1&quot;},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/one/one.app</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=1&amp;ui-flexipage-components-page.FlexipageControllerV2.getPage=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/one/one.app</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">553450000002de7715</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1303 /file-asset/unnamed1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="height" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">height</stringProp>
                  <stringProp name="Argument.value">80</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="width" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">width</stringProp>
                  <stringProp name="Argument.value">400</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/file-asset/unnamed1</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/l/%7B%22mode%22%3A%22PROD%22%2C%22app%22%3A%22one%3Aone%22%2C%22loaded%22%3A%7B%22APPLICATION%40markup%3A%2F%2Fone%3Aone%22%3A%22Vel2xmipbW6B0F2Wfw22YA%22%7D%2C%22styleContext%22%3A%7B%22c%22%3A%22firefox%22%2C%22x%22%3A%5B%22isDesktop%22%5D%2C%22tokens%22%3A%5B%22markup%3A%2F%2Fforce%3AsldsTokens%22%2C%22markup%3A%2F%2Fforce%3Abase%22%2C%22markup%3A%2F%2Fforce%3AoneSalesforceSkin%22%2C%22markup%3A%2F%2Fforce%3AlevelTwoDensity%22%2C%22markup%3A%2F%2Fforce%3AthemeTokens%22%2C%22markup%3A%2F%2Fforce%3AformFactorLarge%22%5D%2C%22tuid%22%3A%22ZHAX_KjJjptHBeEdFDO12g%22%2C%22cuid%22%3A-1432176237%7D%2C%22pathPrefix%22%3A%22%22%7D/app.css</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/webp,*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1305 /aura?r=3&amp;ui-force-components-controllers-platformStateManager.PlatformStateManager.getTabByNameAndApp=1&amp;ui-force-components-controllers-recordGlobalValueProvider.RecordGvp.getRecord=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;229;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getTabByNameAndApp&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;devName&quot;:&quot;standard-home&quot;,&quot;customApplicationId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;storable&quot;:true},{&quot;id&quot;:&quot;230;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$getRecord&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordDescriptor&quot;:&quot;0051N000005pgpoQAA.undefined.null.null.null.Name,Id.VIEW.false.null.null.null&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/one/one.app</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=3&amp;ui-force-components-controllers-platformStateManager.PlatformStateManager.getTabByNameAndApp=1&amp;ui-force-components-controllers-recordGlobalValueProvider.RecordGvp.getRecord=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/one/one.app</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">55610000000924ee0a</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1304 /aura?r=2&amp;ui-force-components-controllers-empApi.EmpApi.getEmpConfig=1&amp;ui-global-components-one-favorites.Favorites.getFavorites=1&amp;ui-global-components-one-header.Header.getSettings=1&amp;ui-global-components-one-systemMessage.SystemMessage.getSystemMessages=1&amp;ui-notifications-components-notifications-controller.Notifications.getInitializationValues=1&amp;ui-search-components-forcesearch-sgdp.PermsAndPrefsCache.getPermsAndPrefs=1&amp;ui-search-components-forcesearch-sgdp.ScopesCache.getScopeMaps=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;133;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.search.components.forcesearch.sgdp.ScopesCacheController/ACTION$getScopeMaps&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;scopeTypes&quot;:[&quot;SMART_SCOPE&quot;,&quot;PRIMARY&quot;,&quot;FILTER&quot;]},&quot;storable&quot;:true},{&quot;id&quot;:&quot;135;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.search.components.forcesearch.sgdp.PermsAndPrefsCacheController/ACTION$getPermsAndPrefs&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true},{&quot;id&quot;:&quot;147;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.systemMessage.SystemMessageController/ACTION$getSystemMessages&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;isExtensiveMessage&quot;:false}},{&quot;id&quot;:&quot;164;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.favorites.FavoritesController/ACTION$getFavorites&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true},{&quot;id&quot;:&quot;182;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.empApi.EmpApiController/ACTION$getEmpConfig&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}},{&quot;id&quot;:&quot;185;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.notifications.components.notifications.controller.NotificationsController/ACTION$getInitializationValues&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true},{&quot;id&quot;:&quot;195;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.header.HeaderController/ACTION$getSettings&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/one/one.app</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=2&amp;ui-force-components-controllers-empApi.EmpApi.getEmpConfig=1&amp;ui-global-components-one-favorites.Favorites.getFavorites=1&amp;ui-global-components-one-header.Header.getSettings=1&amp;ui-global-components-one-systemMessage.SystemMessage.getSystemMessages=1&amp;ui-notifications-components-notifications-controller.Notifications.getInitializationValues=1&amp;ui-search-components-forcesearch-sgdp.PermsAndPrefsCache.getPermsAndPrefs=1&amp;ui-search-components-forcesearch-sgdp.ScopesCache.getScopeMaps=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/one/one.app</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">5551400000038b2f10</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1309 /aura?r=5&amp;ui-home-impl-landing.Landing.populateTodayGVP=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;286;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.home.impl.landing.LandingController/ACTION$populateTodayGVP&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=5&amp;ui-home-impl-landing.Landing.populateTodayGVP=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">567250000008c04ddd</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1310 /aura?r=6&amp;ui-force-components-controllers-socialPhoto.SocialPhoto.resolvePhotos=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;390;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.socialPhoto.SocialPhotoController/ACTION$resolvePhotos&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;records&quot;:{&quot;0051N000005pgpoQAA&quot;:{}},&quot;refreshCached&quot;:false},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=6&amp;ui-force-components-controllers-socialPhoto.SocialPhoto.resolvePhotos=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">570560000005eeeb5d</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1308 /aura?r=4&amp;ui-flexipage-components-page.FlexipageControllerV2.getPage=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;269;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.flexipage.components.page.FlexipageControllerV2/ACTION$getPage&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;flexiPageDeveloperName&quot;:&quot;Home_Page_Default&quot;},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=4&amp;ui-flexipage-components-page.FlexipageControllerV2.getPage=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">56705000000a77506a</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1317 /aura?r=7&amp;aura.Component.reportDeprecationUsages=1&amp;ui-global-components-one-systemMessage.SystemMessage.getSystemMessages=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;395;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$reportDeprecationUsages&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;usages&quot;:{&quot;AuraComponentService.newComponentDeprecated&quot;:[&quot;flexipage:runtimeComponent&quot;]}}},{&quot;id&quot;:&quot;471;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.systemMessage.SystemMessageController/ACTION$getSystemMessages&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;isExtensiveMessage&quot;:true}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=7&amp;aura.Component.reportDeprecationUsages=1&amp;ui-global-components-one-systemMessage.SystemMessage.getSystemMessages=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">6192400000083cfc8c</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1318 /aura?r=8&amp;ui-today-impl-components-today-taskContainer.TodayTasksCardDataManager.getTasks=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;486;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.today.impl.components.today.taskContainer.TodayTasksCardDataManagerController/ACTION$getTasks&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;limit&quot;:5,&quot;filterType&quot;:&quot;MY_DAY&quot;},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=8&amp;ui-today-impl-components-today-taskContainer.TodayTasksCardDataManager.getTasks=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">65822000000729497f</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1319 /aura?r=9&amp;aura.Component.getComponent=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;489;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$getComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;name&quot;:&quot;markup://force:listTemplate&quot;,&quot;attributes&quot;:{&quot;recordExpression&quot;:&quot;item&quot;,&quot;entityName&quot;:&quot;Task&quot;,&quot;mode&quot;:&quot;VIEW&quot;,&quot;type&quot;:&quot;COMPACT&quot;,&quot;inContextOfComponent&quot;:&quot;runtime_sales_activities:todayTaskContainer&quot;,&quot;actions&quot;:[]}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=9&amp;aura.Component.getComponent=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">65831000000ffec684</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1320 /aura?r=10&amp;ui-force-components-controllers-recordLayoutBroker.RecordLayoutBroker.getLayout=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;521;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordLayoutBroker.RecordLayoutBrokerController/ACTION$getLayout&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;entityName&quot;:&quot;Event&quot;,&quot;mode&quot;:&quot;VIEW&quot;,&quot;type&quot;:&quot;COMPACT&quot;,&quot;inContextOfComponent&quot;:&quot;home:eventContainer&quot;,&quot;pageSize&quot;:-1,&quot;offset&quot;:0}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=10&amp;ui-force-components-controllers-recordLayoutBroker.RecordLayoutBroker.getLayout=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">6588900000013030b5</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1321 /aura?r=11&amp;ui-calendar-impl-controllers.SFDCCalendarDataProvider.getTodayEvents=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;528;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.calendar.impl.controllers.SFDCCalendarDataProviderController/ACTION$getTodayEvents&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;limit&quot;:5},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=11&amp;ui-calendar-impl-controllers.SFDCCalendarDataProvider.getTodayEvents=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">659210000008b83520</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1322 /aura?r=12&amp;ui-wits-impl-components-news.NewsPanel.getNewsMetaData=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;546;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.wits.impl.components.news.NewsPanelController/ACTION$getNewsMetaData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=12&amp;ui-wits-impl-components-news.NewsPanel.getNewsMetaData=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">6593600000031c5b50</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1323 /aura?r=13&amp;ui-flexipage-components-reportchart.ReportChart.getReportInfo=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;554;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.flexipage.components.reportchart.ReportChartController/ACTION$getReportInfo&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;reportName&quot;:&quot;TR1__My_Temp_GP_Trend&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=13&amp;ui-flexipage-components-reportchart.ReportChart.getReportInfo=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">65946000000f087630</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1324 /aura?r=14&amp;aura.Component.reportDeprecationUsages=2&amp;ui-flexipage-components-filterlistcard.FilterListCard.getFilterLabel=2&amp;ui-flexipage-components-reportchart.ReportChart.getReportInfo=3" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;508;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$reportDeprecationUsages&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;usages&quot;:{&quot;AuraComponentService.newComponentDeprecated&quot;:[&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;]}}},{&quot;id&quot;:&quot;562;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.flexipage.components.reportchart.ReportChartController/ACTION$getReportInfo&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;reportName&quot;:&quot;TR1__My_Quarterly_Calls&quot;}},{&quot;id&quot;:&quot;570;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.flexipage.components.reportchart.ReportChartController/ACTION$getReportInfo&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;reportName&quot;:&quot;TR1__Submittals_This_Quarter&quot;}},{&quot;id&quot;:&quot;573;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$reportDeprecationUsages&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;usages&quot;:{&quot;AuraComponentService.newComponentDeprecated&quot;:[&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;]}}},{&quot;id&quot;:&quot;579;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.flexipage.components.reportchart.ReportChartController/ACTION$getReportInfo&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;reportName&quot;:&quot;TR1__Client_Interviews_This_Quarter&quot;}},{&quot;id&quot;:&quot;584;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.flexipage.components.filterlistcard.FilterListCardController/ACTION$getFilterLabel&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;entityName&quot;:&quot;TR1__Closing_Report__c&quot;,&quot;filterName&quot;:&quot;TR1__My_Active_Assignments&quot;}},{&quot;id&quot;:&quot;589;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.flexipage.components.filterlistcard.FilterListCardController/ACTION$getFilterLabel&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;entityName&quot;:&quot;TR1__Closing_Report__c&quot;,&quot;filterName&quot;:&quot;TR1__Assignments_Ending_in_30_Days&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=14&amp;aura.Component.reportDeprecationUsages=2&amp;ui-flexipage-components-filterlistcard.FilterListCard.getFilterLabel=2&amp;ui-flexipage-components-reportchart.ReportChart.getReportInfo=3</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">66598000000a8c2e87</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1327 /aura?r=15&amp;ui-global-components-one-actionsManager.ActionsManager.handleAction=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;597;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.actionsManager.ActionsManagerController/ACTION$handleAction&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;context&quot;:&quot;GLOBAL&quot;,&quot;record&quot;:null,&quot;section&quot;:&quot;COLLABORATE_COMPOSER&quot;,&quot;size&quot;:3,&quot;width&quot;:&quot;SMALL&quot;,&quot;maxWidth&quot;:-1,&quot;actionTypes&quot;:[],&quot;bulkedAction&quot;:false,&quot;actionsRequestId&quot;:0}]}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=15&amp;ui-global-components-one-actionsManager.ActionsManager.handleAction=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">666600000004b0c8d9</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1329 /aura?r=16&amp;ui-chatter-components-aura-components-forceChatter-chatter.Feed.getModel=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;613;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.chatter.components.aura.components.forceChatter.chatter.FeedController/ACTION$getModel&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;type&quot;:&quot;BOOKMARKS&quot;,&quot;subjectId&quot;:&quot;undefined&quot;,&quot;showFeedItemActions&quot;:true,&quot;feedDesign&quot;:&quot;DEFAULT&quot;,&quot;firstPageSize&quot;:4,&quot;hasFeedSwitcher&quot;:false,&quot;showFilteringMenuGroup&quot;:false,&quot;includeRecordActivitiesInFeed&quot;:true,&quot;retrieveOnlyTopLevelThreadedComments&quot;:false}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=16&amp;ui-chatter-components-aura-components-forceChatter-chatter.Feed.getModel=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">66702000000aae79e5</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1331 /aura?r=18&amp;ui-wits-impl-components-news.NewsPanel.notifyError=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;691;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.wits.impl.components.news.NewsPanelController/ACTION$notifyError&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;errorMessage&quot;:&quot;Request to ${protocol}://api.bluetail.salesforce.com/v10/insights/query failed with  status code 0&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=18&amp;ui-wits-impl-components-news.NewsPanel.notifyError=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">668930000004a93b80</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1330 /aura?r=17&amp;ui-analytics-platform-embeddedChart.EmbeddedReportChart.loadChart=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;690;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.analytics.platform.embeddedChart.EmbeddedReportChartController/ACTION$loadChart&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;reportIdOrDeveloperName&quot;:&quot;00O1N000007jedjUAA&quot;,&quot;embeddedChartInput&quot;:{&quot;componentId&quot;:&quot;1:554;a&quot;,&quot;filter&quot;:null,&quot;showTitle&quot;:false,&quot;size&quot;:&quot;auto&quot;,&quot;widthOverrides&quot;:null,&quot;isInteractive&quot;:false,&quot;cacheAge&quot;:86400000,&quot;origin&quot;:&quot;earc&quot;,&quot;isInS1Context&quot;:true,&quot;renderEclairChart&quot;:true}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=17&amp;ui-analytics-platform-embeddedChart.EmbeddedReportChart.loadChart=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">66837000000407f092</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1334 /aura?r=19&amp;ui-force-components-controllers-lists-filterList.FilterList.getFilterListConfig=1&amp;ui-force-components-controllers-lists-listViewDataManager.ListViewDataManager.getItems=2&amp;ui-force-components-controllers-recordLayoutBroker.RecordLayoutBroker.getLayout=2" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;889;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordLayoutBroker.RecordLayoutBrokerController/ACTION$getLayout&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;entityName&quot;:&quot;TR1__Closing_Report__c&quot;,&quot;mode&quot;:&quot;VIEW&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;layoutOverride&quot;:&quot;TR1__My_Active_Assignments&quot;,&quot;inContextOfComponent&quot;:&quot;force:filterList&quot;,&quot;pageSize&quot;:-1,&quot;offset&quot;:0}},{&quot;id&quot;:&quot;895;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.lists.listViewDataManager.ListViewDataManagerController/ACTION$getItems&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;filterName&quot;:&quot;TR1__My_Active_Assignments&quot;,&quot;entityName&quot;:&quot;TR1__Closing_Report__c&quot;,&quot;pageSize&quot;:10,&quot;layoutType&quot;:&quot;LIST&quot;,&quot;sortBy&quot;:null,&quot;getCount&quot;:false,&quot;enableRowActions&quot;:false,&quot;offset&quot;:0},&quot;storable&quot;:true},{&quot;id&quot;:&quot;899;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.lists.filterList.FilterListController/ACTION$getFilterListConfig&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;entityName&quot;:&quot;TR1__Closing_Report__c&quot;},&quot;storable&quot;:true},{&quot;id&quot;:&quot;948;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordLayoutBroker.RecordLayoutBrokerController/ACTION$getLayout&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;entityName&quot;:&quot;TR1__Closing_Report__c&quot;,&quot;mode&quot;:&quot;VIEW&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;layoutOverride&quot;:&quot;TR1__Assignments_Ending_in_30_Days&quot;,&quot;inContextOfComponent&quot;:&quot;force:filterList&quot;,&quot;pageSize&quot;:-1,&quot;offset&quot;:0}},{&quot;id&quot;:&quot;954;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.lists.listViewDataManager.ListViewDataManagerController/ACTION$getItems&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;filterName&quot;:&quot;TR1__Assignments_Ending_in_30_Days&quot;,&quot;entityName&quot;:&quot;TR1__Closing_Report__c&quot;,&quot;pageSize&quot;:10,&quot;layoutType&quot;:&quot;LIST&quot;,&quot;sortBy&quot;:null,&quot;getCount&quot;:false,&quot;enableRowActions&quot;:false,&quot;offset&quot;:0},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=19&amp;ui-force-components-controllers-lists-filterList.FilterList.getFilterListConfig=1&amp;ui-force-components-controllers-lists-listViewDataManager.ListViewDataManager.getItems=2&amp;ui-force-components-controllers-recordLayoutBroker.RecordLayoutBroker.getLayout=2</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">67816000000abbcdb9</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1336 /aura?r=20&amp;ui-analytics-platform-embeddedChart.EmbeddedReportChart.loadChart=3" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;972;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.analytics.platform.embeddedChart.EmbeddedReportChartController/ACTION$loadChart&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;reportIdOrDeveloperName&quot;:&quot;00O1N000007jedmUAA&quot;,&quot;embeddedChartInput&quot;:{&quot;componentId&quot;:&quot;1:562;a&quot;,&quot;filter&quot;:null,&quot;showTitle&quot;:false,&quot;size&quot;:&quot;auto&quot;,&quot;widthOverrides&quot;:null,&quot;isInteractive&quot;:false,&quot;cacheAge&quot;:86400000,&quot;origin&quot;:&quot;earc&quot;,&quot;isInS1Context&quot;:true,&quot;renderEclairChart&quot;:true}}},{&quot;id&quot;:&quot;973;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.analytics.platform.embeddedChart.EmbeddedReportChartController/ACTION$loadChart&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;reportIdOrDeveloperName&quot;:&quot;00O1N000007jedlUAA&quot;,&quot;embeddedChartInput&quot;:{&quot;componentId&quot;:&quot;1:570;a&quot;,&quot;filter&quot;:null,&quot;showTitle&quot;:false,&quot;size&quot;:&quot;auto&quot;,&quot;widthOverrides&quot;:null,&quot;isInteractive&quot;:false,&quot;cacheAge&quot;:86400000,&quot;origin&quot;:&quot;earc&quot;,&quot;isInS1Context&quot;:true,&quot;renderEclairChart&quot;:true}}},{&quot;id&quot;:&quot;974;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.analytics.platform.embeddedChart.EmbeddedReportChartController/ACTION$loadChart&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;reportIdOrDeveloperName&quot;:&quot;00O1N000007jednUAA&quot;,&quot;embeddedChartInput&quot;:{&quot;componentId&quot;:&quot;1:579;a&quot;,&quot;filter&quot;:null,&quot;showTitle&quot;:false,&quot;size&quot;:&quot;auto&quot;,&quot;widthOverrides&quot;:null,&quot;isInteractive&quot;:false,&quot;cacheAge&quot;:86400000,&quot;origin&quot;:&quot;earc&quot;,&quot;isInS1Context&quot;:true,&quot;renderEclairChart&quot;:true}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=20&amp;ui-analytics-platform-embeddedChart.EmbeddedReportChart.loadChart=3</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">6788500000003898e8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1344 /aura?r=21&amp;ui-force-components-controllers-defenseHook.DefenseHook.getDefenseHook=1&amp;ui-force-components-controllers-hostConfig.HostConfig.getConfigData=1&amp;ui-global-components-one-globalCreate.GlobalCreate.getDockableActionsList=1&amp;ui-global-components-one-userProfileCard.UserProfileCard.loadProfileCardInfo=1&amp;ui-identity-components-sessiontimeoutwarn.SessionTimeoutWarn.getSessionTimeoutConfig=1&amp;ui-notifications-components-notifications-controller.Notifications.getNotifications=1&amp;ui-rtc-components-aura-components.RtcDiscoveryBanner.getConfig=1&amp;ui-support-components-crossFrameApiManager.CrossFrameApiManager.getIsLightningOpenCtiUser=1&amp;ui-walkthroughs-components-controllers.Player.willDisplayWalkthroughInternalTool=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1379;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.defenseHook.DefenseHookController/ACTION$getDefenseHook&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}},{&quot;id&quot;:&quot;1380;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.identity.components.sessiontimeoutwarn.SessionTimeoutWarnController/ACTION$getSessionTimeoutConfig&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}},{&quot;id&quot;:&quot;1382;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.support.components.crossFrameApiManager.CrossFrameApiManagerController/ACTION$getIsLightningOpenCtiUser&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true},{&quot;id&quot;:&quot;1383;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.rtc.components.aura.components.RtcDiscoveryBannerController/ACTION$getConfig&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true},{&quot;id&quot;:&quot;1385;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.hostConfig.HostConfigController/ACTION$getConfigData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true},{&quot;id&quot;:&quot;1409;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.globalCreate.GlobalCreateController/ACTION$getDockableActionsList&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}},{&quot;id&quot;:&quot;1410;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.notifications.components.notifications.controller.NotificationsController/ACTION$getNotifications&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;currentLastActivity&quot;:&quot;1970-01-01T00:00:00.000Z&quot;}},{&quot;id&quot;:&quot;1414;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.userProfileCard.UserProfileCardController/ACTION$loadProfileCardInfo&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true},{&quot;id&quot;:&quot;1417;a&quot;,&quot;descriptor&quot;:&quot;java://ui.walkthroughs.components.controllers.PlayerController/ACTION$willDisplayWalkthroughInternalTool&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=21&amp;ui-force-components-controllers-defenseHook.DefenseHook.getDefenseHook=1&amp;ui-force-components-controllers-hostConfig.HostConfig.getConfigData=1&amp;ui-global-components-one-globalCreate.GlobalCreate.getDockableActionsList=1&amp;ui-global-components-one-userProfileCard.UserProfileCard.loadProfileCardInfo=1&amp;ui-identity-components-sessiontimeoutwarn.SessionTimeoutWarn.getSessionTimeoutConfig=1&amp;ui-notifications-components-notifications-controller.Notifications.getNotifications=1&amp;ui-rtc-components-aura-components.RtcDiscoveryBanner.getConfig=1&amp;ui-support-components-crossFrameApiManager.CrossFrameApiManager.getIsLightningOpenCtiUser=1&amp;ui-walkthroughs-components-controllers.Player.willDisplayWalkthroughInternalTool=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">70100000000c575be7</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1346 /aura?r=25&amp;ui-setup-components-aura-components-gear.Gear.getPermissions=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1420;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.setup.components.aura.components.gear.GearController/ACTION$getPermissions&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=25&amp;ui-setup-components-aura-components-gear.Gear.getPermissions=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">70105000000c091ac0</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1342 /aura?r=22&amp;ui-instrumentation-components-beacon.InstrumentationBeacon.sendData=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1378;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.instrumentation.components.beacon.InstrumentationBeaconController/ACTION$sendData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:bootstrap\&quot;,\&quot;ts\&quot;:0,\&quot;duration\&quot;:55492,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (2)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55427,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:11},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (3)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55448,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (4)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55455,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (5)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55458,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;navContainer:render\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55415,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;navContainer:afterRender\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55460,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;duration\&quot;:0}],\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://laf:standardLayoutContainer\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:280},{\&quot;name\&quot;:\&quot;markup://ui:label\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:3}]},\&quot;owner\&quot;:\&quot;laf:appLayoutHost\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;bootstrap\&quot;,\&quot;eventSource\&quot;:\&quot;lightning\&quot;,\&quot;attributes\&quot;:{\&quot;cache\&quot;:{\&quot;appCache\&quot;:false,\&quot;gvps\&quot;:false,\&quot;lightningLayout\&quot;:true},\&quot;execBootstrapJs\&quot;:8332,\&quot;execInlineJs\&quot;:8332,\&quot;appCssLoading\&quot;:null,\&quot;visibilityStateStart\&quot;:\&quot;visible\&quot;,\&quot;execAuraJs\&quot;:14970,\&quot;runInitAsync\&quot;:14974,\&quot;appCssLoadedCallback\&quot;:null,\&quot;runAfterContextCreated\&quot;:20677,\&quot;runAfterInitDefsReady\&quot;:54907,\&quot;runAfterBootstrapReady\&quot;:54908,\&quot;AuraFrameworkEPT\&quot;:54909,\&quot;appCreationStart\&quot;:54928,\&quot;appCreationEnd\&quot;:55067,\&quot;appRenderingStart\&quot;:55067,\&quot;appRenderingEnd\&quot;:55073,\&quot;bootstrapEPT\&quot;:55074,\&quot;cdnEnabled\&quot;:false,\&quot;mode\&quot;:\&quot;PROD\&quot;,\&quot;pageStartTime\&quot;:1559032372042,\&quot;timing\&quot;:{\&quot;navigationStart\&quot;:1559032372042,\&quot;fetchStart\&quot;:1559032375076,\&quot;readyStart\&quot;:3034,\&quot;dnsStart\&quot;:1559032375077,\&quot;dnsEnd\&quot;:1559032375077,\&quot;lookupDomainTime\&quot;:0,\&quot;connectStart\&quot;:1559032375077,\&quot;connectEnd\&quot;:1559032375077,\&quot;connectTime\&quot;:0,\&quot;requestStart\&quot;:1559032375077,\&quot;responseStart\&quot;:1559032375077,\&quot;responseEnd\&quot;:1559032380354,\&quot;requestTime\&quot;:5277,\&quot;domLoading\&quot;:1559032380354,\&quot;domInteractive\&quot;:1559032427125,\&quot;initDomTreeTime\&quot;:46771,\&quot;contentLoadStart\&quot;:1559032427126,\&quot;contentLoadEnd\&quot;:1559032427127,\&quot;domComplete\&quot;:1559032427127,\&quot;domReadyTime\&quot;:2,\&quot;loadEventStart\&quot;:1559032427127,\&quot;loadEventEnd\&quot;:1559032427127,\&quot;loadEventTime\&quot;:0,\&quot;loadTime\&quot;:52051,\&quot;unloadEventStart\&quot;:0,\&quot;unloadEventEnd\&quot;:0,\&quot;unloadEventTime\&quot;:0,\&quot;appCacheTime\&quot;:1,\&quot;redirectTime\&quot;:0},\&quot;type\&quot;:\&quot;COLD\&quot;,\&quot;allRequests\&quot;:[{\&quot;name\&quot;:\&quot;${protocol}://${host}/one/one.app\&quot;,\&quot;initiatorType\&quot;:\&quot;navigation\&quot;,\&quot;duration\&quot;:3035,\&quot;startTime\&quot;:0,\&quot;fetchStart\&quot;:3033,\&quot;requestStart\&quot;:3035,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:3033,\&quot;ttfb\&quot;:3035,\&quot;transfer\&quot;:0,\&quot;transferSize\&quot;:207748,\&quot;encodedBodySize\&quot;:205823,\&quot;decodedBodySize\&quot;:205823},{\&quot;name\&quot;:\&quot;${protocol}://${host}/l/%7B%22mode%22%3A%22PROD%22%2C%22app%22%3A%22one%3Aone%22%2C%22fwuid%22%3A%22pxtF0ZdGYF-z00XsmRUcGQ%22%2C%22loaded%22%3A%7B%22APPLICATION%40markup%3A%2F%2Fone%3Aone%22%3A%22Vel2xmipbW6B0F2Wfw22YA%22%7D%2C%22pathPrefix%22%3A%22%22%2C%22ls%22%3A1%7D/resources.js?version=1558443552000\&quot;,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:3850,\&quot;startTime\&quot;:8318,\&quot;fetchStart\&quot;:8318,\&quot;requestStart\&quot;:8330,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:12,\&quot;transfer\&quot;:3838,\&quot;transferSize\&quot;:9069,\&quot;encodedBodySize\&quot;:8153,\&quot;decodedBodySize\&quot;:8153,\&quot;serverTime\&quot;:19},{\&quot;name\&quot;:\&quot;appcore.js\&quot;,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:37614,\&quot;startTime\&quot;:8319,\&quot;fetchStart\&quot;:8319,\&quot;requestStart\&quot;:8332,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:1,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:56,\&quot;transfer\&quot;:37558,\&quot;transferSize\&quot;:2382443,\&quot;encodedBodySize\&quot;:2381519,\&quot;decodedBodySize\&quot;:2381519},{\&quot;name\&quot;:\&quot;app.js\&quot;,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:46546,\&quot;startTime\&quot;:8319,\&quot;fetchStart\&quot;:8319,\&quot;requestStart\&quot;:8375,\&quot;dns\&quot;:43,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:131,\&quot;transfer\&quot;:46415,\&quot;transferSize\&quot;:7566124,\&quot;encodedBodySize\&quot;:7565200,\&quot;decodedBodySize\&quot;:7565200},{\&quot;name\&quot;:\&quot;/aura_\&quot;,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:6603,\&quot;startTime\&quot;:8319,\&quot;fetchStart\&quot;:8319,\&quot;requestStart\&quot;:8330,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:56,\&quot;transfer\&quot;:6547,\&quot;transferSize\&quot;:628385,\&quot;encodedBodySize\&quot;:627462,\&quot;decodedBodySize\&quot;:627462},{\&quot;name\&quot;:\&quot;app.css\&quot;,\&quot;initiatorType\&quot;:\&quot;link\&quot;,\&quot;duration\&quot;:12300,\&quot;startTime\&quot;:8335,\&quot;fetchStart\&quot;:8335,\&quot;requestStart\&quot;:8450,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:75,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:152,\&quot;transfer\&quot;:12148,\&quot;transferSize\&quot;:1161503,\&quot;encodedBodySize\&quot;:1160587,\&quot;decodedBodySize\&quot;:1160587},{\&quot;name\&quot;:\&quot;${protocol}://${host}/aura?preloadActions\&quot;,\&quot;initiatorType\&quot;:\&quot;xmlhttprequest\&quot;,\&quot;duration\&quot;:2832,\&quot;startTime\&quot;:8335,\&quot;fetchStart\&quot;:8335,\&quot;requestStart\&quot;:8450,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:74,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:115,\&quot;transfer\&quot;:2717,\&quot;transferSize\&quot;:99615,\&quot;encodedBodySize\&quot;:97530,\&quot;decodedBodySize\&quot;:97530,\&quot;serverTime\&quot;:228},{\&quot;name\&quot;:\&quot;${protocol}://${host}/file-asset/unnamed1?v=1\&quot;,\&quot;initiatorType\&quot;:\&quot;css\&quot;,\&quot;duration\&quot;:13038,\&quot;startTime\&quot;:8340,\&quot;fetchStart\&quot;:21378,\&quot;requestStart\&quot;:0,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:-8340,\&quot;transfer\&quot;:21378,\&quot;transferSize\&quot;:0,\&quot;encodedBodySize\&quot;:0,\&quot;decodedBodySize\&quot;:0},{\&quot;name\&quot;:\&quot;${protocol}://${host}/img/one/favicon-152.png\&quot;,\&quot;initiatorType\&quot;:\&quot;other\&quot;,\&quot;duration\&quot;:14614,\&quot;startTime\&quot;:8346,\&quot;fetchStart\&quot;:8346,\&quot;requestStart\&quot;:20636,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:1,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:12291,\&quot;transfer\&quot;:2323,\&quot;transferSize\&quot;:13820,\&quot;encodedBodySize\&quot;:12929,\&quot;decodedBodySize\&quot;:12929},{\&quot;name\&quot;:\&quot;${protocol}://${host}/img/one/favicon.ico\&quot;,\&quot;initiatorType\&quot;:\&quot;other\&quot;,\&quot;duration\&quot;:14314,\&quot;startTime\&quot;:8347,\&quot;fetchStart\&quot;:8347,\&quot;requestStart\&quot;:20636,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:12290,\&quot;transfer\&quot;:2024,\&quot;transferSize\&quot;:6322,\&quot;encodedBodySize\&quot;:5430,\&quot;decodedBodySize\&quot;:5430},{\&quot;name\&quot;:\&quot;${protocol}://${host}/_slds/fonts/v2.3.0/SalesforceSans-Regular.woff2\&quot;,\&quot;initiatorType\&quot;:\&quot;other\&quot;,\&quot;duration\&quot;:4266,\&quot;startTime\&quot;:20694,\&quot;fetchStart\&quot;:20694,\&quot;requestStart\&quot;:20754,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:60,\&quot;transfer\&quot;:4206,\&quot;transferSize\&quot;:28577,\&quot;encodedBodySize\&quot;:27684,\&quot;decodedBodySize\&quot;:27684}],\&quot;requestAppCoreJs\&quot;:{\&quot;name\&quot;:\&quot;appcore.js\&quot;,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:37614,\&quot;startTime\&quot;:8319,\&quot;fetchStart\&quot;:8319,\&quot;requestStart\&quot;:8332,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:1,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:56,\&quot;transfer\&quot;:37558,\&quot;transferSize\&quot;:2382443,\&quot;encodedBodySize\&quot;:2381519,\&quot;decodedBodySize\&quot;:2381519},\&quot;requestAppJs\&quot;:{\&quot;name\&quot;:\&quot;app.js\&quot;,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:46546,\&quot;startTime\&quot;:8319,\&quot;fetchStart\&quot;:8319,\&quot;requestStart\&quot;:8375,\&quot;dns\&quot;:43,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:131,\&quot;transfer\&quot;:46415,\&quot;transferSize\&quot;:7566124,\&quot;encodedBodySize\&quot;:7565200,\&quot;decodedBodySize\&quot;:7565200},\&quot;requestAuraJs\&quot;:{\&quot;name\&quot;:\&quot;/aura_\&quot;,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:6603,\&quot;startTime\&quot;:8319,\&quot;fetchStart\&quot;:8319,\&quot;requestStart\&quot;:8330,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:56,\&quot;transfer\&quot;:6547,\&quot;transferSize\&quot;:628385,\&quot;encodedBodySize\&quot;:627462,\&quot;decodedBodySize\&quot;:627462},\&quot;requestAppCss\&quot;:{\&quot;name\&quot;:\&quot;app.css\&quot;,\&quot;initiatorType\&quot;:\&quot;link\&quot;,\&quot;duration\&quot;:12300,\&quot;startTime\&quot;:8335,\&quot;fetchStart\&quot;:8335,\&quot;requestStart\&quot;:8450,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:75,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:152,\&quot;transfer\&quot;:12148,\&quot;transferSize\&quot;:1161503,\&quot;encodedBodySize\&quot;:1160587,\&quot;decodedBodySize\&quot;:1160587},\&quot;requestLightningLayout\&quot;:{\&quot;name\&quot;:\&quot;${protocol}://${host}/aura?preloadActions\&quot;,\&quot;initiatorType\&quot;:\&quot;xmlhttprequest\&quot;,\&quot;duration\&quot;:2832,\&quot;startTime\&quot;:8335,\&quot;fetchStart\&quot;:8335,\&quot;requestStart\&quot;:8450,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:74,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:115,\&quot;transfer\&quot;:2717,\&quot;transferSize\&quot;:99615,\&quot;encodedBodySize\&quot;:97530,\&quot;decodedBodySize\&quot;:97530,\&quot;serverTime\&quot;:228},\&quot;lightningLayoutCreationStart\&quot;:55094,\&quot;lightningLayoutCreationEnd\&quot;:55376,\&quot;lightningLayoutRenderingStart\&quot;:55377,\&quot;lightningLayoutRenderingEnd\&quot;:55489,\&quot;visibilityStateEnd\&quot;:\&quot;visible\&quot;,\&quot;lightningEPT\&quot;:55492,\&quot;referer\&quot;:\&quot;Login\&quot;,\&quot;appRootRequestId\&quot;:\&quot;63a3c9a72593fa63\&quot;,\&quot;navbarCPUTime\&quot;:0,\&quot;appType\&quot;:\&quot;Standard\&quot;,\&quot;viewportHeight\&quot;:966,\&quot;viewportWidth\&quot;:1920,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:55532,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-click\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:1,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;global-nav-container-load\&quot;,\&quot;scope\&quot;:\&quot;standard-layout-container\&quot;,\&quot;context\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appNavType\&quot;:\&quot;Standard\&quot;,\&quot;appUiType\&quot;:\&quot;Lightning\&quot;,\&quot;tabId\&quot;:\&quot;0Qk1N000000CeVwSAK\&quot;,\&quot;tabContentType\&quot;:\&quot;home\&quot;,\&quot;tabIsCustom\&quot;:false,\&quot;tabIsGranular\&quot;:false,\&quot;numberOfTabs\&quot;:24,\&quot;numberOfTopLevelTabs\&quot;:24,\&quot;numberOfGranularTabs\&quot;:0,\&quot;numberOfUserAddedTabs\&quot;:9,\&quot;isPersonalized\&quot;:true}},\&quot;page\&quot;:{\&quot;entity\&quot;:\&quot;unknown\&quot;,\&quot;entityType\&quot;:\&quot;unknown\&quot;,\&quot;context\&quot;:\&quot;unknown\&quot;}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:55493,\&quot;duration\&quot;:322,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (12)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55536,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:61},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55598,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:4},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55602,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;navContainer:create\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55526,\&quot;context\&quot;:{\&quot;itemCount\&quot;:24},\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;duration\&quot;:5}],\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://one:appnav\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:0},{\&quot;name\&quot;:\&quot;markup://force:recordGlobalValueProvider\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:0}],\&quot;force_record\&quot;:[{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;retrieveDraftsFromOldStorage.55519\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55519,\&quot;context\&quot;:null},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;cacheLookup.55607\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordKey\&quot;:\&quot;$Record.0051N000005pgpoQAA.undefined.null.null.null.Name,Id.VIEW.false.null.null.null\&quot;,\&quot;keyPrefix\&quot;:\&quot;005\&quot;,\&quot;cacheHit\&quot;:false},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;recordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecord\&quot;,\&quot;parentCmpName\&quot;:\&quot;oneUserProfileCardTrigger\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;335:0;p\&quot;,\&quot;recordId\&quot;:\&quot;0051N000005pgpoQAA\&quot;,\&quot;requestConfig\&quot;:\&quot;0051N000005pgpoQAA, layoutType=undefined, layoutOverride=undefined, parentId=undefined, fields=Name,Id, optionalFields=null, mode=VIEW, updateMru=false, noServer=false\&quot;,\&quot;hitMissType\&quot;:\&quot;MISS\&quot;,\&quot;recordAgeMs\&quot;:null}}]},\&quot;owner\&quot;:\&quot;laf:appLayoutHost\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;loadClientLibrary\&quot;,\&quot;attributes\&quot;:{\&quot;library\&quot;:\&quot;canvasrendering\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:newDefs\&quot;,\&quot;ts\&quot;:56141,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;flexipage:page\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;newDefs\&quot;,\&quot;attributes\&quot;:{\&quot;componentDefs\&quot;:[\&quot;markup://flexipage:runtimeBackgroundComponentsWrapper\&quot;,\&quot;markup://one:fp0M01N000000QV8cSAG__pageWithoutSobject__1516162029000\&quot;,\&quot;markup://flexipage:runtimeComponent\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:56671,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;force:record\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;read\&quot;,\&quot;attributes\&quot;:{\&quot;recordId\&quot;:\&quot;0051N000005pgpoQAA\&quot;,\&quot;recordType\&quot;:\&quot;User\&quot;,\&quot;recordTypeSetInClient\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:2,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;read\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;page\&quot;:{\&quot;entity\&quot;:\&quot;unknown\&quot;,\&quot;entityType\&quot;:\&quot;unknown\&quot;,\&quot;context\&quot;:\&quot;unknown\&quot;}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:55244,\&quot;duration\&quot;:1670,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (2)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55427,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:11},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (3)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55448,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (4)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55455,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (5)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55458,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (12)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55536,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:61},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55598,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:4},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55602,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56740,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56742,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;navContainer:render\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55415,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;navContainer:afterRender\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55460,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;navContainer:create\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55526,\&quot;context\&quot;:{\&quot;itemCount\&quot;:24},\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;duration\&quot;:5},{\&quot;ns\&quot;:\&quot;newRouting\&quot;,\&quot;name\&quot;:\&quot;resolvePage\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55605,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;duration\&quot;:1070},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;singlePaneWindowManager:contentSelected\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56683,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;laf:singlePaneWindowManager\&quot;,\&quot;duration\&quot;:12},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;pageHost:loadContent\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56698,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;laf:pageHost\&quot;,\&quot;duration\&quot;:27}],\&quot;transport\&quot;:[{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55345,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:1,\&quot;requestLength\&quot;:873,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;203;a\&quot;],\&quot;requestId\&quot;:\&quot;553450000002de7715\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:37865,\&quot;xhrDuration\&quot;:790,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:55345,\&quot;fetchStart\&quot;:55345,\&quot;requestStart\&quot;:55347,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:3,\&quot;transfer\&quot;:787,\&quot;transferSize\&quot;:39798,\&quot;serverTime\&quot;:105,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:792},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55610,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:3,\&quot;requestLength\&quot;:1301,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;229;a\&quot;,\&quot;230;a\&quot;],\&quot;requestId\&quot;:\&quot;55610000000924ee0a\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:8661,\&quot;xhrDuration\&quot;:1056,\&quot;xhrStall\&quot;:286,\&quot;startTime\&quot;:55610,\&quot;fetchStart\&quot;:55610,\&quot;requestStart\&quot;:55896,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:289,\&quot;transfer\&quot;:767,\&quot;transferSize\&quot;:10593,\&quot;serverTime\&quot;:81,\&quot;xhrDelay\&quot;:0},\&quot;duration\&quot;:1056},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55514,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:2,\&quot;requestLength\&quot;:2434,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;133;a\&quot;,\&quot;135;a\&quot;,\&quot;147;a\&quot;,\&quot;164;a\&quot;,\&quot;182;a\&quot;,\&quot;185;a\&quot;,\&quot;195;a\&quot;],\&quot;requestId\&quot;:\&quot;5551400000038b2f10\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:20657,\&quot;xhrDuration\&quot;:1392,\&quot;xhrStall\&quot;:295,\&quot;startTime\&quot;:55516,\&quot;fetchStart\&quot;:55516,\&quot;requestStart\&quot;:55811,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:295,\&quot;transfer\&quot;:1097,\&quot;transferSize\&quot;:22590,\&quot;serverTime\&quot;:398,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:1395}],\&quot;actions\&quot;:[{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55344,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;203;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;flexipage:page\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.flexipage.components.page.FlexipageControllerV2/ACTION$getPage\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;params\&quot;:{\&quot;flexiPageDeveloperName\&quot;:\&quot;TR1__Front_Office_UtilityBar1\&quot;},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:64,\&quot;db\&quot;:2,\&quot;xhrServerTime\&quot;:100,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:799},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55606,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;229;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getTabByNameAndApp\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:37,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:77,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1068},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55609,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;230;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:recordGlobalValueProvider\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$getRecord\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:14,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:77,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1065}],\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://ui:label\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:3},{\&quot;name\&quot;:\&quot;markup://one:appnav\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:0},{\&quot;name\&quot;:\&quot;markup://force:recordGlobalValueProvider\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:0},{\&quot;name\&quot;:\&quot;markup://laf:pageHost\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:10},{\&quot;name\&quot;:\&quot;markup://home:landing\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:26}],\&quot;force_record\&quot;:[{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;retrieveDraftsFromOldStorage.55519\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55519,\&quot;context\&quot;:null},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;cacheLookup.55607\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordKey\&quot;:\&quot;$Record.0051N000005pgpoQAA.undefined.null.null.null.Name,Id.VIEW.false.null.null.null\&quot;,\&quot;keyPrefix\&quot;:\&quot;005\&quot;,\&quot;cacheHit\&quot;:false},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;recordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecord\&quot;,\&quot;parentCmpName\&quot;:\&quot;oneUserProfileCardTrigger\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;335:0;p\&quot;,\&quot;recordId\&quot;:\&quot;0051N000005pgpoQAA\&quot;,\&quot;requestConfig\&quot;:\&quot;0051N000005pgpoQAA, layoutType=undefined, layoutOverride=undefined, parentId=undefined, fields=Name,Id, optionalFields=null, mode=VIEW, updateMru=false, noServer=false\&quot;,\&quot;hitMissType\&quot;:\&quot;MISS\&quot;,\&quot;recordAgeMs\&quot;:null}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;loadRecordFromServer.55607\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordKey\&quot;:\&quot;$Record.0051N000005pgpoQAA.undefined.null.null.null.Name,Id.VIEW.false.null.null.null\&quot;,\&quot;error\&quot;:false},\&quot;duration\&quot;:1064}]},\&quot;owner\&quot;:\&quot;forceSearch:searchGDPCacheScopes\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-search-sgdp-fetch-getScopeMaps\&quot;,\&quot;attributes\&quot;:{\&quot;tStart\&quot;:1559032427288,\&quot;cacheHit\&quot;:false,\&quot;actionId\&quot;:\&quot;133;a\&quot;,\&quot;fetchedScopeMaps\&quot;:20,\&quot;name\&quot;:\&quot;DEFAULT\&quot;,\&quot;groupId\&quot;:\&quot;DEFAULT\&quot;,\&quot;requestType\&quot;:\&quot;getScopeMaps\&quot;,\&quot;requestId\&quot;:\&quot;forceSearchSearchGDPCacheScopes:201:0;p\&quot;,\&quot;requestCmp\&quot;:\&quot;forceSearchSearchGDPCacheScopes\&quot;,\&quot;requestCmpId\&quot;:\&quot;201:0;p\&quot;,\&quot;params\&quot;:{\&quot;scopeTypes\&quot;:[\&quot;SMART_SCOPE\&quot;,\&quot;PRIMARY\&quot;,\&quot;FILTER\&quot;]},\&quot;sourceCmp\&quot;:\&quot;forceSearch:searchGDPCacheScopes\&quot;,\&quot;time\&quot;:1559032428958,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:55246,\&quot;duration\&quot;:1670,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (2)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55427,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:11},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (3)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55448,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (4)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55455,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (5)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55458,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (12)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55536,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:61},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55598,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:4},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55602,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56740,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56742,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;navContainer:render\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55415,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;navContainer:afterRender\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55460,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;navContainer:create\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55526,\&quot;context\&quot;:{\&quot;itemCount\&quot;:24},\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;duration\&quot;:5},{\&quot;ns\&quot;:\&quot;newRouting\&quot;,\&quot;name\&quot;:\&quot;resolvePage\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55605,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;duration\&quot;:1070},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;singlePaneWindowManager:contentSelected\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56683,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;laf:singlePaneWindowManager\&quot;,\&quot;duration\&quot;:12},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;pageHost:loadContent\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56698,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;laf:pageHost\&quot;,\&quot;duration\&quot;:27}],\&quot;transport\&quot;:[{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55345,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:1,\&quot;requestLength\&quot;:873,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;203;a\&quot;],\&quot;requestId\&quot;:\&quot;553450000002de7715\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:37865,\&quot;xhrDuration\&quot;:790,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:55345,\&quot;fetchStart\&quot;:55345,\&quot;requestStart\&quot;:55347,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:3,\&quot;transfer\&quot;:787,\&quot;transferSize\&quot;:39798,\&quot;serverTime\&quot;:105,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:792},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55610,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:3,\&quot;requestLength\&quot;:1301,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;229;a\&quot;,\&quot;230;a\&quot;],\&quot;requestId\&quot;:\&quot;55610000000924ee0a\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:8661,\&quot;xhrDuration\&quot;:1056,\&quot;xhrStall\&quot;:286,\&quot;startTime\&quot;:55610,\&quot;fetchStart\&quot;:55610,\&quot;requestStart\&quot;:55896,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:289,\&quot;transfer\&quot;:767,\&quot;transferSize\&quot;:10593,\&quot;serverTime\&quot;:81,\&quot;xhrDelay\&quot;:0},\&quot;duration\&quot;:1056},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55514,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:2,\&quot;requestLength\&quot;:2434,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;133;a\&quot;,\&quot;135;a\&quot;,\&quot;147;a\&quot;,\&quot;164;a\&quot;,\&quot;182;a\&quot;,\&quot;185;a\&quot;,\&quot;195;a\&quot;],\&quot;requestId\&quot;:\&quot;5551400000038b2f10\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:20657,\&quot;xhrDuration\&quot;:1392,\&quot;xhrStall\&quot;:295,\&quot;startTime\&quot;:55516,\&quot;fetchStart\&quot;:55516,\&quot;requestStart\&quot;:55811,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:295,\&quot;transfer\&quot;:1097,\&quot;transferSize\&quot;:22590,\&quot;serverTime\&quot;:398,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:1395}],\&quot;actions\&quot;:[{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55344,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;203;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;flexipage:page\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.flexipage.components.page.FlexipageControllerV2/ACTION$getPage\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;params\&quot;:{\&quot;flexiPageDeveloperName\&quot;:\&quot;TR1__Front_Office_UtilityBar1\&quot;},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:64,\&quot;db\&quot;:2,\&quot;xhrServerTime\&quot;:100,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:799},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55606,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;229;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getTabByNameAndApp\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:37,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:77,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1068},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55609,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;230;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:recordGlobalValueProvider\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$getRecord\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:14,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:77,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1065}],\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://ui:label\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:3},{\&quot;name\&quot;:\&quot;markup://one:appnav\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:0},{\&quot;name\&quot;:\&quot;markup://force:recordGlobalValueProvider\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:0},{\&quot;name\&quot;:\&quot;markup://laf:pageHost\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:10},{\&quot;name\&quot;:\&quot;markup://home:landing\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:26}],\&quot;force_record\&quot;:[{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;retrieveDraftsFromOldStorage.55519\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55519,\&quot;context\&quot;:null},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;cacheLookup.55607\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordKey\&quot;:\&quot;$Record.0051N000005pgpoQAA.undefined.null.null.null.Name,Id.VIEW.false.null.null.null\&quot;,\&quot;keyPrefix\&quot;:\&quot;005\&quot;,\&quot;cacheHit\&quot;:false},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;recordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecord\&quot;,\&quot;parentCmpName\&quot;:\&quot;oneUserProfileCardTrigger\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;335:0;p\&quot;,\&quot;recordId\&quot;:\&quot;0051N000005pgpoQAA\&quot;,\&quot;requestConfig\&quot;:\&quot;0051N000005pgpoQAA, layoutType=undefined, layoutOverride=undefined, parentId=undefined, fields=Name,Id, optionalFields=null, mode=VIEW, updateMru=false, noServer=false\&quot;,\&quot;hitMissType\&quot;:\&quot;MISS\&quot;,\&quot;recordAgeMs\&quot;:null}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;loadRecordFromServer.55607\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordKey\&quot;:\&quot;$Record.0051N000005pgpoQAA.undefined.null.null.null.Name,Id.VIEW.false.null.null.null\&quot;,\&quot;error\&quot;:false},\&quot;duration\&quot;:1064}]},\&quot;owner\&quot;:\&quot;forceSearch:searchGDPCachePermsAndPrefs\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-search-sgdp-fetch-getPermsAndPrefs\&quot;,\&quot;attributes\&quot;:{\&quot;tStart\&quot;:1559032427290,\&quot;cacheHit\&quot;:false,\&quot;actionId\&quot;:\&quot;135;a\&quot;,\&quot;name\&quot;:\&quot;DEFAULT\&quot;,\&quot;groupId\&quot;:\&quot;DEFAULT\&quot;,\&quot;requestType\&quot;:\&quot;getPermsAndPrefs\&quot;,\&quot;requestId\&quot;:\&quot;forceSearchSearchGDPCachePermsAndPrefs:195:0;p\&quot;,\&quot;requestCmp\&quot;:\&quot;forceSearchSearchGDPCachePermsAndPrefs\&quot;,\&quot;requestCmpId\&quot;:\&quot;195:0;p\&quot;,\&quot;params\&quot;:{},\&quot;sourceCmp\&quot;:\&quot;forceSearch:searchGDPCachePermsAndPrefs\&quot;,\&quot;time\&quot;:1559032428958,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:57112,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;flexipage:page\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;componentTracker\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:3,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;default\&quot;,\&quot;scope\&quot;:\&quot;component\&quot;,\&quot;context\&quot;:{\&quot;devNameOrId\&quot;:[\&quot;one:utilityBarItem\&quot;,\&quot;one:utilityBarItem\&quot;,\&quot;one:utilityBarItem\&quot;,\&quot;one:utilityBarItem\&quot;]}},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:newDefs\&quot;,\&quot;ts\&quot;:58929,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;flexipage:page\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;newDefs\&quot;,\&quot;attributes\&quot;:{\&quot;componentDefs\&quot;:[\&quot;markup://home:fp0M01N000000QV8dSAG__pageWithoutSobject__1516162029000\&quot;,\&quot;markup://flexipage:runtimeBackgroundComponentsWrapper\&quot;,\&quot;markup://flexipage:runtimeComponent\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:65860,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;force:recordCollection\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;reads\&quot;,\&quot;attributes\&quot;:{\&quot;recordIds\&quot;:[],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:4,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;reads\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:66004,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;flexipage:page\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;componentTracker\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:5,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;default\&quot;,\&quot;scope\&quot;:\&quot;component\&quot;,\&quot;context\&quot;:{\&quot;devNameOrId\&quot;:[\&quot;one:utilityBarItem\&quot;,\&quot;one:utilityBarItem\&quot;,\&quot;one:utilityBarItem\&quot;,\&quot;one:utilityBarItem\&quot;,\&quot;runtime_sales_activities:todayTaskContainer\&quot;,\&quot;home:eventContainer\&quot;,\&quot;home:newsPanel\&quot;,\&quot;flexipage:reportChart\&quot;,\&quot;flexipage:reportChart\&quot;,\&quot;flexipage:reportChart\&quot;,\&quot;flexipage:reportChart\&quot;,\&quot;flexipage:filterListCard\&quot;,\&quot;flexipage:filterListCard\&quot;,\&quot;forceChatter:publisher\&quot;,\&quot;forceChatter:exposedFeed\&quot;]}},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:newDefs\&quot;,\&quot;ts\&quot;:66649,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;force:recordLayoutList\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;newDefs\&quot;,\&quot;attributes\&quot;:{\&quot;componentDefs\&quot;:[\&quot;layout://rl-Task-VIEW-COMPACT----runtime_sales_activities_todayTaskContainer-_1-0-2f5a2f5a7438684a76664f746c5765454f376c4e6b773d3d.c\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:newDefs\&quot;,\&quot;ts\&quot;:66654,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;force:recordLayoutTemplate\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;newDefs\&quot;,\&quot;attributes\&quot;:{\&quot;componentDefs\&quot;:[\&quot;layout://rl-Event-VIEW-COMPACT----home_eventContainer-_1-0-446e78382f476c71597a4739452f52436c6d6d506e413d3d.c\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:66848,\&quot;duration\&quot;:17,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;NewsRequest_1\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66848,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:16},{\&quot;ns\&quot;:\&quot;wits\&quot;,\&quot;name\&quot;:\&quot;SFXPERF:fetchNews\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66848,\&quot;context\&quot;:{\&quot;action\&quot;:\&quot;fetchNews\&quot;},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:16}]},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-wits-fetchNews\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:66866,\&quot;duration\&quot;:33,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://wits:newsTeaserCard\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:26}],\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;wits\&quot;,\&quot;name\&quot;:\&quot;displayNewsItems\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66867,\&quot;context\&quot;:{\&quot;event\&quot;:\&quot;cardRendered\&quot;,\&quot;clientType\&quot;:\&quot;SFXPERF\&quot;},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:26}]},\&quot;owner\&quot;:null,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-wits-fetchNews\&quot;,\&quot;attributes\&quot;:{\&quot;action\&quot;:\&quot;process error callback\&quot;,\&quot;clientType\&quot;:\&quot;SFXPERF\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:66807,\&quot;duration\&quot;:137,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://force:placeholder\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:1},{\&quot;name\&quot;:\&quot;markup://wits:newsTeaserCard\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:26}],\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;NewsRequest_1\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66848,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:16},{\&quot;ns\&quot;:\&quot;wits\&quot;,\&quot;name\&quot;:\&quot;SFXPERF:fetchNews\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66848,\&quot;context\&quot;:{\&quot;action\&quot;:\&quot;fetchNews\&quot;},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:16},{\&quot;ns\&quot;:\&quot;wits\&quot;,\&quot;name\&quot;:\&quot;displayNewsItems\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66867,\&quot;context\&quot;:{\&quot;event\&quot;:\&quot;cardRendered\&quot;,\&quot;clientType\&quot;:\&quot;SFXPERF\&quot;},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:26}]},\&quot;owner\&quot;:\&quot;reports:eclairReportChart\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;loadClientLibrary\&quot;,\&quot;attributes\&quot;:{\&quot;library\&quot;:\&quot;eclairng\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:67701,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;force:recordCollection\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;reads\&quot;,\&quot;attributes\&quot;:{\&quot;recordIds\&quot;:[],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:6,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;reads\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:67778,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;force:recordCollection\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;reads\&quot;,\&quot;attributes\&quot;:{\&quot;recordIds\&quot;:[],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:7,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;reads\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:67923,\&quot;duration\&quot;:67,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://forceChatter:style\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:64}]},\&quot;owner\&quot;:\&quot;forceChatter:feed\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-feed:component:create\&quot;,\&quot;attributes\&quot;:{\&quot;context\&quot;:{\&quot;type\&quot;:\&quot;BOOKMARKS\&quot;,\&quot;subjectId\&quot;:null,\&quot;searchQuery\&quot;:null,\&quot;showFeedItemActions\&quot;:true,\&quot;feedDesign\&quot;:\&quot;DEFAULT\&quot;,\&quot;firstPageSize\&quot;:4,\&quot;hasFeedSwitcher\&quot;:false,\&quot;showFilteringMenuGroup\&quot;:false,\&quot;includeRecordActivitiesInFeed\&quot;:true,\&quot;retrieveOnlyTopLevelThreadedComments\&quot;:false,\&quot;gusTeamId\&quot;:\&quot;a00B0000002pDJa\&quot;,\&quot;hardwareConcurrency\&quot;:4},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:67991,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;forceChatter:feed\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;reads\&quot;,\&quot;attributes\&quot;:{\&quot;operation\&quot;:\&quot;feedLoad\&quot;,\&quot;feedItemIds\&quot;:\&quot;\&quot;,\&quot;sortOrder\&quot;:\&quot;LastModifiedDateDesc\&quot;,\&quot;feedType\&quot;:\&quot;Bookmarks\&quot;,\&quot;startFeedItemPosition\&quot;:0,\&quot;searchQueryId\&quot;:null,\&quot;subjectId\&quot;:\&quot;user\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:8,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;load\&quot;,\&quot;scope\&quot;:\&quot;ChatterFeed\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:67994,\&quot;duration\&quot;:43,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (148)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:68007,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:8},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (149)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:68015,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:5},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (150)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:68021,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0}]},\&quot;owner\&quot;:\&quot;forceChatter:feedInner\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-feed:component:render\&quot;,\&quot;attributes\&quot;:{\&quot;context\&quot;:{\&quot;action\&quot;:\&quot;PageView\&quot;,\&quot;target\&quot;:\&quot;forceChatter:feed:init\&quot;,\&quot;type\&quot;:\&quot;Normal\&quot;,\&quot;gusTeamId\&quot;:\&quot;a00B0000002pDJa\&quot;,\&quot;hardwareConcurrency\&quot;:4},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:65998,\&quot;duration\&quot;:2039,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (138)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66038,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (139)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66039,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (142)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66603,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (143)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66705,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (144)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67863,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (145)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67875,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (148)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:68007,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:8},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (149)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:68015,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:5},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (150)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:68021,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;NewsRequest_1\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66848,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:16},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;RLTCacheInfo\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67721,\&quot;context\&quot;:{\&quot;gusTeamId\&quot;:\&quot;a00B0000003EdjdIAC\&quot;,\&quot;hasLayout\&quot;:false,\&quot;entityName\&quot;:\&quot;TR1__Closing_Report__c\&quot;,\&quot;mode\&quot;:\&quot;VIEW\&quot;,\&quot;type\&quot;:\&quot;LIST\&quot;,\&quot;cmpName\&quot;:\&quot;recordLayoutTemplate\&quot;},\&quot;owner\&quot;:\&quot;force:recordLayoutTemplate\&quot;},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;RLTCacheInfo\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67801,\&quot;context\&quot;:{\&quot;gusTeamId\&quot;:\&quot;a00B0000003EdjdIAC\&quot;,\&quot;hasLayout\&quot;:false,\&quot;entityName\&quot;:\&quot;TR1__Closing_Report__c\&quot;,\&quot;mode\&quot;:\&quot;VIEW\&quot;,\&quot;type\&quot;:\&quot;LIST\&quot;,\&quot;cmpName\&quot;:\&quot;recordLayoutTemplate\&quot;},\&quot;owner\&quot;:\&quot;force:recordLayoutTemplate\&quot;},{\&quot;ns\&quot;:\&quot;wits\&quot;,\&quot;name\&quot;:\&quot;newsPanelRender\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66030,\&quot;context\&quot;:{\&quot;action\&quot;:\&quot;newsPanelRender\&quot;},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:11},{\&quot;ns\&quot;:\&quot;wits\&quot;,\&quot;name\&quot;:\&quot;SFXPERF:fetchNews\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66848,\&quot;context\&quot;:{\&quot;action\&quot;:\&quot;fetchNews\&quot;},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:16},{\&quot;ns\&quot;:\&quot;wits\&quot;,\&quot;name\&quot;:\&quot;displayNewsItems\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66867,\&quot;context\&quot;:{\&quot;event\&quot;:\&quot;cardRendered\&quot;,\&quot;clientType\&quot;:\&quot;SFXPERF\&quot;},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:26},{\&quot;ns\&quot;:\&quot;feeds\&quot;,\&quot;name\&quot;:\&quot;feedXhrAndNetworkTime\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66049,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;forceChatter:feed\&quot;,\&quot;duration\&quot;:1874},{\&quot;ns\&quot;:\&quot;feeds\&quot;,\&quot;name\&quot;:\&quot;feedClientCreateTime\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67923,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;forceChatter:feed\&quot;,\&quot;duration\&quot;:66},{\&quot;ns\&quot;:\&quot;feeds\&quot;,\&quot;name\&quot;:\&quot;feedRenderTime\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67994,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;forceChatter:feedInner\&quot;,\&quot;duration\&quot;:43},{\&quot;ns\&quot;:\&quot;force:recordLayoutTemplate\&quot;,\&quot;name\&quot;:\&quot;layoutItems\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66662,\&quot;context\&quot;:{\&quot;itemCount\&quot;:1}},{\&quot;ns\&quot;:\&quot;force:recordLayoutTemplate\&quot;,\&quot;name\&quot;:\&quot;storageSize\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66662,\&quot;context\&quot;:{\&quot;storageSize\&quot;:\&quot;0.2509765625 KB\&quot;}}],\&quot;transport\&quot;:[{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66663,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:3,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:771,\&quot;startTime\&quot;:66663,\&quot;fetchStart\&quot;:66663,\&quot;requestStart\&quot;:66686,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:24,\&quot;transfer\&quot;:747,\&quot;transferSize\&quot;:112407,\&quot;encodedBodySize\&quot;:111457,\&quot;decodedBodySize\&quot;:111457,\&quot;serverTime\&quot;:36,\&quot;defs\&quot;:[\&quot;markup://runtime_sales_activities:manyWhoName\&quot;,\&quot;markup://runtime_sales_activities:manyWhoNameCompact\&quot;,\&quot;markup://runtime_sales_activities:taskCompactStencil\&quot;],\&quot;xhrDelay\&quot;:5},\&quot;duration\&quot;:776},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66598,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:14,\&quot;requestLength\&quot;:3037,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;508;a\&quot;,\&quot;562;a\&quot;,\&quot;570;a\&quot;,\&quot;573;a\&quot;,\&quot;579;a\&quot;,\&quot;584;a\&quot;,\&quot;589;a\&quot;],\&quot;requestId\&quot;:\&quot;66598000000a8c2e87\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:7630,\&quot;xhrDuration\&quot;:935,\&quot;xhrStall\&quot;:1,\&quot;startTime\&quot;:66599,\&quot;fetchStart\&quot;:66599,\&quot;requestStart\&quot;:66600,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:1,\&quot;transfer\&quot;:934,\&quot;transferSize\&quot;:9563,\&quot;serverTime\&quot;:182,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:938},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66660,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:15,\&quot;requestLength\&quot;:1087,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;597;a\&quot;],\&quot;requestId\&quot;:\&quot;666600000004b0c8d9\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:10907,\&quot;xhrDuration\&quot;:916,\&quot;xhrStall\&quot;:25,\&quot;startTime\&quot;:66660,\&quot;fetchStart\&quot;:66660,\&quot;requestStart\&quot;:66685,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:27,\&quot;transfer\&quot;:889,\&quot;transferSize\&quot;:12840,\&quot;serverTime\&quot;:130,\&quot;xhrDelay\&quot;:337},\&quot;duration\&quot;:1253},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66702,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:16,\&quot;requestLength\&quot;:1146,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;613;a\&quot;],\&quot;requestId\&quot;:\&quot;66702000000aae79e5\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:13087,\&quot;xhrDuration\&quot;:920,\&quot;xhrStall\&quot;:61,\&quot;startTime\&quot;:66702,\&quot;fetchStart\&quot;:66702,\&quot;requestStart\&quot;:66763,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:61,\&quot;transfer\&quot;:859,\&quot;transferSize\&quot;:15020,\&quot;serverTime\&quot;:129,\&quot;xhrDelay\&quot;:298},\&quot;duration\&quot;:1218}],\&quot;actions\&quot;:[{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66050,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;613;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:false,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;forceChatter:feed\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.chatter.components.aura.components.forceChatter.chatter.FeedController/ACTION$getModel\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;params\&quot;:{\&quot;type\&quot;:\&quot;BOOKMARKS\&quot;,\&quot;subjectId\&quot;:\&quot;undefined\&quot;,\&quot;firstPageSize\&quot;:4},\&quot;xhrWait\&quot;:649,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:99,\&quot;db\&quot;:45,\&quot;xhrServerTime\&quot;:125,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:69,\&quot;duration\&quot;:1941}],\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://force:placeholder\&quot;,\&quot;createCount\&quot;:13,\&quot;createTimeTotal\&quot;:8},{\&quot;name\&quot;:\&quot;markup://force:emptyState\&quot;,\&quot;createCount\&quot;:2,\&quot;createTimeTotal\&quot;:1},{\&quot;name\&quot;:\&quot;markup://analytics:embeddedReportChart\&quot;,\&quot;createCount\&quot;:4,\&quot;createTimeTotal\&quot;:167},{\&quot;name\&quot;:\&quot;markup://wits:newsTeaserCard\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:26},{\&quot;name\&quot;:\&quot;markup://force:listTemplate\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:7},{\&quot;name\&quot;:\&quot;markup://flexipage:card\&quot;,\&quot;createCount\&quot;:2,\&quot;createTimeTotal\&quot;:148},{\&quot;name\&quot;:\&quot;markup://forceChatter:style\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:64}],\&quot;force_record\&quot;:[{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;bulkRecordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67702,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecordCollection\&quot;,\&quot;parentCmpName\&quot;:\&quot;auraIf\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;97:584;a\&quot;,\&quot;bulkGetHitCount\&quot;:0,\&quot;bulkGetMissCount\&quot;:0,\&quot;totalRecordsRequested\&quot;:0}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;bulkRecordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67778,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecordCollection\&quot;,\&quot;parentCmpName\&quot;:\&quot;auraIf\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;97:589;a\&quot;,\&quot;bulkGetHitCount\&quot;:0,\&quot;bulkGetMissCount\&quot;:0,\&quot;totalRecordsRequested\&quot;:0}}]},\&quot;owner\&quot;:\&quot;forceChatter:feed\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-feed:centerStage\&quot;,\&quot;attributes\&quot;:{\&quot;context\&quot;:{\&quot;foregroundPanel\&quot;:true,\&quot;feedType\&quot;:\&quot;BOOKMARKS\&quot;,\&quot;subjectId\&quot;:\&quot;undefined\&quot;,\&quot;action\&quot;:\&quot;PageView\&quot;,\&quot;target\&quot;:\&quot;forceChatter:feed:init\&quot;,\&quot;type\&quot;:\&quot;Normal\&quot;,\&quot;gusTeamId\&quot;:\&quot;a00B0000002pDJa\&quot;,\&quot;hardwareConcurrency\&quot;:4},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:newDefs\&quot;,\&quot;ts\&quot;:68830,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;one:one\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;newDefs\&quot;,\&quot;attributes\&quot;:{\&quot;componentDefs\&quot;:[\&quot;layout://rl-TR1__Closing_Report__c-VIEW-LIST--TR1__Assignments_Ending_in_30_Days--force_filterList-_1-0-6c486564426970424d62636352426853314f4b5944413d3d.c\&quot;,\&quot;layout://rl-TR1__Closing_Report__c-VIEW-LIST--TR1__My_Active_Assignments--force_filterList-_1-0-444c5970374e2b366758534c353563386742742f77413d3d.c\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:69529,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;force:recordCollection\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;reads\&quot;,\&quot;attributes\&quot;:{\&quot;recordIds\&quot;:[],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:9,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;reads\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:69538,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;force:recordCollection\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;reads\&quot;,\&quot;attributes\&quot;:{\&quot;recordIds\&quot;:[\&quot;a091N00000bMS2wQAG\&quot;,\&quot;a091N00000bMS2xQAG\&quot;,\&quot;a091N00000bMS2yQAG\&quot;,\&quot;a091N00000bMS2zQAG\&quot;,\&quot;a091N00000bMS30QAG\&quot;,\&quot;a091N00000bMS31QAG\&quot;,\&quot;a091N00000bMS32QAG\&quot;,\&quot;a091N00000bMS33QAG\&quot;,\&quot;a091N00000bMS34QAG\&quot;,\&quot;a091N00000bMS35QAG\&quot;],\&quot;recordType\&quot;:\&quot;TR1__Closing_Report__c\&quot;,\&quot;recordTypeSetInClient\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:10,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;reads\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:69554,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;force:recordCollection\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;reads\&quot;,\&quot;attributes\&quot;:{\&quot;recordIds\&quot;:[],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:11,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;reads\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:69568,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;force:recordCollection\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;reads\&quot;,\&quot;attributes\&quot;:{\&quot;recordIds\&quot;:[\&quot;a091N00000gAidrQAC\&quot;,\&quot;a091N00000gAjE0QAK\&quot;,\&quot;a091N00000gAjE1QAK\&quot;,\&quot;a091N00000gAjDKQA0\&quot;,\&quot;a091N00000gAjE2QAK\&quot;,\&quot;a091N00000gAiCXQA0\&quot;,\&quot;a091N00000gAjE3QAK\&quot;,\&quot;a091N00000gAc9xQAC\&quot;,\&quot;a091N00000gAidsQAC\&quot;,\&quot;a091N00000i9SlyQAE\&quot;],\&quot;recordType\&quot;:\&quot;TR1__Closing_Report__c\&quot;,\&quot;recordTypeSetInClient\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:12,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;reads\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPageView&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:pageView\&quot;,\&quot;ts\&quot;:55605,\&quot;duration\&quot;:14472,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56740,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56742,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (116)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:57041,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (117)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:57043,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (118)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:57044,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (119)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:57045,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (120)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:57049,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (126)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:58908,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (127)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:58908,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (128)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:58909,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (129)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:58910,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (130)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:58911,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (131)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:58911,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (132)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:58913,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (133)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:58914,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (138)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66038,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (139)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66039,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (142)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66603,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (143)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66705,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (144)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67863,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (145)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67875,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (148)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:68007,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:8},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (149)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:68015,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:5},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (150)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:68021,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (156)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69811,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (157)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69813,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (158)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69815,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (159)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69817,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (160)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69820,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (161)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69821,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (162)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69823,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (163)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69824,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (164)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69826,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (165)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69828,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (176)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69959,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (177)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69981,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (178)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69985,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (179)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69987,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (180)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69990,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (181)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69993,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (182)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69994,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (183)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69997,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (184)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69999,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (185)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:70002,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0}],\&quot;transport\&quot;:[{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55610,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:3,\&quot;requestLength\&quot;:1301,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;229;a\&quot;,\&quot;230;a\&quot;],\&quot;requestId\&quot;:\&quot;55610000000924ee0a\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:8661,\&quot;xhrDuration\&quot;:1056,\&quot;xhrStall\&quot;:286,\&quot;startTime\&quot;:55610,\&quot;fetchStart\&quot;:55610,\&quot;requestStart\&quot;:55896,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:289,\&quot;transfer\&quot;:767,\&quot;transferSize\&quot;:10593,\&quot;serverTime\&quot;:81,\&quot;xhrDelay\&quot;:0},\&quot;duration\&quot;:1056},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:56147,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:0,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:850,\&quot;startTime\&quot;:56147,\&quot;fetchStart\&quot;:56147,\&quot;requestStart\&quot;:56180,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:34,\&quot;transfer\&quot;:816,\&quot;transferSize\&quot;:161108,\&quot;encodedBodySize\&quot;:160156,\&quot;decodedBodySize\&quot;:160156,\&quot;serverTime\&quot;:113,\&quot;defs\&quot;:[\&quot;markup://flexipage:componentDecorator\&quot;,\&quot;markup://force:filterDataProvider\&quot;,\&quot;markup://force:listSortOrderChangeAppLevel\&quot;,\&quot;markup://force:listViewStatusInfo\&quot;,\&quot;markup://force:mruDataProvider\&quot;,\&quot;markup://force:notesBaseListViewNonGrid\&quot;,\&quot;markup://force:notesObjectHomeListLibrary\&quot;,\&quot;markup://force:notesObjectHomeListViewIdChange\&quot;,\&quot;markup://force:notesObjectHomeListViewStatusChange\&quot;],\&quot;xhrDelay\&quot;:80},\&quot;duration\&quot;:930},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:56725,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:5,\&quot;requestLength\&quot;:814,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;286;a\&quot;],\&quot;requestId\&quot;:\&quot;567250000008c04ddd\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:7060,\&quot;xhrDuration\&quot;:740,\&quot;xhrStall\&quot;:20,\&quot;startTime\&quot;:56725,\&quot;fetchStart\&quot;:56725,\&quot;requestStart\&quot;:56745,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:21,\&quot;transfer\&quot;:719,\&quot;transferSize\&quot;:8992,\&quot;serverTime\&quot;:31,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:742},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:57056,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:6,\&quot;requestLength\&quot;:923,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;390;a\&quot;],\&quot;requestId\&quot;:\&quot;570560000005eeeb5d\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:7149,\&quot;xhrDuration\&quot;:715,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:57056,\&quot;fetchStart\&quot;:57056,\&quot;requestStart\&quot;:57058,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:3,\&quot;transfer\&quot;:712,\&quot;transferSize\&quot;:9081,\&quot;serverTime\&quot;:28,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:717},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:57122,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:1,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:1731,\&quot;startTime\&quot;:57123,\&quot;fetchStart\&quot;:58164,\&quot;requestStart\&quot;:58165,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:1040,\&quot;ttfb\&quot;:1042,\&quot;transfer\&quot;:689,\&quot;transferSize\&quot;:2930,\&quot;encodedBodySize\&quot;:1982,\&quot;decodedBodySize\&quot;:1982,\&quot;serverTime\&quot;:23,\&quot;defs\&quot;:[\&quot;markup://one:utilityBarContent\&quot;],\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:1733},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:56705,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:4,\&quot;requestLength\&quot;:871,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;269;a\&quot;],\&quot;requestId\&quot;:\&quot;56705000000a77506a\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:57861,\&quot;xhrDuration\&quot;:2164,\&quot;xhrStall\&quot;:1,\&quot;startTime\&quot;:56706,\&quot;fetchStart\&quot;:56706,\&quot;requestStart\&quot;:56707,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:2,\&quot;transfer\&quot;:2162,\&quot;transferSize\&quot;:59794,\&quot;serverTime\&quot;:130,\&quot;xhrDelay\&quot;:57},\&quot;duration\&quot;:2221},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:61923,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:7,\&quot;requestLength\&quot;:1153,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;395;a\&quot;,\&quot;471;a\&quot;],\&quot;requestId\&quot;:\&quot;6192400000083cfc8c\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6854,\&quot;xhrDuration\&quot;:906,\&quot;xhrStall\&quot;:1,\&quot;startTime\&quot;:61924,\&quot;fetchStart\&quot;:61924,\&quot;requestStart\&quot;:61925,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:2,\&quot;transfer\&quot;:904,\&quot;transferSize\&quot;:8786,\&quot;serverTime\&quot;:96,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:909},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:58932,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:2,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:6823,\&quot;startTime\&quot;:58932,\&quot;fetchStart\&quot;:58932,\&quot;requestStart\&quot;:58934,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:2,\&quot;transfer\&quot;:6821,\&quot;transferSize\&quot;:582472,\&quot;encodedBodySize\&quot;:581551,\&quot;decodedBodySize\&quot;:581551,\&quot;defs\&quot;:[\&quot;markup://calendar:refresh\&quot;,\&quot;markup://force:calendarDateLibrary\&quot;,\&quot;markup://force:calendarLibrary\&quot;,\&quot;markup://force:calendarStoreCreate\&quot;,\&quot;markup://force:calendarStoreUpdate\&quot;,\&quot;markup://force:changeCalendarType\&quot;,\&quot;markup://force:emptyState\&quot;,\&quot;markup://force:menuTriggerIcon\&quot;,\&quot;markup://forceChatter:delegateFeedUtilityService\&quot;],\&quot;xhrDelay\&quot;:13},\&quot;duration\&quot;:6836},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65822,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:8,\&quot;requestLength\&quot;:897,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;486;a\&quot;],\&quot;requestId\&quot;:\&quot;65822000000729497f\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6816,\&quot;xhrDuration\&quot;:754,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:65823,\&quot;fetchStart\&quot;:65823,\&quot;requestStart\&quot;:65825,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:3,\&quot;transfer\&quot;:751,\&quot;transferSize\&quot;:8748,\&quot;serverTime\&quot;:62,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:756},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65831,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:9,\&quot;requestLength\&quot;:1067,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;489;a\&quot;],\&quot;requestId\&quot;:\&quot;65831000000ffec684\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:29876,\&quot;xhrDuration\&quot;:811,\&quot;xhrStall\&quot;:33,\&quot;startTime\&quot;:65832,\&quot;fetchStart\&quot;:65832,\&quot;requestStart\&quot;:65865,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:33,\&quot;transfer\&quot;:778,\&quot;transferSize\&quot;:31808,\&quot;serverTime\&quot;:69,\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:815},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65889,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:10,\&quot;requestLength\&quot;:1009,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;521;a\&quot;],\&quot;requestId\&quot;:\&quot;6588900000013030b5\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:16874,\&quot;xhrDuration\&quot;:753,\&quot;xhrStall\&quot;:12,\&quot;startTime\&quot;:65890,\&quot;fetchStart\&quot;:65890,\&quot;requestStart\&quot;:65902,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:19,\&quot;transfer\&quot;:734,\&quot;transferSize\&quot;:18806,\&quot;serverTime\&quot;:44,\&quot;xhrDelay\&quot;:9},\&quot;duration\&quot;:762},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65921,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:11,\&quot;requestLength\&quot;:852,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;528;a\&quot;],\&quot;requestId\&quot;:\&quot;659210000008b83520\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6819,\&quot;xhrDuration\&quot;:762,\&quot;xhrStall\&quot;:28,\&quot;startTime\&quot;:65922,\&quot;fetchStart\&quot;:65922,\&quot;requestStart\&quot;:65950,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:28,\&quot;transfer\&quot;:734,\&quot;transferSize\&quot;:8751,\&quot;serverTime\&quot;:52,\&quot;xhrDelay\&quot;:5},\&quot;duration\&quot;:767},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65946,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:13,\&quot;requestLength\&quot;:852,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;554;a\&quot;],\&quot;requestId\&quot;:\&quot;65946000000f087630\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6828,\&quot;xhrDuration\&quot;:815,\&quot;xhrStall\&quot;:4,\&quot;startTime\&quot;:65946,\&quot;fetchStart\&quot;:65946,\&quot;requestStart\&quot;:65950,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:1,\&quot;ttfb\&quot;:76,\&quot;transfer\&quot;:739,\&quot;transferSize\&quot;:8760,\&quot;serverTime\&quot;:34,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:817},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65936,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:12,\&quot;requestLength\&quot;:823,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;546;a\&quot;],\&quot;requestId\&quot;:\&quot;6593600000031c5b50\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:8174,\&quot;xhrDuration\&quot;:825,\&quot;xhrStall\&quot;:13,\&quot;startTime\&quot;:65937,\&quot;fetchStart\&quot;:65937,\&quot;requestStart\&quot;:65950,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:13,\&quot;transfer\&quot;:812,\&quot;transferSize\&quot;:10106,\&quot;serverTime\&quot;:61,\&quot;xhrDelay\&quot;:82},\&quot;duration\&quot;:907},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66663,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:3,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:771,\&quot;startTime\&quot;:66663,\&quot;fetchStart\&quot;:66663,\&quot;requestStart\&quot;:66686,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:24,\&quot;transfer\&quot;:747,\&quot;transferSize\&quot;:112407,\&quot;encodedBodySize\&quot;:111457,\&quot;decodedBodySize\&quot;:111457,\&quot;serverTime\&quot;:36,\&quot;defs\&quot;:[\&quot;markup://runtime_sales_activities:manyWhoName\&quot;,\&quot;markup://runtime_sales_activities:manyWhoNameCompact\&quot;,\&quot;markup://runtime_sales_activities:taskCompactStencil\&quot;],\&quot;xhrDelay\&quot;:5},\&quot;duration\&quot;:776},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66598,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:14,\&quot;requestLength\&quot;:3037,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;508;a\&quot;,\&quot;562;a\&quot;,\&quot;570;a\&quot;,\&quot;573;a\&quot;,\&quot;579;a\&quot;,\&quot;584;a\&quot;,\&quot;589;a\&quot;],\&quot;requestId\&quot;:\&quot;66598000000a8c2e87\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:7630,\&quot;xhrDuration\&quot;:935,\&quot;xhrStall\&quot;:1,\&quot;startTime\&quot;:66599,\&quot;fetchStart\&quot;:66599,\&quot;requestStart\&quot;:66600,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:1,\&quot;transfer\&quot;:934,\&quot;transferSize\&quot;:9563,\&quot;serverTime\&quot;:182,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:938},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66660,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:15,\&quot;requestLength\&quot;:1087,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;597;a\&quot;],\&quot;requestId\&quot;:\&quot;666600000004b0c8d9\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:10907,\&quot;xhrDuration\&quot;:916,\&quot;xhrStall\&quot;:25,\&quot;startTime\&quot;:66660,\&quot;fetchStart\&quot;:66660,\&quot;requestStart\&quot;:66685,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:27,\&quot;transfer\&quot;:889,\&quot;transferSize\&quot;:12840,\&quot;serverTime\&quot;:130,\&quot;xhrDelay\&quot;:337},\&quot;duration\&quot;:1253},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66702,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:16,\&quot;requestLength\&quot;:1146,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;613;a\&quot;],\&quot;requestId\&quot;:\&quot;66702000000aae79e5\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:13087,\&quot;xhrDuration\&quot;:920,\&quot;xhrStall\&quot;:61,\&quot;startTime\&quot;:66702,\&quot;fetchStart\&quot;:66702,\&quot;requestStart\&quot;:66763,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:61,\&quot;transfer\&quot;:859,\&quot;transferSize\&quot;:15020,\&quot;serverTime\&quot;:129,\&quot;xhrDelay\&quot;:298},\&quot;duration\&quot;:1218},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66893,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:18,\&quot;requestLength\&quot;:942,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;691;a\&quot;],\&quot;requestId\&quot;:\&quot;668930000004a93b80\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6766,\&quot;xhrDuration\&quot;:1331,\&quot;xhrStall\&quot;:540,\&quot;startTime\&quot;:66894,\&quot;fetchStart\&quot;:66894,\&quot;requestStart\&quot;:67434,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:542,\&quot;transfer\&quot;:789,\&quot;transferSize\&quot;:8698,\&quot;serverTime\&quot;:45,\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:1335},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66837,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:17,\&quot;requestLength\&quot;:1191,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;690;a\&quot;],\&quot;requestId\&quot;:\&quot;66837000000407f092\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:10279,\&quot;xhrDuration\&quot;:1470,\&quot;xhrStall\&quot;:493,\&quot;startTime\&quot;:66838,\&quot;fetchStart\&quot;:66838,\&quot;requestStart\&quot;:67331,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:494,\&quot;transfer\&quot;:976,\&quot;transferSize\&quot;:12212,\&quot;serverTime\&quot;:215,\&quot;xhrDelay\&quot;:1},\&quot;duration\&quot;:1471},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67816,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:19,\&quot;requestLength\&quot;:2997,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;889;a\&quot;,\&quot;895;a\&quot;,\&quot;899;a\&quot;,\&quot;948;a\&quot;,\&quot;954;a\&quot;],\&quot;requestId\&quot;:\&quot;67816000000abbcdb9\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:83066,\&quot;xhrDuration\&quot;:974,\&quot;xhrStall\&quot;:1,\&quot;startTime\&quot;:67817,\&quot;fetchStart\&quot;:67817,\&quot;requestStart\&quot;:67818,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:1,\&quot;transfer\&quot;:973,\&quot;transferSize\&quot;:84999,\&quot;serverTime\&quot;:284,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:976},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:68052,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:4,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:956,\&quot;startTime\&quot;:68052,\&quot;fetchStart\&quot;:68052,\&quot;requestStart\&quot;:68226,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:211,\&quot;transfer\&quot;:745,\&quot;transferSize\&quot;:82011,\&quot;encodedBodySize\&quot;:81095,\&quot;decodedBodySize\&quot;:81095,\&quot;serverTime\&quot;:45,\&quot;defs\&quot;:[\&quot;markup://TR1:DocumentParser\&quot;,\&quot;markup://lightning:badge\&quot;,\&quot;markup://lightning:card\&quot;,\&quot;markup://lightning:fileUpload\&quot;,\&quot;markup://lightning:progressBar\&quot;,\&quot;markup://lightning:progressIndicator\&quot;,\&quot;markup://lightning:progressStep\&quot;,\&quot;markup://lightning:radioGroup\&quot;,\&quot;markup://lightning:textarea\&quot;],\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:960},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67885,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:20,\&quot;requestLength\&quot;:2429,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;972;a\&quot;,\&quot;973;a\&quot;,\&quot;974;a\&quot;],\&quot;requestId\&quot;:\&quot;6788500000003898e8\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:18650,\&quot;xhrDuration\&quot;:1408,\&quot;xhrStall\&quot;:298,\&quot;startTime\&quot;:67885,\&quot;fetchStart\&quot;:67885,\&quot;requestStart\&quot;:68183,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:298,\&quot;transfer\&quot;:1110,\&quot;transferSize\&quot;:20583,\&quot;serverTime\&quot;:413,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:1410},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:68835,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:5,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:686,\&quot;startTime\&quot;:68835,\&quot;fetchStart\&quot;:68835,\&quot;requestStart\&quot;:68837,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:2,\&quot;transfer\&quot;:684,\&quot;transferSize\&quot;:11052,\&quot;encodedBodySize\&quot;:10103,\&quot;decodedBodySize\&quot;:10103,\&quot;serverTime\&quot;:23,\&quot;defs\&quot;:[\&quot;markup://force:listRecord\&quot;],\&quot;xhrDelay\&quot;:1},\&quot;duration\&quot;:687}],\&quot;actions\&quot;:[{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55606,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;229;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getTabByNameAndApp\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:37,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:77,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1068},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55609,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;230;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:recordGlobalValueProvider\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$getRecord\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:14,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:77,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1065},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:56721,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;286;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;home:landing\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.home.impl.landing.LandingController/ACTION$populateTodayGVP\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:4,\&quot;serverTime\&quot;:{\&quot;total\&quot;:6,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:28,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:751},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:57056,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;390;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:socialPhotoController\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.socialPhoto.SocialPhotoController/ACTION$resolvePhotos\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:25,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:4,\&quot;duration\&quot;:723},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:56705,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;269;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;flexipage:page\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.flexipage.components.page.FlexipageControllerV2/ACTION$getPage\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;params\&quot;:{\&quot;flexiPageDeveloperName\&quot;:\&quot;Home_Page_Default\&quot;},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:60,\&quot;db\&quot;:17,\&quot;xhrServerTime\&quot;:124,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:2225},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:57086,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;395;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ComponentController/ACTION$reportDeprecationUsages\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:4811,\&quot;enqueueWait\&quot;:26,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:93,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:5750},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:61923,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;471;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;one:systemMessage\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.global.components.one.systemMessage.SystemMessageController/ACTION$getSystemMessages\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:1,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:93,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:6,\&quot;duration\&quot;:920},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65822,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;486;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;runtime_sales_activities:todayTasksCardDataProvider\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.today.impl.components.today.taskContainer.TodayTasksCardDataManagerController/ACTION$getTasks\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;params\&quot;:{\&quot;limit\&quot;:5},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:31,\&quot;db\&quot;:6,\&quot;xhrServerTime\&quot;:59,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:18,\&quot;duration\&quot;:775},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65831,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;489;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ComponentController/ACTION$getComponent\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;params\&quot;:{\&quot;name\&quot;:\&quot;markup://force:listTemplate\&quot;},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:18,\&quot;db\&quot;:1,\&quot;xhrServerTime\&quot;:65,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:819},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65889,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;521;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:recordLayoutTemplate\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.recordLayoutBroker.RecordLayoutBrokerController/ACTION$getLayout\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:13,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:40,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:5,\&quot;duration\&quot;:770},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65921,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;528;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;home:eventCardDataManager\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.calendar.impl.controllers.SFDCCalendarDataProviderController/ACTION$getTodayEvents\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:23,\&quot;db\&quot;:4,\&quot;xhrServerTime\&quot;:48,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:10,\&quot;duration\&quot;:780},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65946,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;554;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;flexipage:reportChart\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.flexipage.components.reportchart.ReportChartController/ACTION$getReportInfo\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:6,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:30,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:67,\&quot;duration\&quot;:885},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65936,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;546;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.wits.impl.components.news.NewsPanelController/ACTION$getNewsMetaData\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:33,\&quot;db\&quot;:4,\&quot;xhrServerTime\&quot;:57,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:4,\&quot;duration\&quot;:914},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65851,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;508;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ComponentController/ACTION$reportDeprecationUsages\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:593,\&quot;enqueueWait\&quot;:154,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:178,\&quot;boxCarCount\&quot;:7},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1688},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65952,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;562;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;flexipage:reportChart\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.flexipage.components.reportchart.ReportChartController/ACTION$getReportInfo\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:593,\&quot;enqueueWait\&quot;:53,\&quot;serverTime\&quot;:{\&quot;total\&quot;:9,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:178,\&quot;boxCarCount\&quot;:7},\&quot;callbackTime\&quot;:64,\&quot;duration\&quot;:1651},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65958,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;570;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;flexipage:reportChart\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.flexipage.components.reportchart.ReportChartController/ACTION$getReportInfo\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:593,\&quot;enqueueWait\&quot;:47,\&quot;serverTime\&quot;:{\&quot;total\&quot;:7,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:178,\&quot;boxCarCount\&quot;:7},\&quot;callbackTime\&quot;:34,\&quot;duration\&quot;:1679},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65959,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;573;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ComponentController/ACTION$reportDeprecationUsages\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:593,\&quot;enqueueWait\&quot;:46,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:178,\&quot;boxCarCount\&quot;:7},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1678},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65962,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;579;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;flexipage:reportChart\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.flexipage.components.reportchart.ReportChartController/ACTION$getReportInfo\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:593,\&quot;enqueueWait\&quot;:43,\&quot;serverTime\&quot;:{\&quot;total\&quot;:7,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:178,\&quot;boxCarCount\&quot;:7},\&quot;callbackTime\&quot;:28,\&quot;duration\&quot;:1703},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65968,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;584;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;flexipage:filterListCard\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.flexipage.components.filterlistcard.FilterListCardController/ACTION$getFilterLabel\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:593,\&quot;enqueueWait\&quot;:37,\&quot;serverTime\&quot;:{\&quot;total\&quot;:97,\&quot;db\&quot;:12,\&quot;xhrServerTime\&quot;:178,\&quot;boxCarCount\&quot;:7},\&quot;callbackTime\&quot;:84,\&quot;duration\&quot;:1781},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65972,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;589;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;flexipage:filterListCard\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.flexipage.components.filterlistcard.FilterListCardController/ACTION$getFilterLabel\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:593,\&quot;enqueueWait\&quot;:33,\&quot;serverTime\&quot;:{\&quot;total\&quot;:22,\&quot;db\&quot;:6,\&quot;xhrServerTime\&quot;:178,\&quot;boxCarCount\&quot;:7},\&quot;callbackTime\&quot;:65,\&quot;duration\&quot;:1842},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65981,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;597;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;one:actionsManager\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.global.components.one.actionsManager.ActionsManagerController/ACTION$handleAction\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:655,\&quot;enqueueWait\&quot;:24,\&quot;serverTime\&quot;:{\&quot;total\&quot;:97,\&quot;db\&quot;:39,\&quot;xhrServerTime\&quot;:125,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:2,\&quot;duration\&quot;:1937},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66050,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;613;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:false,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;forceChatter:feed\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.chatter.components.aura.components.forceChatter.chatter.FeedController/ACTION$getModel\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;params\&quot;:{\&quot;type\&quot;:\&quot;BOOKMARKS\&quot;,\&quot;subjectId\&quot;:\&quot;undefined\&quot;,\&quot;firstPageSize\&quot;:4},\&quot;xhrWait\&quot;:649,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:99,\&quot;db\&quot;:45,\&quot;xhrServerTime\&quot;:125,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:69,\&quot;duration\&quot;:1941},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66866,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;691;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.wits.impl.components.news.NewsPanelController/ACTION$notifyError\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:27,\&quot;serverTime\&quot;:{\&quot;total\&quot;:7,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:39,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1365},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66835,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;690;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;analytics:embeddedReportChart\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.analytics.platform.embeddedChart.EmbeddedReportChartController/ACTION$loadChart\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:130,\&quot;db\&quot;:38,\&quot;xhrServerTime\&quot;:211,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:9,\&quot;duration\&quot;:1486},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67722,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;889;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:recordLayoutTemplate\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.recordLayoutBroker.RecordLayoutBrokerController/ACTION$getLayout\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:92,\&quot;serverTime\&quot;:{\&quot;total\&quot;:93,\&quot;db\&quot;:8,\&quot;xhrServerTime\&quot;:273,\&quot;boxCarCount\&quot;:5},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1108},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67733,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;895;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:listViewDataManager\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.lists.listViewDataManager.ListViewDataManagerController/ACTION$getItems\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:83,\&quot;serverTime\&quot;:{\&quot;total\&quot;:55,\&quot;db\&quot;:40,\&quot;xhrServerTime\&quot;:273,\&quot;boxCarCount\&quot;:5},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1098},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67738,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;899;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:filterList\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.lists.filterList.FilterListController/ACTION$getFilterListConfig\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:78,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:273,\&quot;boxCarCount\&quot;:5},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1093},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67808,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;958;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:filterList\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.lists.filterList.FilterListController/ACTION$getFilterListConfig\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:8,\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1023},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67801,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;948;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:recordLayoutTemplate\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.recordLayoutBroker.RecordLayoutBrokerController/ACTION$getLayout\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:14,\&quot;serverTime\&quot;:{\&quot;total\&quot;:25,\&quot;db\&quot;:7,\&quot;xhrServerTime\&quot;:273,\&quot;boxCarCount\&quot;:5},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1030},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67806,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;954;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:listViewDataManager\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.lists.listViewDataManager.ListViewDataManagerController/ACTION$getItems\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:10,\&quot;serverTime\&quot;:{\&quot;total\&quot;:31,\&quot;db\&quot;:16,\&quot;xhrServerTime\&quot;:273,\&quot;boxCarCount\&quot;:5},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1025},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67857,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;972;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;analytics:embeddedReportChart\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.analytics.platform.embeddedChart.EmbeddedReportChartController/ACTION$loadChart\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:28,\&quot;serverTime\&quot;:{\&quot;total\&quot;:118,\&quot;db\&quot;:30,\&quot;xhrServerTime\&quot;:408,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:9,\&quot;duration\&quot;:1451},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67858,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;973;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;analytics:embeddedReportChart\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.analytics.platform.embeddedChart.EmbeddedReportChartController/ACTION$loadChart\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:27,\&quot;serverTime\&quot;:{\&quot;total\&quot;:119,\&quot;db\&quot;:28,\&quot;xhrServerTime\&quot;:408,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:5,\&quot;duration\&quot;:1455},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67859,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;974;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;analytics:embeddedReportChart\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.analytics.platform.embeddedChart.EmbeddedReportChartController/ACTION$loadChart\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:26,\&quot;serverTime\&quot;:{\&quot;total\&quot;:142,\&quot;db\&quot;:21,\&quot;xhrServerTime\&quot;:408,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:6,\&quot;duration\&quot;:1460}],\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://force:recordGlobalValueProvider\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:0},{\&quot;name\&quot;:\&quot;markup://laf:pageHost\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:10},{\&quot;name\&quot;:\&quot;markup://home:landing\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:26},{\&quot;name\&quot;:\&quot;markup://force:headerButton\&quot;,\&quot;createCount\&quot;:4,\&quot;createTimeTotal\&quot;:25},{\&quot;name\&quot;:\&quot;markup://ui:menu\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:20},{\&quot;name\&quot;:\&quot;markup://uns:notificationsCounter\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:10},{\&quot;name\&quot;:\&quot;markup://force:socialPhotoController\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:1},{\&quot;name\&quot;:\&quot;markup://one:fp0M01N000000QV8cSAG__pageWithoutSobject__1516162029000\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:33},{\&quot;name\&quot;:\&quot;one:utilityBarItem\&quot;,\&quot;createCount\&quot;:4,\&quot;createTimeTotal\&quot;:8},{\&quot;name\&quot;:\&quot;markup://force:dockingPanelOverflow\&quot;,\&quot;createCount\&quot;:2,\&quot;createTimeTotal\&quot;:2},{\&quot;name\&quot;:\&quot;markup://force:entityIcon\&quot;,\&quot;createCount\&quot;:3,\&quot;createTimeTotal\&quot;:5},{\&quot;name\&quot;:\&quot;markup://one:utilityBarContent\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:64},{\&quot;name\&quot;:\&quot;markup://home:fp0M01N000000QV8dSAG__pageWithoutSobject__1516162029000\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:226},{\&quot;name\&quot;:\&quot;runtime_sales_activities:todayTaskContainer\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:64},{\&quot;name\&quot;:\&quot;home:eventContainer\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:78},{\&quot;name\&quot;:\&quot;home:newsPanel\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:7},{\&quot;name\&quot;:\&quot;flexipage:reportChart\&quot;,\&quot;createCount\&quot;:4,\&quot;createTimeTotal\&quot;:19},{\&quot;name\&quot;:\&quot;flexipage:filterListCard\&quot;,\&quot;createCount\&quot;:2,\&quot;createTimeTotal\&quot;:5},{\&quot;name\&quot;:\&quot;forceChatter:publisher\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:8},{\&quot;name\&quot;:\&quot;forceChatter:exposedFeed\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:19},{\&quot;name\&quot;:\&quot;markup://force:placeholder\&quot;,\&quot;createCount\&quot;:13,\&quot;createTimeTotal\&quot;:8},{\&quot;name\&quot;:\&quot;markup://force:emptyState\&quot;,\&quot;createCount\&quot;:2,\&quot;createTimeTotal\&quot;:1},{\&quot;name\&quot;:\&quot;markup://analytics:embeddedReportChart\&quot;,\&quot;createCount\&quot;:4,\&quot;createTimeTotal\&quot;:167},{\&quot;name\&quot;:\&quot;markup://wits:newsTeaserCard\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:26},{\&quot;name\&quot;:\&quot;markup://force:listTemplate\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:7},{\&quot;name\&quot;:\&quot;markup://flexipage:card\&quot;,\&quot;createCount\&quot;:2,\&quot;createTimeTotal\&quot;:148},{\&quot;name\&quot;:\&quot;markup://forceChatter:style\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:64},{\&quot;name\&quot;:\&quot;markup://ui:button\&quot;,\&quot;createCount\&quot;:4,\&quot;createTimeTotal\&quot;:11},{\&quot;name\&quot;:\&quot;markup://one:actionsComposer\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:27},{\&quot;name\&quot;:\&quot;markup://ui:tabItem\&quot;,\&quot;createCount\&quot;:2,\&quot;createTimeTotal\&quot;:4},{\&quot;name\&quot;:\&quot;markup://force:publisherQuickActionCollapser\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:7},{\&quot;name\&quot;:\&quot;markup://force:recordLayout\&quot;,\&quot;createCount\&quot;:20,\&quot;createTimeTotal\&quot;:197}],\&quot;force_record\&quot;:[{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;cacheLookup.55607\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordKey\&quot;:\&quot;$Record.0051N000005pgpoQAA.undefined.null.null.null.Name,Id.VIEW.false.null.null.null\&quot;,\&quot;keyPrefix\&quot;:\&quot;005\&quot;,\&quot;cacheHit\&quot;:false},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;recordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecord\&quot;,\&quot;parentCmpName\&quot;:\&quot;oneUserProfileCardTrigger\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;335:0;p\&quot;,\&quot;recordId\&quot;:\&quot;0051N000005pgpoQAA\&quot;,\&quot;requestConfig\&quot;:\&quot;0051N000005pgpoQAA, layoutType=undefined, layoutOverride=undefined, parentId=undefined, fields=Name,Id, optionalFields=null, mode=VIEW, updateMru=false, noServer=false\&quot;,\&quot;hitMissType\&quot;:\&quot;MISS\&quot;,\&quot;recordAgeMs\&quot;:null}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;loadRecordFromServer.55607\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordKey\&quot;:\&quot;$Record.0051N000005pgpoQAA.undefined.null.null.null.Name,Id.VIEW.false.null.null.null\&quot;,\&quot;error\&quot;:false},\&quot;duration\&quot;:1064},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;bulkRecordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:65861,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecordCollection\&quot;,\&quot;parentCmpName\&quot;:\&quot;auraIf\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;519:0\&quot;,\&quot;bulkGetHitCount\&quot;:0,\&quot;bulkGetMissCount\&quot;:0,\&quot;totalRecordsRequested\&quot;:0,\&quot;layoutType\&quot;:\&quot;COMPACT\&quot;}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;bulkRecordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67702,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecordCollection\&quot;,\&quot;parentCmpName\&quot;:\&quot;auraIf\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;97:584;a\&quot;,\&quot;bulkGetHitCount\&quot;:0,\&quot;bulkGetMissCount\&quot;:0,\&quot;totalRecordsRequested\&quot;:0}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;bulkRecordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67778,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecordCollection\&quot;,\&quot;parentCmpName\&quot;:\&quot;auraIf\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;97:589;a\&quot;,\&quot;bulkGetHitCount\&quot;:0,\&quot;bulkGetMissCount\&quot;:0,\&quot;totalRecordsRequested\&quot;:0}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;bulkRecordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69529,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecordCollection\&quot;,\&quot;parentCmpName\&quot;:\&quot;auraIf\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;97:584;a\&quot;,\&quot;bulkGetHitCount\&quot;:0,\&quot;bulkGetMissCount\&quot;:0,\&quot;totalRecordsRequested\&quot;:0}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;bulkRecordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69539,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecordCollection\&quot;,\&quot;parentCmpName\&quot;:\&quot;auraIf\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;97:584;a\&quot;,\&quot;bulkGetHitCount\&quot;:10,\&quot;bulkGetMissCount\&quot;:0,\&quot;totalRecordsRequested\&quot;:10}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;bulkRecordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69554,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecordCollection\&quot;,\&quot;parentCmpName\&quot;:\&quot;auraIf\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;97:589;a\&quot;,\&quot;bulkGetHitCount\&quot;:0,\&quot;bulkGetMissCount\&quot;:0,\&quot;totalRecordsRequested\&quot;:0}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;bulkRecordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69569,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecordCollection\&quot;,\&quot;parentCmpName\&quot;:\&quot;auraIf\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;97:589;a\&quot;,\&quot;bulkGetHitCount\&quot;:10,\&quot;bulkGetMissCount\&quot;:0,\&quot;totalRecordsRequested\&quot;:10}}]},\&quot;owner\&quot;:\&quot;laf:pageTransactionProcessor\&quot;,\&quot;unixTS\&quot;:false,\&quot;ept\&quot;:14472,\&quot;previousPage\&quot;:{\&quot;context\&quot;:\&quot;undefined\&quot;,\&quot;attributes\&quot;:{}},\&quot;attributes\&quot;:{\&quot;cores\&quot;:4,\&quot;eptDeviation\&quot;:true,\&quot;eptDeviationReason\&quot;:\&quot;PageInBackgroundBeforeLoaded\&quot;,\&quot;backgroundTimeBeforeEPT\&quot;:836,\&quot;density\&quot;:\&quot;COMPACT\&quot;,\&quot;totalEpt\&quot;:70077,\&quot;bootstrapType\&quot;:\&quot;COLD\&quot;,\&quot;defaultCmp\&quot;:[\&quot;one:utilityBarItem\&quot;,\&quot;one:utilityBarItem\&quot;,\&quot;one:utilityBarItem\&quot;,\&quot;one:utilityBarItem\&quot;,\&quot;runtime_sales_activities:todayTaskContainer\&quot;,\&quot;home:eventContainer\&quot;,\&quot;home:newsPanel\&quot;,\&quot;flexipage:reportChart\&quot;,\&quot;flexipage:reportChart\&quot;,\&quot;flexipage:reportChart\&quot;,\&quot;flexipage:reportChart\&quot;,\&quot;flexipage:filterListCard\&quot;,\&quot;flexipage:filterListCard\&quot;,\&quot;forceChatter:publisher\&quot;,\&quot;forceChatter:exposedFeed\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;cacheStats\&quot;:{\&quot;AuraStorage_actions\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:11},\&quot;AuraRecordStore\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:1},\&quot;AuraStorage_tempTabs-1559032427302-836680\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:1},\&quot;AuraRecordStore_oneUserProfileCardTrigger\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:1},\&quot;AuraRecordStore_bulkRecordRequestauraIf\&quot;:{\&quot;hits\&quot;:20,\&quot;misses\&quot;:0},\&quot;AuraStorage_recordLayoutMap\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:3},\&quot;total\&quot;:{\&quot;hits\&quot;:20,\&quot;misses\&quot;:17}},\&quot;complexity\&quot;:{\&quot;ADS_records\&quot;:20,\&quot;ADS_fields\&quot;:230},\&quot;sequence\&quot;:1,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:70080,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;defsUsage\&quot;,\&quot;attributes\&quot;:{\&quot;defs\&quot;:[\&quot;markup://aura:component\&quot;,\&quot;markup://ui:virtualList\&quot;,\&quot;markup://ui:virtualDataGrid\&quot;,\&quot;markup://ui:virtualDataTable\&quot;,\&quot;markup://aura:application\&quot;,\&quot;markup://force:slds\&quot;,\&quot;markup://force:sldsDynamic\&quot;,\&quot;markup://one:one\&quot;,\&quot;markup://aura:html\&quot;,\&quot;markup://aura:text\&quot;,\&quot;markup://force:fingerprint\&quot;,\&quot;markup://force:defenseHook\&quot;,\&quot;markup://one:auraSystemErrorHandler\&quot;,\&quot;markup://one:auraCustomerErrorHandler\&quot;,\&quot;markup://force:downloadHandler\&quot;,\&quot;markup://force:hostConfig\&quot;,\&quot;markup://force:switchToNetworkHandler\&quot;,\&quot;markup://instrumentation:beacon\&quot;,\&quot;markup://laf:platformRouter\&quot;,\&quot;markup://laf:baseRouter\&quot;,\&quot;markup://laf:sObjectRouter\&quot;,\&quot;markup://force:setupRouter\&quot;,\&quot;markup://objectManager:objectManagerRouter\&quot;,\&quot;markup://force:personalSettingsPageRouter\&quot;,\&quot;markup://forceChatter:router\&quot;,\&quot;markup://laf:directCmpReferenceRouter\&quot;,\&quot;markup://laf:navigationServiceAPI\&quot;,\&quot;markup://force:style\&quot;,\&quot;markup://force:access\&quot;,\&quot;markup://laf:appLayoutHost\&quot;,\&quot;markup://force:alohaUrlService\&quot;,\&quot;markup://force:quickActionHandler\&quot;,\&quot;markup://laf:layoutContainer\&quot;,\&quot;markup://aura:expression\&quot;,\&quot;markup://aura:if\&quot;,\&quot;markup://runtime_all_walkthroughs:player\&quot;,\&quot;markup://one:onboardingManagerWrapper\&quot;,\&quot;markup://ui:image\&quot;,\&quot;markup://force:icon\&quot;,\&quot;markup://lightning:icon\&quot;,\&quot;markup://ui:datePickerManager\&quot;,\&quot;markup://force:tempDepend\&quot;,\&quot;markup://flexipage:tempDepend\&quot;,\&quot;markup://runtime_sales_activities:tempDepend\&quot;,\&quot;markup://support:outputPhoneManager\&quot;,\&quot;markup://emailStream:connectEmailWrapper\&quot;,\&quot;markup://emailStream:connectEmail\&quot;,\&quot;markup://one:sessionManager\&quot;,\&quot;markup://salesforceIdentity:sessionTimeoutWarn\&quot;,\&quot;markup://salesforceIdentity:sessionTimeoutWatcher\&quot;,\&quot;markup://voice:getVendorLine\&quot;,\&quot;markup://one:establishVFSessionComponent\&quot;,\&quot;markup://laf:standardLayoutContainer\&quot;,\&quot;markup://force:pageInfo\&quot;,\&quot;markup://laf:platformPageResolver\&quot;,\&quot;markup://force:lds\&quot;,\&quot;markup://force:dirtyStateManager\&quot;,\&quot;markup://one:layoutContainerLib\&quot;,\&quot;markup://laf:pageTransactionProcessor\&quot;,\&quot;markup://laf:navEventManager\&quot;,\&quot;markup://laf:urlProcessor\&quot;,\&quot;markup://laf:baseLayoutContainer\&quot;,\&quot;markup://forceContent:filesManager\&quot;,\&quot;markup://forceContent:modalPreviewManager\&quot;,\&quot;markup://force:quickActionManager\&quot;,\&quot;markup://one:panelService\&quot;,\&quot;markup://force:inlineSpinner\&quot;,\&quot;markup://force:loadingLaser\&quot;,\&quot;markup://one:apiHandler\&quot;,\&quot;markup://force:localRecordChangeObserver\&quot;,\&quot;markup://forceChatter:feedEventsProcessor\&quot;,\&quot;markup://forceChatter:s1FeedsProxy\&quot;,\&quot;markup://support:crossFrameApiManager\&quot;,\&quot;markup://one:actionsManager\&quot;,\&quot;markup://force:targetInteractionHandler\&quot;,\&quot;markup://forceChatter:editManager\&quot;,\&quot;markup://runtime_rtc:rtcDiscoveryBanner\&quot;,\&quot;markup://forceContent:contentHubAuthenticationBanner\&quot;,\&quot;markup://one:keyboardShortcutListener\&quot;,\&quot;markup://one:helpAndTrainingKeyboardShortcuts\&quot;,\&quot;markup://force:logoutHandler\&quot;,\&quot;markup://one:iframeMessageManager\&quot;,\&quot;markup://lightning:messageDispatcher\&quot;,\&quot;markup://force:userAssistancePlatform\&quot;,\&quot;markup://one:header\&quot;,\&quot;markup://forceSearch:desktopHeaderManager\&quot;,\&quot;markup://forceSearch:baseSearch\&quot;,\&quot;markup://forceSearch:desktopHeader\&quot;,\&quot;markup://forceSearch:groupContainer\&quot;,\&quot;markup://forceSearch:inputEntitySelector\&quot;,\&quot;markup://ui:dataProvider\&quot;,\&quot;markup://forceSearch:inputEntitySelectorDataProvider\&quot;,\&quot;markup://lightning:groupedCombobox\&quot;,\&quot;markup://forceSearch:input\&quot;,\&quot;markup://forceSearch:inputDesktop\&quot;,\&quot;markup://forceSearch:optionDataProvider\&quot;,\&quot;markup://forceSearch:inputDataProvider\&quot;,\&quot;markup://forceSearch:inputDesktopDataProvider\&quot;,\&quot;markup://forceSearch:actionDataProvider\&quot;,\&quot;markup://forceSearch:mruDataProvider\&quot;,\&quot;markup://forceSearch:typeAheadDataProvider\&quot;,\&quot;markup://ui:resizeObserver\&quot;,\&quot;markup://forceSearch:inputDesktopPillWrapper\&quot;,\&quot;markup://ui:input\&quot;,\&quot;markup://ui:autocomplete\&quot;,\&quot;markup://forceSearch:searchInputListHeader\&quot;,\&quot;markup://forceSearch:inputDesktopListFooter\&quot;,\&quot;markup://ui:inputTextForAutocomplete\&quot;,\&quot;markup://forceSearch:searchGDP\&quot;,\&quot;markup://forceSearch:searchGDPCache\&quot;,\&quot;markup://forceSearch:searchGDPCacheActivity\&quot;,\&quot;markup://forceSearch:searchGDPCacheMrus\&quot;,\&quot;markup://forceSearch:searchGDPCachePermsAndPrefs\&quot;,\&quot;markup://forceSearch:searchGDPCacheResultsFilters\&quot;,\&quot;markup://forceSearch:searchGDPCacheScopes\&quot;,\&quot;markup://one:appNavContainer\&quot;,\&quot;markup://force:skipLink\&quot;,\&quot;markup://force:onboardingManagerLib\&quot;,\&quot;markup://salesforceIdentity:appLauncherManager\&quot;,\&quot;markup://one:systemMessage\&quot;,\&quot;markup://aura:iteration\&quot;,\&quot;markup://one:ept\&quot;,\&quot;markup://ui:stamp\&quot;,\&quot;markup://auraStorage:fuelGauge\&quot;,\&quot;markup://one:ladybugTrigger\&quot;,\&quot;markup://one:favorites\&quot;,\&quot;markup://one:globalCreate\&quot;,\&quot;markup://one:globalCreateIcon\&quot;,\&quot;markup://one:helpAndTrainingExperience\&quot;,\&quot;markup://ui:interactive\&quot;,\&quot;markup://ui:popupTrigger\&quot;,\&quot;markup://ui:menuTriggerLink\&quot;,\&quot;markup://force:headerMenuTrigger\&quot;,\&quot;markup://ui:tooltip\&quot;,\&quot;markup://setup:gear\&quot;,\&quot;markup://uns:notifications\&quot;,\&quot;markup://force:empApi\&quot;,\&quot;markup://one:userProfileCardTrigger\&quot;,\&quot;markup://force:record\&quot;,\&quot;markup://one:userProfileCardData\&quot;,\&quot;markup://force:toastManager\&quot;,\&quot;markup://force:visualMessageQueue\&quot;,\&quot;markup://force:brandBandPageContainer\&quot;,\&quot;markup://laf:singlePaneWindowManager\&quot;,\&quot;markup://force:recordContentPlugin\&quot;,\&quot;markup://one:searchContentPlugin\&quot;,\&quot;markup://one:editablePagePlugin\&quot;,\&quot;markup://laf:pageCapability\&quot;,\&quot;markup://one:uncacheableContentPlugin\&quot;,\&quot;markup://one:iframeContentPlugin\&quot;,\&quot;markup://laf:standardLayoutContentSelector\&quot;,\&quot;markup://flexipage:page\&quot;,\&quot;markup://force:brandBand\&quot;,\&quot;markup://ui:containerManager\&quot;,\&quot;markup://ui:panelManager2\&quot;,\&quot;markup://one:panelManager\&quot;,\&quot;markup://force:modalSpinner\&quot;,\&quot;markup://force:dotsSpinner\&quot;,\&quot;markup://notes:editPanelManager\&quot;,\&quot;markup://ui:asyncComponentManager\&quot;,\&quot;markup://instrumentation:uiManager\&quot;,\&quot;markup://force:massErrorsManager\&quot;,\&quot;markup://force:hoverPrototypeManager\&quot;,\&quot;markup://force:hoverPrototype\&quot;,\&quot;markup://ui:label\&quot;,\&quot;markup://one:appnav\&quot;,\&quot;markup://force:recordGlobalValueProvider\&quot;,\&quot;markup://laf:pageHost\&quot;,\&quot;markup://laf:windowUpdate\&quot;,\&quot;markup://home:landing\&quot;,\&quot;markup://force:headerButton\&quot;,\&quot;markup://ui:button\&quot;,\&quot;markup://ui:popup\&quot;,\&quot;markup://ui:menu\&quot;,\&quot;markup://ui:popupTarget\&quot;,\&quot;markup://ui:menuList\&quot;,\&quot;markup://uns:notificationsCounter\&quot;,\&quot;markup://force:socialPhoto\&quot;,\&quot;markup://force:socialPhotoController\&quot;,\&quot;markup://one:fp0M01N000000QV8cSAG__pageWithoutSobject__1516162029000\&quot;,\&quot;markup://one:utilityBar\&quot;,\&quot;markup://flexipage:runtimeComponent\&quot;,\&quot;markup://flexipage:componentDecorator\&quot;,\&quot;markup://one:utilityBarItem\&quot;,\&quot;markup://one:dockingPanelManager\&quot;,\&quot;markup://one:utilityBarContainer\&quot;,\&quot;markup://one:utilPanelManager\&quot;,\&quot;markup://force:dockingPanelOverflow\&quot;,\&quot;markup://force:entityIcon\&quot;,\&quot;markup://one:utilityBarContent\&quot;,\&quot;markup://force:popOutManagerAura\&quot;,\&quot;markup://force:popOutManager\&quot;,\&quot;markup://laf:windowMessengerAura\&quot;,\&quot;markup://home:fp0M01N000000QV8dSAG__pageWithoutSobject__1516162029000\&quot;,\&quot;markup://home:homeCard\&quot;,\&quot;markup://runtime_sales_activities:todayTaskContainer\&quot;,\&quot;markup://runtime_sales_activities:todayTasksFilter\&quot;,\&quot;markup://runtime_sales_activities:todayTasksList\&quot;,\&quot;markup://force:recordLayoutList\&quot;,\&quot;markup://runtime_sales_activities:todayTasksCardDataProvider\&quot;,\&quot;markup://force:placeholder\&quot;,\&quot;markup://ui:abstractList\&quot;,\&quot;markup://ui:infiniteList\&quot;,\&quot;markup://force:recordLayout\&quot;,\&quot;markup://force:listTemplate\&quot;,\&quot;markup://force:baseCard\&quot;,\&quot;markup://home:eventContainer\&quot;,\&quot;markup://force:recordList\&quot;,\&quot;markup://force:dataManager\&quot;,\&quot;markup://home:eventCardDataManager\&quot;,\&quot;markup://force:recordCollection\&quot;,\&quot;markup://force:recordListDummyDataProvider\&quot;,\&quot;markup://force:recordLayoutTemplate\&quot;,\&quot;markup://home:newsPanel\&quot;,\&quot;markup://wits:newsPanel\&quot;,\&quot;markup://aura:renderIf\&quot;,\&quot;markup://flexipage:card\&quot;,\&quot;markup://flexipage:reportChart\&quot;,\&quot;markup://flexipage:filterListCard\&quot;,\&quot;markup://forceChatter:publisher\&quot;,\&quot;markup://force:actionsContainer\&quot;,\&quot;markup://aura:unescapedHtml\&quot;,\&quot;markup://forceChatter:exposedFeed\&quot;,\&quot;markup://forceChatter:exposedFeedDesktop\&quot;,\&quot;markup://lightning:workspaceAPI\&quot;,\&quot;markup://forceChatter:feed\&quot;,\&quot;markup://force:emptyState\&quot;,\&quot;markup://analytics:embeddedReportChart\&quot;,\&quot;markup://analytics:embeddedChart\&quot;,\&quot;markup://ui:message\&quot;,\&quot;markup://force:message\&quot;,\&quot;markup://ui:block\&quot;,\&quot;markup://analytics:cordaChart\&quot;,\&quot;markup://analytics:csrPopChart\&quot;,\&quot;markup://ui:scroller\&quot;,\&quot;markup://analytics:pluginChart\&quot;,\&quot;markup://reports:eclairReportChart\&quot;,\&quot;markup://reports:eclairChart\&quot;,\&quot;markup://wits:newsTeaserCard\&quot;,\&quot;markup://wits:newsCardsContainer\&quot;,\&quot;markup://lightning:buttonIcon\&quot;,\&quot;markup://lightning:primitiveIcon\&quot;,\&quot;markup://force:filterList\&quot;,\&quot;markup://offline:banner\&quot;,\&quot;markup://ui:outputText\&quot;,\&quot;markup://offline:sash\&quot;,\&quot;markup://aura:label\&quot;,\&quot;markup://force:filterMenu\&quot;,\&quot;markup://force:listViewDataManagerAdapter\&quot;,\&quot;markup://force:listViewDataManager\&quot;,\&quot;markup://force:card\&quot;,\&quot;markup://forceChatter:style\&quot;,\&quot;markup://forceChatter:feedInner\&quot;,\&quot;markup://forceChatter:richLinkPreviewMetadata\&quot;,\&quot;markup://forceChatter:contentVisibilityMonitor\&quot;,\&quot;markup://forceChatter:scroller\&quot;,\&quot;markup://feeds_sorter:sorter\&quot;,\&quot;markup://forceChatter:searchInFeed\&quot;,\&quot;markup://lightning:input\&quot;,\&quot;markup://forceChatter:feedElementIteration\&quot;,\&quot;markup://forceChatter:emptyFeed\&quot;,\&quot;markup://forceChatter:newContent\&quot;,\&quot;markup://one:actionsComposer\&quot;,\&quot;markup://ui:tabset\&quot;,\&quot;markup://ui:tabBar\&quot;,\&quot;markup://ui:tabOverflowMenuItem\&quot;,\&quot;markup://ui:tab\&quot;,\&quot;markup://ui:tabItem\&quot;,\&quot;markup://force:publisherQuickActionCollapser\&quot;,\&quot;layout://rl-TR1__Closing_Report__c-VIEW-LIST--TR1__My_Active_Assignments--force_filterList-_1-0-444c5970374e2b366758534c353563386742742f77413d3d.c\&quot;,\&quot;markup://force:listRecord\&quot;,\&quot;markup://force:listRecordItem\&quot;,\&quot;markup://ui:infiniteListRow\&quot;,\&quot;markup://force:actionRow\&quot;,\&quot;layout://rl-TR1__Closing_Report__c-VIEW-LIST--TR1__Assignments_Ending_in_30_Days--force_filterList-_1-0-6c486564426970424d62636352426853314f4b5944413d3d.c\&quot;,\&quot;markup://ui:outputDate\&quot;],\&quot;pageCounter\&quot;:1,\&quot;phase\&quot;:\&quot;EPT\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:13,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;defsUsage\&quot;,\&quot;scope\&quot;:\&quot;defsUsage\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;}]}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=22&amp;ui-instrumentation-components-beacon.InstrumentationBeacon.sendData=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">70101000000d18900e</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1348 /aura?r=26&amp;ui-setup-components-aura-components-gear.Gear.getEntitySupport=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1421;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.setup.components.aura.components.gear.GearController/ACTION$getEntitySupport&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=26&amp;ui-setup-components-aura-components-gear.Gear.getEntitySupport=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">71067000000826ec7c</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1349 /aura?r=27&amp;ui-force-components-controllers-platformStateManager.PlatformStateManager.getActionOverrides=1&amp;ui-force-components-controllers-platformStateManager.PlatformStateManager.getKeyPrefixesWithRecordTypes=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1467;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getActionOverrides&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;sObjectNames&quot;:[&quot;Account&quot;,&quot;AccountBrand&quot;,&quot;AccountContactRelation&quot;,&quot;AccountInsight&quot;,&quot;AccountRelationship&quot;,&quot;AccountTeamMember&quot;,&quot;AccountUserTerritory2View&quot;,&quot;ActionCadence&quot;,&quot;ActionPlan&quot;,&quot;ActionPlanItem&quot;,&quot;ActionPlanTemplate&quot;,&quot;ActionPlanTemplateItem&quot;,&quot;ActionPlanTemplateVersion&quot;,&quot;ActiveScratchOrg&quot;,&quot;ActivityHistory&quot;,&quot;AddOnDefinition&quot;,&quot;Address&quot;,&quot;AiImageDetectedObject&quot;,&quot;AiImageObject&quot;,&quot;AiImageTrainingObject&quot;,&quot;AppMenuItem&quot;,&quot;Asset&quot;,&quot;AssetRelationship&quot;,&quot;AssignedResource&quot;,&quot;AssociatedLocation&quot;,&quot;AttachedContentNote&quot;,&quot;CallTemplate&quot;,&quot;Campaign&quot;,&quot;CampaignInfluence&quot;,&quot;CampaignInsight&quot;,&quot;CampaignMember&quot;,&quot;CampaignMemberStatus&quot;,&quot;Candidate_Community__c&quot;,&quot;CareBarrier&quot;,&quot;CareBarrierDeterminant&quot;,&quot;CareBarrierType&quot;,&quot;CareDeterminant&quot;,&quot;CareDeterminantType&quot;,&quot;CareDiagnosis&quot;,&quot;CareInterventionType&quot;,&quot;CarePreauth&quot;,&quot;CarePreauthItem&quot;,&quot;CareProgram&quot;,&quot;CareProgramCampaign&quot;,&quot;CareProgramEnrollee&quot;,&quot;CareProgramTeamMember&quot;,&quot;CareRequest&quot;,&quot;CareRequestDrug&quot;,&quot;CareRequestItem&quot;,&quot;Case&quot;,&quot;CaseComment&quot;,&quot;CaseContactRole&quot;,&quot;CaseMilestone&quot;,&quot;ChannelProgram&quot;,&quot;ChannelProgramLevel&quot;,&quot;ChannelProgramMember&quot;,&quot;Claim&quot;,&quot;CloudServiceProvider&quot;,&quot;CollaborationGroup&quot;,&quot;CommerceOrder&quot;,&quot;Consent__c&quot;,&quot;ConsumptionRate&quot;,&quot;ConsumptionSchedule&quot;,&quot;Contact&quot;,&quot;ContactPointAddress&quot;,&quot;ContactPointConsent&quot;,&quot;ContactPointEmail&quot;,&quot;ContactPointPhone&quot;,&quot;ContactPointTypeConsent&quot;,&quot;ContactRequest&quot;,&quot;ContactSuggestionInsight&quot;,&quot;ContentDocument&quot;,&quot;ContentDocumentListViewMapping&quot;,&quot;ContentNote&quot;,&quot;ContentVersion&quot;,&quot;ContentWorkspace&quot;,&quot;Contract&quot;,&quot;ContractContactRole&quot;,&quot;ContractLineItem&quot;,&quot;Contract_Type_Mapping__c&quot;,&quot;Country__c&quot;,&quot;CoverageBenefit&quot;,&quot;CoverageBenefitItem&quot;,&quot;CoverageLimit&quot;,&quot;CoverageType&quot;,&quot;CustomerAssetAuto&quot;,&quot;CustomerAssetHome&quot;,&quot;Dashboard&quot;,&quot;DataSharingCustomerLocal&quot;,&quot;DataSharingOrder&quot;,&quot;DataUseLegalBasis&quot;,&quot;DataUsePurpose&quot;,&quot;DssOrder&quot;,&quot;DuplicateRecordItem&quot;,&quot;DuplicateRecordSet&quot;,&quot;EditionDefinition&quot;,&quot;EmailMessage&quot;,&quot;EmailMessageRelation&quot;,&quot;EmailTemplate&quot;,&quot;EmbeddedServiceConfig&quot;,&quot;EmbeddedServiceLiveAgent&quot;,&quot;EngagementProgram&quot;,&quot;EngagementProgramVersion&quot;,&quot;EnhancedEmailTemplate&quot;,&quot;Entitlement&quot;,&quot;EntityMilestone&quot;,&quot;EnvironmentHubMember&quot;,&quot;Event&quot;,&quot;FeedItem&quot;,&quot;Folder&quot;,&quot;HealthCareDiagnosis&quot;,&quot;HealthCareProcedure&quot;,&quot;IdentityDocument&quot;,&quot;Image&quot;,&quot;InStoreLocation&quot;,&quot;IncludedLicenseDefinition&quot;,&quot;Individual&quot;,&quot;InsightsApplication&quot;,&quot;InsurancePolicy&quot;,&quot;InsurancePolicyAsset&quot;,&quot;InsurancePolicyBeneficiary&quot;,&quot;InsurancePolicyCoverageLimit&quot;,&quot;InsurancePolicyMember&quot;,&quot;InsurancePolicyOwner&quot;,&quot;InsuranceProfile&quot;,&quot;JobBoardsSiteMapping__c&quot;,&quot;KeyPerformanceIndicator&quot;,&quot;KnowledgeArticleVersion&quot;,&quot;LandingPage&quot;,&quot;Lead&quot;,&quot;Lens&quot;,&quot;LicensingError&quot;,&quot;LicensingRequest&quot;,&quot;ListEmail&quot;,&quot;ListEmailSentResult&quot;,&quot;LiveAgentSession&quot;,&quot;LiveChatTranscript&quot;,&quot;LiveChatVisitor&quot;,&quot;Location&quot;,&quot;Macro&quot;,&quot;MaintenanceAsset&quot;,&quot;MaintenancePlan&quot;,&quot;MarketingForm&quot;,&quot;MarketingLink&quot;,&quot;MemberPlan&quot;,&quot;MessagingChannel&quot;,&quot;MessagingDeliveryError&quot;,&quot;MessagingEndUser&quot;,&quot;MessagingSession&quot;,&quot;MessagingTemplate&quot;,&quot;NamespaceRegistry&quot;,&quot;Note&quot;,&quot;ObjectTerritory2Association&quot;,&quot;OpenActivity&quot;,&quot;OperatingHours&quot;,&quot;Opportunity&quot;,&quot;OpportunityContactRole&quot;,&quot;OpportunityContactRoleSuggestionInsight&quot;,&quot;OpportunityInsight&quot;,&quot;OpportunityLineItem&quot;,&quot;OpportunityLineItemSchedule&quot;,&quot;OpportunitySplit&quot;,&quot;OpportunityTeamMember&quot;,&quot;Order&quot;,&quot;OrderDeliveryGroup&quot;,&quot;OrderDeliveryGroupLine&quot;,&quot;OrderItem&quot;,&quot;OrderPriceAdjustDistrLine&quot;,&quot;OrderPriceAdjustmentLine&quot;,&quot;PartnerFundAllocation&quot;,&quot;PartnerFundClaim&quot;,&quot;PartnerFundRequest&quot;,&quot;PartnerMarketingBudget&quot;,&quot;PersonAccount&quot;,&quot;PersonEducation&quot;,&quot;PersonEmployment&quot;,&quot;PersonLifeEvent&quot;,&quot;PersonList&quot;,&quot;PersonListMember&quot;,&quot;PlanBenefit&quot;,&quot;PlanBenefitItem&quot;,&quot;PlatformLicenseDefinition&quot;,&quot;Pricebook2&quot;,&quot;PricebookEntry&quot;,&quot;ProcessInstanceHistory&quot;,&quot;ProcessInstanceStep&quot;,&quot;ProcessInstanceWorkitem&quot;,&quot;Producer&quot;,&quot;Product2&quot;,&quot;ProductConsumed&quot;,&quot;ProductConsumptionSchedule&quot;,&quot;ProductCoverage&quot;,&quot;ProductCoverageLimit&quot;,&quot;ProductItem&quot;,&quot;ProductItemTransaction&quot;,&quot;ProductLicenseMap&quot;,&quot;ProductRequest&quot;,&quot;ProductRequestLineItem&quot;,&quot;ProductRequired&quot;,&quot;ProductTransfer&quot;,&quot;PurchaserPlan&quot;,&quot;PurchaserPlanAssn&quot;,&quot;QuickText&quot;,&quot;Quote&quot;,&quot;QuoteLineItem&quot;,&quot;Recommendation&quot;,&quot;RecordType&quot;,&quot;Report&quot;,&quot;ResourceAbsence&quot;,&quot;ResourcePreference&quot;,&quot;RetailLocationGroup&quot;,&quot;RetailStore&quot;,&quot;RetailStoreKpi&quot;,&quot;RetailStoreVisitTemplate&quot;,&quot;RetailVisitKpi&quot;,&quot;RetailVisitTemplate&quot;,&quot;RetailVisitTemplateWorkTask&quot;,&quot;RetailVisitWorkTask&quot;,&quot;RetailWorkTask&quot;,&quot;RetailWorkTaskKpi&quot;,&quot;ReturnOrder&quot;,&quot;ReturnOrderLineItem&quot;,&quot;SalesAgreement&quot;,&quot;SalesAgreementProduct&quot;,&quot;SalesAgreementProductSchedule&quot;,&quot;Scorecard&quot;,&quot;ScorecardAssociation&quot;,&quot;ScorecardMetric&quot;,&quot;ScratchOrgInfo&quot;,&quot;ServiceAppointment&quot;,&quot;ServiceAppointmentCapacityUsage&quot;,&quot;ServiceContract&quot;,&quot;ServiceCrew&quot;,&quot;ServiceCrewMember&quot;,&quot;ServiceResource&quot;,&quot;ServiceResourceCapacity&quot;,&quot;ServiceResourceSkill&quot;,&quot;ServiceTerritory&quot;,&quot;ServiceTerritoryLocation&quot;,&quot;ServiceTerritoryMember&quot;,&quot;ServiceTerritoryWorkType&quot;,&quot;SettingUsageDefinition&quot;,&quot;SettingUsageMap&quot;,&quot;Shipment&quot;,&quot;SiqExchangeConnection&quot;,&quot;SkillRequirement&quot;,&quot;SocialPersona&quot;,&quot;SocialPost&quot;,&quot;StandardPermissionSet&quot;,&quot;StreamingChannel&quot;,&quot;Survey&quot;,&quot;SurveyEmailBranding&quot;,&quot;SurveyInvitation&quot;,&quot;SurveyQuestion&quot;,&quot;SurveyQuestionChoice&quot;,&quot;SurveyQuestionResponse&quot;,&quot;SurveyResponse&quot;,&quot;SurveyVersion&quot;,&quot;TR1__ADP__c&quot;,&quot;TR1__ATS_Configuration_Settings__c&quot;,&quot;TR1__ATS_Job_AppV2_Picklist_Mapping__c&quot;,&quot;TR1__AccountPool__c&quot;,&quot;TR1__Account_Address__c&quot;,&quot;TR1__Activate_Triggers__c&quot;,&quot;TR1__AdjustedGrossProfit__c&quot;,&quot;TR1__Agreement__c&quot;,&quot;TR1__Application_History__c&quot;,&quot;TR1__Application_V2__c&quot;,&quot;TR1__Application__c&quot;,&quot;TR1__AreaCode__c&quot;,&quot;TR1__Associate_PO_Closing_Report__c&quot;,&quot;TR1__Associated_Qualification__c&quot;,&quot;TR1__BHLO_Log__c&quot;,&quot;TR1__BHTK_Indexing_status__c&quot;,&quot;TR1__BHTK_User_Authentication__c&quot;,&quot;TR1__Blacklisted__c&quot;,&quot;TR1__Branch__c&quot;,&quot;TR1__CalendarDays__c&quot;,&quot;TR1__Call_List_Member__c&quot;,&quot;TR1__Call_List__c&quot;,&quot;TR1__CandidateManagerActionMenu__c&quot;,&quot;TR1__CandidateManagerViewMenu__c&quot;,&quot;TR1__Candidate_Availability_D2D__c&quot;,&quot;TR1__Candidate_Availability__c&quot;,&quot;TR1__Candidate_Consents__c&quot;,&quot;TR1__Candidate_Finder_Source_Setting__c&quot;,&quot;TR1__Candidate_Summary__c&quot;,&quot;TR1__Candidates_Marketed__c&quot;,&quot;TR1__ClosingReportSettings__c&quot;,&quot;TR1__Closing_Report_Schedule__c&quot;,&quot;TR1__Closing_Report__c&quot;,&quot;TR1__Commission__c&quot;,&quot;TR1__Consent_Type__c&quot;,&quot;TR1__ContactDocument__c&quot;,&quot;TR1__ContactRecordTypes__c&quot;,&quot;TR1__ContactSelectedFields__c&quot;,&quot;TR1__Contact_Accrual__c&quot;,&quot;TR1__Contact_Address__c&quot;,&quot;TR1__Contact_Assessment__c&quot;,&quot;TR1__Contact_fields__c&quot;,&quot;TR1__Country_Code__c&quot;,&quot;TR1__DaxtraSearchProperties__c&quot;,&quot;TR1__Debug_Log__c&quot;,&quot;TR1__Document_Session__c&quot;,&quot;TR1__EMail__c&quot;,&quot;TR1__EducationHistory__c&quot;,&quot;TR1__EmploymentHistory__c&quot;,&quot;TR1__Expense_Report_Detail__c&quot;,&quot;TR1__Expense_Report__c&quot;,&quot;TR1__ExternalSearch__c&quot;,&quot;TR1__External_Search_Junction__c&quot;,&quot;TR1__External_Search_Result__c&quot;,&quot;TR1__External_Search_Status__c&quot;,&quot;TR1__External_Timesheet_Hours__c&quot;,&quot;TR1__FieldIdMapping__c&quot;,&quot;TR1__Fixed_Assets__c&quot;,&quot;TR1__Fyre_Account_Settings__c&quot;,&quot;TR1__Fyre_Parameter_Mapping__c&quot;,&quot;TR1__Fyre_Payload_Job_Type_Mapping__c&quot;,&quot;TR1__Fyre_VMS__c&quot;,&quot;TR1__GDPRConfigurations__c&quot;,&quot;TR1__Generated_Document__c&quot;,&quot;TR1__Gross_Profit__c&quot;,&quot;TR1__Hirabl_Account_Settings__c&quot;,&quot;TR1__Interaction__c&quot;,&quot;TR1__Internal_Onboarding__c&quot;,&quot;TR1__Invoice__c&quot;,&quot;TR1__JobManagerActionMenu__c&quot;,&quot;TR1__JobManagerViewMenu__c&quot;,&quot;TR1__JobRecordType__c&quot;,&quot;TR1__Job_Board_Application__c&quot;,&quot;TR1__Job_Board_Search_Options__c&quot;,&quot;TR1__Job_Board__c&quot;,&quot;TR1__Job_Finder_Source_Setting__c&quot;,&quot;TR1__Job_Leads__c&quot;,&quot;TR1__Job_Reporting__c&quot;,&quot;TR1__Job__c&quot;,&quot;TR1__Jobee_Parameter_Mapping__c&quot;,&quot;TR1__Jobs_Feeds__c&quot;,&quot;TR1__LKIntegrationMapping__c&quot;,&quot;TR1__LK_EasyApplyAPIParameters__c&quot;,&quot;TR1__LK_EasyApplyApplicant__c&quot;,&quot;TR1__LK_IntegrationRecord__c&quot;,&quot;TR1__LabelUtility__c&quot;,&quot;TR1__LinkedIn_App__c&quot;,&quot;TR1__MassResumeProcessor__c&quot;,&quot;TR1__Mass_Job_Monitor__c&quot;,&quot;TR1__Mass_Reject__c&quot;,&quot;TR1__Master_Skill__c&quot;,&quot;TR1__Master_Skills_Translation__c&quot;,&quot;TR1__Matching_Job_Fields_in_Scheduler_Popup__c&quot;,&quot;TR1__Message__c&quot;,&quot;TR1__Mini_Profile__c&quot;,&quot;TR1__Monitor_Bulk_Job__c&quot;,&quot;TR1__Offer__c&quot;,&quot;TR1__Opportunity_Discussed__c&quot;,&quot;TR1__Other_Utility__c&quot;,&quot;TR1__Potential__c&quot;,&quot;TR1__Purchase_Order_Spend__c&quot;,&quot;TR1__Purchase_Order__c&quot;,&quot;TR1__Qualification_Package__c&quot;,&quot;TR1__Qualification__c&quot;,&quot;TR1__RC_Article__c&quot;,&quot;TR1__RateLimit__c&quot;,&quot;TR1__RatePeriod__c&quot;,&quot;TR1__Rate__c&quot;,&quot;TR1__Rates_Mapping__c&quot;,&quot;TR1__Reference__c&quot;,&quot;TR1__Report_Utility__c&quot;,&quot;TR1__Resource_Availability_Overlap__c&quot;,&quot;TR1__ResumeParserCredentials__c&quot;,&quot;TR1__ResumeSearch__c&quot;,&quot;TR1__SAM_User_Settings__c&quot;,&quot;TR1__SF_Purchase_Order_Send__c&quot;,&quot;TR1__SF_Purchase_Order__c&quot;,&quot;TR1__Saved_Search_Contact_Link__c&quot;,&quot;TR1__Saved_Search__c&quot;,&quot;TR1__SchedulerMethods__c&quot;,&quot;TR1__Scheduler_Utilities__c&quot;,&quot;TR1__Screening__c&quot;,&quot;TR1__Search_History__c&quot;,&quot;TR1__Search_Synonym__c&quot;,&quot;TR1__Send_Out_Schedule_V2__c&quot;,&quot;TR1__Send_Out_Schedule__c&quot;,&quot;TR1__Send_Out__c&quot;,&quot;TR1__ShiftWork__c&quot;,&quot;TR1__Skills__c&quot;,&quot;TR1__StateRegionalAreaMapping__c&quot;,&quot;TR1__Submittal__c&quot;,&quot;TR1__SystemProperties__c&quot;,&quot;TR1__TalentRoverProperties__c&quot;,&quot;TR1__Template__c&quot;,&quot;TR1__TextKernel__c&quot;,&quot;TR1__TimeType__c&quot;,&quot;TR1__Timesheet_Detail__c&quot;,&quot;TR1__Timesheet__c&quot;,&quot;TR1__Train_Station__c&quot;,&quot;TR1__UserSubscription__c&quot;,&quot;TR1__Vacancy_D2D__c&quot;,&quot;TR1__Worker_Comp__c&quot;,&quot;TR1__Zip_Code_Mapping__c&quot;,&quot;TabDefinition&quot;,&quot;Task&quot;,&quot;Tenant&quot;,&quot;TenantParameterMap&quot;,&quot;TimeSheet&quot;,&quot;TimeSheetEntry&quot;,&quot;TimeSheetTemplate&quot;,&quot;TimeSlot&quot;,&quot;Topic&quot;,&quot;TrialEnvironmentSignup&quot;,&quot;UsageEntitlement&quot;,&quot;UsageEntitlementPeriod&quot;,&quot;UsageEntitlementUsage&quot;,&quot;UsageFactor&quot;,&quot;User&quot;,&quot;UserAppMenuItem&quot;,&quot;UserLicenseDefinition&quot;,&quot;Vacanc_Category_Mapping__c&quot;,&quot;Vacancy_Country_Mapping__c&quot;,&quot;Vacancy_Education_Level__c&quot;,&quot;Vacancy_Employment_Type_Mapping__c&quot;,&quot;Vacancy_Experience_Duration_Mapping__c&quot;,&quot;Vacancy_Industry_Mapping__c&quot;,&quot;Vacancy_Level_Mapping__c&quot;,&quot;Vacancy_Parameter_Mapping__c&quot;,&quot;Vacancy_Salary_Frequency__c&quot;,&quot;Vacancy_Shift_Mapping__c&quot;,&quot;Vacancy_Status_Mapping__c&quot;,&quot;Vacancy_Sub_Catagory_Mapping__c&quot;,&quot;VisionPredictionSettings&quot;,&quot;Visit&quot;,&quot;WorkCapacityLimit&quot;,&quot;WorkCapacityUsage&quot;,&quot;WorkOrder&quot;,&quot;WorkOrderLineItem&quot;,&quot;WorkSkillRouting&quot;,&quot;WorkType&quot;,&quot;WorkTypeGroup&quot;,&quot;WorkTypeGroupMember&quot;],&quot;appId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;storable&quot;:true},{&quot;id&quot;:&quot;1468;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getKeyPrefixesWithRecordTypes&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=27&amp;ui-force-components-controllers-platformStateManager.PlatformStateManager.getActionOverrides=1&amp;ui-force-components-controllers-platformStateManager.PlatformStateManager.getKeyPrefixesWithRecordTypes=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">710900000009564d0d</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1343 /aura?r=23&amp;ui-search-components-forcesearch-sgdp.MRUCache.getGlobalMrus=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1387;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.search.components.forcesearch.sgdp.MRUCacheController/ACTION$getGlobalMrus&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;maxResults&quot;:200,&quot;lastTenMrus&quot;:null}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=23&amp;ui-search-components-forcesearch-sgdp.MRUCache.getGlobalMrus=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">70103000000bc9c6d4</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1354 /aura?r=28&amp;ui-global-components-one-onboardingManager.OnboardingManager.getPayload=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1479;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.onboardingManager.OnboardingManagerController/ACTION$getPayload&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=28&amp;ui-global-components-one-onboardingManager.OnboardingManager.getPayload=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">7256100000027b9cb8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1341 /_nc_external/system/security/session/SessionTimeServlet" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="buster" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">buster</stringProp>
                  <stringProp name="Argument.value">${__time(,)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/_nc_external/system/security/session/SessionTimeServlet</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1345 /aura?r=24&amp;ui-setup-components-aura-components-gear.Gear.getGearSetupApps=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1419;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.setup.components.aura.components.gear.GearController/ACTION$getGearSetupApps&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;customAppId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=24&amp;ui-setup-components-aura-components-gear.Gear.getGearSetupApps=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">7010500000016cad2d</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="S2_03_Click_Parser" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1360 /aura?r=29&amp;aura.Component.getComponent=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1584;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$getComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;name&quot;:&quot;markup://forceChatter:lightningComponent&quot;,&quot;attributes&quot;:{&quot;contextualMessages&quot;:[],&quot;publisherId&quot;:&quot;00D3F0000009PPi:Global::Dockable:Desktop:09D1N000007PtSd&quot;,&quot;publisherFeedType&quot;:&quot;News&quot;,&quot;quickActionLabel&quot;:&quot;Resume Parser&quot;,&quot;quickActionApiName&quot;:&quot;TR1__Lightning_Resume_Parser&quot;,&quot;quickActionSubjectId&quot;:&quot;0051N000005pgpoQAA&quot;,&quot;isComposerContext&quot;:true,&quot;isInDockingPanel&quot;:true}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=29&amp;aura.Component.getComponent=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">924510000002d69061</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1361 /aura?r=30&amp;TR1.DocumentParser.fetchCompLiterals=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1612;a&quot;,&quot;descriptor&quot;:&quot;apex://TR1.DocumentParserController/ACTION$fetchCompLiterals&quot;,&quot;callingDescriptor&quot;:&quot;markup://TR1:DocumentParser&quot;,&quot;params&quot;:{},&quot;version&quot;:null,&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=30&amp;TR1.DocumentParser.fetchCompLiterals=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">9384000000041260b5</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1362 /aura?r=31&amp;ui-instrumentation-components-beacon.InstrumentationBeacon.sendData=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1620;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.instrumentation.components.beacon.InstrumentationBeaconController/ACTION$sendData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:70089,\&quot;duration\&quot;:19,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;forceSearch:searchGDPCachePermsAndPrefs\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-search-sgdp-request-getPermsAndPrefs\&quot;,\&quot;attributes\&quot;:{\&quot;tStart\&quot;:1559032442131,\&quot;cacheHit\&quot;:true,\&quot;etCacheGet\&quot;:2,\&quot;tSending\&quot;:1559032442133,\&quot;etDataCopy\&quot;:0,\&quot;tEnd\&quot;:1559032442151,\&quot;etSendDataWait\&quot;:18,\&quot;etTransaction\&quot;:20,\&quot;name\&quot;:\&quot;DEFAULT\&quot;,\&quot;groupId\&quot;:\&quot;DEFAULT\&quot;,\&quot;requestType\&quot;:\&quot;getPermsAndPrefs\&quot;,\&quot;requestId\&quot;:\&quot;forceSearchInputDesktop:103:0;p\&quot;,\&quot;requestCmp\&quot;:\&quot;forceSearchInputDesktop\&quot;,\&quot;requestCmpId\&quot;:\&quot;103:0;p\&quot;,\&quot;params\&quot;:{},\&quot;sourceCmp\&quot;:\&quot;forceSearch:searchGDPCachePermsAndPrefs\&quot;,\&quot;time\&quot;:1559032442151,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:70091,\&quot;duration\&quot;:26,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;forceSearch:searchGDPCacheScopes\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-search-sgdp-request-getScopeMaps\&quot;,\&quot;attributes\&quot;:{\&quot;tStart\&quot;:1559032442133,\&quot;cacheHit\&quot;:true,\&quot;etCacheGet\&quot;:2,\&quot;tSending\&quot;:1559032442135,\&quot;etDataCopy\&quot;:0,\&quot;tEnd\&quot;:1559032442159,\&quot;etSendDataWait\&quot;:24,\&quot;etTransaction\&quot;:26,\&quot;name\&quot;:\&quot;DEFAULT\&quot;,\&quot;groupId\&quot;:\&quot;DEFAULT\&quot;,\&quot;requestType\&quot;:\&quot;getScopeMaps\&quot;,\&quot;requestId\&quot;:\&quot;forceSearchInputDesktop:103:0;p\&quot;,\&quot;requestCmp\&quot;:\&quot;forceSearchInputDesktop\&quot;,\&quot;requestCmpId\&quot;:\&quot;103:0;p\&quot;,\&quot;params\&quot;:{\&quot;scopeTypes\&quot;:[\&quot;FILTER\&quot;,\&quot;SMART_SCOPE\&quot;,\&quot;PRIMARY\&quot;]},\&quot;sourceCmp\&quot;:\&quot;forceSearch:searchGDPCacheScopes\&quot;,\&quot;time\&quot;:1559032442159,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:72707,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:null,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-notification\&quot;,\&quot;attributes\&quot;:{\&quot;data\&quot;:{\&quot;notificationSupported\&quot;:true,\&quot;defaultNotificationPerm\&quot;:\&quot;default\&quot;,\&quot;userSetNotificationPerm\&quot;:\&quot;default\&quot;},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:14,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;session-timeout-notification\&quot;,\&quot;scope\&quot;:\&quot;sessiontimeoutwarn\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:70087,\&quot;duration\&quot;:2662,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (196)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:71079,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1}],\&quot;transport\&quot;:[{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70099,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:21,\&quot;requestLength\&quot;:2968,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;1379;a\&quot;,\&quot;1380;a\&quot;,\&quot;1382;a\&quot;,\&quot;1383;a\&quot;,\&quot;1385;a\&quot;,\&quot;1409;a\&quot;,\&quot;1410;a\&quot;,\&quot;1414;a\&quot;,\&quot;1417;a\&quot;],\&quot;requestId\&quot;:\&quot;70100000000c575be7\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:31955,\&quot;xhrDuration\&quot;:921,\&quot;xhrStall\&quot;:24,\&quot;startTime\&quot;:70100,\&quot;fetchStart\&quot;:70100,\&quot;requestStart\&quot;:70124,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:25,\&quot;transfer\&quot;:896,\&quot;transferSize\&quot;:33888,\&quot;serverTime\&quot;:107,\&quot;xhrDelay\&quot;:1},\&quot;duration\&quot;:922},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70105,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:25,\&quot;requestLength\&quot;:830,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;1420;a\&quot;],\&quot;requestId\&quot;:\&quot;70105000000c091ac0\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6971,\&quot;xhrDuration\&quot;:1024,\&quot;xhrStall\&quot;:305,\&quot;startTime\&quot;:70105,\&quot;fetchStart\&quot;:70105,\&quot;requestStart\&quot;:70410,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:306,\&quot;transfer\&quot;:718,\&quot;transferSize\&quot;:8903,\&quot;serverTime\&quot;:29,\&quot;xhrDelay\&quot;:42},\&quot;duration\&quot;:1066},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70101,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:22,\&quot;requestLength\&quot;:175971,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;1378;a\&quot;],\&quot;requestId\&quot;:\&quot;70101000000d18900e\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6814,\&quot;xhrDuration\&quot;:1173,\&quot;xhrStall\&quot;:22,\&quot;startTime\&quot;:70102,\&quot;fetchStart\&quot;:70102,\&quot;requestStart\&quot;:70124,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:23,\&quot;transfer\&quot;:1150,\&quot;transferSize\&quot;:8747,\&quot;serverTime\&quot;:293,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:1176},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71067,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:26,\&quot;requestLength\&quot;:832,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;1421;a\&quot;],\&quot;requestId\&quot;:\&quot;71067000000826ec7c\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:8371,\&quot;xhrDuration\&quot;:794,\&quot;xhrStall\&quot;:61,\&quot;startTime\&quot;:71068,\&quot;fetchStart\&quot;:71068,\&quot;requestStart\&quot;:71129,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:61,\&quot;transfer\&quot;:733,\&quot;transferSize\&quot;:10303,\&quot;serverTime\&quot;:45,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:796},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71090,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:27,\&quot;requestLength\&quot;:13495,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;1467;a\&quot;,\&quot;1468;a\&quot;],\&quot;requestId\&quot;:\&quot;710900000009564d0d\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:13109,\&quot;xhrDuration\&quot;:1288,\&quot;xhrStall\&quot;:182,\&quot;startTime\&quot;:71094,\&quot;fetchStart\&quot;:71094,\&quot;requestStart\&quot;:71276,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:183,\&quot;transfer\&quot;:1105,\&quot;transferSize\&quot;:15042,\&quot;serverTime\&quot;:297,\&quot;xhrDelay\&quot;:5},\&quot;duration\&quot;:1293},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70121,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:6,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:2425,\&quot;startTime\&quot;:70122,\&quot;fetchStart\&quot;:71715,\&quot;requestStart\&quot;:71863,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:1592,\&quot;ttfb\&quot;:1741,\&quot;transfer\&quot;:684,\&quot;transferSize\&quot;:69650,\&quot;encodedBodySize\&quot;:68701,\&quot;decodedBodySize\&quot;:68701,\&quot;serverTime\&quot;:29,\&quot;defs\&quot;:[\&quot;markup://one:onboardingManager\&quot;],\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:2429},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70103,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:23,\&quot;requestLength\&quot;:855,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;1387;a\&quot;],\&quot;requestId\&quot;:\&quot;70103000000bc9c6d4\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:106370,\&quot;xhrDuration\&quot;:2641,\&quot;xhrStall\&quot;:21,\&quot;startTime\&quot;:70103,\&quot;fetchStart\&quot;:70103,\&quot;requestStart\&quot;:70124,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:22,\&quot;transfer\&quot;:2619,\&quot;transferSize\&quot;:108303,\&quot;serverTime\&quot;:447,\&quot;xhrDelay\&quot;:0},\&quot;duration\&quot;:2641}],\&quot;actions\&quot;:[{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70094,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1409;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;one:globalCreate\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.global.components.one.globalCreate.GlobalCreateController/ACTION$getDockableActionsList\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:45,\&quot;db\&quot;:12,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:16,\&quot;duration\&quot;:971},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70094,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1410;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;uns:notifications\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.notifications.components.notifications.controller.NotificationsController/ACTION$getNotifications\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:3,\&quot;db\&quot;:1,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:971},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70096,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1414;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;one:userProfileCardData\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.global.components.one.userProfileCard.UserProfileCardController/ACTION$loadProfileCardInfo\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:970},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70096,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1417;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;runtime_all_walkthroughs:player\&quot;,\&quot;def\&quot;:\&quot;java://ui.walkthroughs.components.controllers.PlayerController/ACTION$willDisplayWalkthroughInternalTool\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:970},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70097,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1420;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;setup:gear\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.setup.components.aura.components.gear.GearController/ACTION$getPermissions\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:6,\&quot;enqueueWait\&quot;:2,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:24,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:1075},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70097,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1421;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;setup:gear\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.setup.components.aura.components.gear.GearController/ACTION$getEntitySupport\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:968,\&quot;enqueueWait\&quot;:2,\&quot;serverTime\&quot;:{\&quot;total\&quot;:18,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:43,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:1771},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71088,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1467;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getActionOverrides\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:2,\&quot;serverTime\&quot;:{\&quot;total\&quot;:256,\&quot;db\&quot;:3,\&quot;xhrServerTime\&quot;:292,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:1299},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71095,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1469;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getActionOverrides\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:77,\&quot;enqueueWait\&quot;:2,\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1292},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71089,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1468;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getKeyPrefixesWithRecordTypes\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:8,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:292,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1298},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71095,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1470;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getKeyPrefixesWithRecordTypes\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:77,\&quot;enqueueWait\&quot;:2,\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1293}],\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://ui:menu\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:16},{\&quot;name\&quot;:\&quot;markup://one:onboardingManager\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:7}]},\&quot;owner\&quot;:\&quot;forceSearch:searchGDPCacheMrus\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-search-sgdp-fetch-getGlobalMrus\&quot;,\&quot;attributes\&quot;:{\&quot;tStart\&quot;:1559032442130,\&quot;cacheHit\&quot;:false,\&quot;actionId\&quot;:\&quot;1387;a\&quot;,\&quot;fetchedGlobalMrus\&quot;:200,\&quot;fetchedGlobalMruNumEntities\&quot;:10,\&quot;deletedGlobalMrus\&quot;:0,\&quot;name\&quot;:\&quot;DEFAULT\&quot;,\&quot;groupId\&quot;:\&quot;DEFAULT\&quot;,\&quot;requestType\&quot;:\&quot;getGlobalMrus\&quot;,\&quot;requestId\&quot;:\&quot;forceSearchSearchGDPCacheMrus:192:0;p\&quot;,\&quot;requestCmp\&quot;:\&quot;forceSearchSearchGDPCacheMrus\&quot;,\&quot;requestCmpId\&quot;:\&quot;192:0;p\&quot;,\&quot;params\&quot;:{},\&quot;sourceCmp\&quot;:\&quot;forceSearch:searchGDPCacheMrus\&quot;,\&quot;time\&quot;:1559032444792,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:89796,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;aura:html\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;click\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:15,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;global-action-button__menu-trigger-link\&quot;,\&quot;scope\&quot;:\&quot;one-header\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:90724,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;aura:html\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;click\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:16,\&quot;locator\&quot;:{\&quot;context\&quot;:{\&quot;devNameOrId\&quot;:\&quot;TR1__Lightning_Resume_Parser\&quot;},\&quot;target\&quot;:\&quot;global-action-item__menu-item\&quot;,\&quot;scope\&quot;:\&quot;one-header\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:90760,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;force:dockingPanel\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-click\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:17,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;force-dockingPanel-create\&quot;,\&quot;scope\&quot;:\&quot;one-one\&quot;,\&quot;context\&quot;:{\&quot;type\&quot;:\&quot;TR1__Lightning_Resume_Parser\&quot;}},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:70081,\&quot;duration\&quot;:24609,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (196)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:71079,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (198)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:90772,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (199)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:90772,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (200)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:90773,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (201)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:90774,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (203)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93864,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (204)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93866,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (205)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93866,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (206)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93868,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:6},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (207)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93874,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (208)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93875,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (209)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93876,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (210)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93876,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (211)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93876,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (212)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93877,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (213)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93878,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (214)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93879,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (215)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93879,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (216)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93881,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93885,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (221)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:94637,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:94639,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:3}],\&quot;transport\&quot;:[{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70099,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:21,\&quot;requestLength\&quot;:2968,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;1379;a\&quot;,\&quot;1380;a\&quot;,\&quot;1382;a\&quot;,\&quot;1383;a\&quot;,\&quot;1385;a\&quot;,\&quot;1409;a\&quot;,\&quot;1410;a\&quot;,\&quot;1414;a\&quot;,\&quot;1417;a\&quot;],\&quot;requestId\&quot;:\&quot;70100000000c575be7\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:31955,\&quot;xhrDuration\&quot;:921,\&quot;xhrStall\&quot;:24,\&quot;startTime\&quot;:70100,\&quot;fetchStart\&quot;:70100,\&quot;requestStart\&quot;:70124,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:25,\&quot;transfer\&quot;:896,\&quot;transferSize\&quot;:33888,\&quot;serverTime\&quot;:107,\&quot;xhrDelay\&quot;:1},\&quot;duration\&quot;:922},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70105,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:25,\&quot;requestLength\&quot;:830,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;1420;a\&quot;],\&quot;requestId\&quot;:\&quot;70105000000c091ac0\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6971,\&quot;xhrDuration\&quot;:1024,\&quot;xhrStall\&quot;:305,\&quot;startTime\&quot;:70105,\&quot;fetchStart\&quot;:70105,\&quot;requestStart\&quot;:70410,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:306,\&quot;transfer\&quot;:718,\&quot;transferSize\&quot;:8903,\&quot;serverTime\&quot;:29,\&quot;xhrDelay\&quot;:42},\&quot;duration\&quot;:1066},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70101,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:22,\&quot;requestLength\&quot;:175971,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;1378;a\&quot;],\&quot;requestId\&quot;:\&quot;70101000000d18900e\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6814,\&quot;xhrDuration\&quot;:1173,\&quot;xhrStall\&quot;:22,\&quot;startTime\&quot;:70102,\&quot;fetchStart\&quot;:70102,\&quot;requestStart\&quot;:70124,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:23,\&quot;transfer\&quot;:1150,\&quot;transferSize\&quot;:8747,\&quot;serverTime\&quot;:293,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:1176},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71067,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:26,\&quot;requestLength\&quot;:832,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;1421;a\&quot;],\&quot;requestId\&quot;:\&quot;71067000000826ec7c\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:8371,\&quot;xhrDuration\&quot;:794,\&quot;xhrStall\&quot;:61,\&quot;startTime\&quot;:71068,\&quot;fetchStart\&quot;:71068,\&quot;requestStart\&quot;:71129,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:61,\&quot;transfer\&quot;:733,\&quot;transferSize\&quot;:10303,\&quot;serverTime\&quot;:45,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:796},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71090,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:27,\&quot;requestLength\&quot;:13495,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;1467;a\&quot;,\&quot;1468;a\&quot;],\&quot;requestId\&quot;:\&quot;710900000009564d0d\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:13109,\&quot;xhrDuration\&quot;:1288,\&quot;xhrStall\&quot;:182,\&quot;startTime\&quot;:71094,\&quot;fetchStart\&quot;:71094,\&quot;requestStart\&quot;:71276,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:183,\&quot;transfer\&quot;:1105,\&quot;transferSize\&quot;:15042,\&quot;serverTime\&quot;:297,\&quot;xhrDelay\&quot;:5},\&quot;duration\&quot;:1293},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70121,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:6,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:2425,\&quot;startTime\&quot;:70122,\&quot;fetchStart\&quot;:71715,\&quot;requestStart\&quot;:71863,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:1592,\&quot;ttfb\&quot;:1741,\&quot;transfer\&quot;:684,\&quot;transferSize\&quot;:69650,\&quot;encodedBodySize\&quot;:68701,\&quot;decodedBodySize\&quot;:68701,\&quot;serverTime\&quot;:29,\&quot;defs\&quot;:[\&quot;markup://one:onboardingManager\&quot;],\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:2429},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70103,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:23,\&quot;requestLength\&quot;:855,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;1387;a\&quot;],\&quot;requestId\&quot;:\&quot;70103000000bc9c6d4\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:106370,\&quot;xhrDuration\&quot;:2641,\&quot;xhrStall\&quot;:21,\&quot;startTime\&quot;:70103,\&quot;fetchStart\&quot;:70103,\&quot;requestStart\&quot;:70124,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:22,\&quot;transfer\&quot;:2619,\&quot;transferSize\&quot;:108303,\&quot;serverTime\&quot;:447,\&quot;xhrDelay\&quot;:0},\&quot;duration\&quot;:2641},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:72561,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:28,\&quot;requestLength\&quot;:817,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;1479;a\&quot;],\&quot;requestId\&quot;:\&quot;7256100000027b9cb8\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6800,\&quot;xhrDuration\&quot;:763,\&quot;xhrStall\&quot;:3,\&quot;startTime\&quot;:72561,\&quot;fetchStart\&quot;:72561,\&quot;requestStart\&quot;:72564,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:3,\&quot;transfer\&quot;:760,\&quot;transferSize\&quot;:8732,\&quot;serverTime\&quot;:36,\&quot;xhrDelay\&quot;:1},\&quot;duration\&quot;:764},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70105,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:24,\&quot;requestLength\&quot;:876,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;1419;a\&quot;],\&quot;requestId\&quot;:\&quot;7010500000016cad2d\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:7071,\&quot;xhrDuration\&quot;:4144,\&quot;xhrStall\&quot;:20,\&quot;startTime\&quot;:70105,\&quot;fetchStart\&quot;:70105,\&quot;requestStart\&quot;:70125,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:20,\&quot;transfer\&quot;:4124,\&quot;transferSize\&quot;:9003,\&quot;serverTime\&quot;:45,\&quot;xhrDelay\&quot;:0},\&quot;duration\&quot;:4144},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:90798,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:7,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:1645,\&quot;startTime\&quot;:90799,\&quot;fetchStart\&quot;:91624,\&quot;requestStart\&quot;:91624,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:825,\&quot;ttfb\&quot;:826,\&quot;transfer\&quot;:819,\&quot;transferSize\&quot;:224113,\&quot;encodedBodySize\&quot;:223162,\&quot;decodedBodySize\&quot;:223162,\&quot;serverTime\&quot;:124,\&quot;defs\&quot;:[\&quot;markup://forceChatter:lightningComponent\&quot;],\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:1649},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:92451,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:29,\&quot;requestLength\&quot;:1252,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;1584;a\&quot;],\&quot;requestId\&quot;:\&quot;924510000002d69061\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:11651,\&quot;xhrDuration\&quot;:1325,\&quot;xhrStall\&quot;:1,\&quot;startTime\&quot;:92451,\&quot;fetchStart\&quot;:92451,\&quot;requestStart\&quot;:92452,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:3,\&quot;transfer\&quot;:1322,\&quot;transferSize\&quot;:13584,\&quot;serverTime\&quot;:632,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:1327},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:93840,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:30,\&quot;requestLength\&quot;:845,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;1612;a\&quot;],\&quot;requestId\&quot;:\&quot;9384000000041260b5\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:8091,\&quot;xhrDuration\&quot;:788,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:93841,\&quot;fetchStart\&quot;:93841,\&quot;requestStart\&quot;:93843,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:2,\&quot;transfer\&quot;:786,\&quot;transferSize\&quot;:10023,\&quot;serverTime\&quot;:99,\&quot;xhrDelay\&quot;:1},\&quot;duration\&quot;:789}],\&quot;actions\&quot;:[{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70084,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1379;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:defenseHook\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.defenseHook.DefenseHookController/ACTION$getDefenseHook\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:13,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:16,\&quot;duration\&quot;:959},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70084,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1380;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;salesforceIdentity:sessionTimeoutWarn\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.identity.components.sessiontimeoutwarn.SessionTimeoutWarnController/ACTION$getSessionTimeoutConfig\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:13,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:960},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70085,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1382;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;support:crossFrameApiManager\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.support.components.crossFrameApiManager.CrossFrameApiManagerController/ACTION$getIsLightningOpenCtiUser\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:14,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:959},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70086,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1383;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;runtime_rtc:rtcDiscoveryBanner\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.rtc.components.aura.components.RtcDiscoveryBannerController/ACTION$getConfig\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:13,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:958},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70087,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1385;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:hostConfig\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.hostConfig.HostConfigController/ACTION$getConfigData\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:12,\&quot;serverTime\&quot;:{\&quot;total\&quot;:21,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:5,\&quot;duration\&quot;:962},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70094,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1409;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;one:globalCreate\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.global.components.one.globalCreate.GlobalCreateController/ACTION$getDockableActionsList\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:45,\&quot;db\&quot;:12,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:16,\&quot;duration\&quot;:971},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70094,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1410;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;uns:notifications\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.notifications.components.notifications.controller.NotificationsController/ACTION$getNotifications\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:3,\&quot;db\&quot;:1,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:971},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70096,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1414;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;one:userProfileCardData\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.global.components.one.userProfileCard.UserProfileCardController/ACTION$loadProfileCardInfo\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:970},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70096,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1417;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;runtime_all_walkthroughs:player\&quot;,\&quot;def\&quot;:\&quot;java://ui.walkthroughs.components.controllers.PlayerController/ACTION$willDisplayWalkthroughInternalTool\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:970},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70097,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1420;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;setup:gear\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.setup.components.aura.components.gear.GearController/ACTION$getPermissions\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:6,\&quot;enqueueWait\&quot;:2,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:24,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:1075},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70081,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1378;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.instrumentation.components.beacon.InstrumentationBeaconController/ACTION$sendData\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:4,\&quot;enqueueWait\&quot;:16,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:290,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1197},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70097,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1421;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;setup:gear\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.setup.components.aura.components.gear.GearController/ACTION$getEntitySupport\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:968,\&quot;enqueueWait\&quot;:2,\&quot;serverTime\&quot;:{\&quot;total\&quot;:18,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:43,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:1771},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71088,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1467;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getActionOverrides\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:2,\&quot;serverTime\&quot;:{\&quot;total\&quot;:256,\&quot;db\&quot;:3,\&quot;xhrServerTime\&quot;:292,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:1299},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71095,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1469;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getActionOverrides\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:77,\&quot;enqueueWait\&quot;:2,\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1292},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71089,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1468;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getKeyPrefixesWithRecordTypes\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:8,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:292,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1298},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71095,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1470;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getKeyPrefixesWithRecordTypes\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:77,\&quot;enqueueWait\&quot;:2,\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1293},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70088,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1387;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;forceSearch:searchGDPCacheMrus\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.search.components.forcesearch.sgdp.MRUCacheController/ACTION$getGlobalMrus\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:6,\&quot;enqueueWait\&quot;:9,\&quot;serverTime\&quot;:{\&quot;total\&quot;:412,\&quot;db\&quot;:1,\&quot;xhrServerTime\&quot;:442,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:3,\&quot;duration\&quot;:2662},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:72560,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1479;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;one:onboardingManager\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.global.components.one.onboardingManager.OnboardingManagerController/ACTION$getPayload\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:5,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:32,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:767},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70096,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1419;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;setup:gear\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.setup.components.aura.components.gear.GearController/ACTION$getGearSetupApps\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:6,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:17,\&quot;db\&quot;:9,\&quot;xhrServerTime\&quot;:44,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:4,\&quot;duration\&quot;:4160},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:92451,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1584;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ComponentController/ACTION$getComponent\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;params\&quot;:{\&quot;name\&quot;:\&quot;markup://forceChatter:lightningComponent\&quot;},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:130,\&quot;db\&quot;:3,\&quot;xhrServerTime\&quot;:475,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:58,\&quot;duration\&quot;:1387},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:93837,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1612;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;TR1:DocumentParser\&quot;,\&quot;def\&quot;:\&quot;apex://TR1.DocumentParserController/ACTION$fetchCompLiterals\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:9,\&quot;db\&quot;:2,\&quot;xhrServerTime\&quot;:94,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:3,\&quot;duration\&quot;:796}],\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://ui:menu\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:16},{\&quot;name\&quot;:\&quot;markup://one:onboardingManager\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:7},{\&quot;name\&quot;:\&quot;markup://ui:tooltipAdvanced\&quot;,\&quot;createCount\&quot;:2,\&quot;createTimeTotal\&quot;:12},{\&quot;name\&quot;:\&quot;markup://force:dockableActionRunnable\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:56},{\&quot;name\&quot;:\&quot;markup://forceChatter:lightningComponent\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:57},{\&quot;name\&quot;:\&quot;markup://lightning:radioGroup\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:0}]},\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;pageTracker\&quot;,\&quot;attributes\&quot;:{\&quot;pageId\&quot;:1,\&quot;pageTrackerId\&quot;:1,\&quot;phase\&quot;:\&quot;CONTINUE\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;}]}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=31&amp;ui-instrumentation-components-beacon.InstrumentationBeacon.sendData=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">94814000000ee78bcf</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="S2_04_Upload_300txt_resume" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1365 /aura?r=32&amp;ui-content-components-forceContent-fileUploadAction.FileUploadAction.getUploadConfig=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1624;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.content.components.forceContent.fileUploadAction.FileUploadActionController/ACTION$getUploadConfig&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=32&amp;ui-content-components-forceContent-fileUploadAction.FileUploadAction.getUploadConfig=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">113754000000909caa</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1367 /aura?r=33&amp;ui-chatter-components-aura-components-forceChatter-chatter.PublisherFileAttachment.getFileUploaderParams=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1670;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.chatter.components.aura.components.forceChatter.chatter.PublisherFileAttachmentController/ACTION$getFileUploaderParams&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=33&amp;ui-chatter-components-aura-components-forceChatter-chatter.PublisherFileAttachment.getFileUploaderParams=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">114581000000b77cc0</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="csrfToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">csrfToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;csrfToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1368 /chatter/handlers/file/body" enabled="true">
            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
              <collectionProp name="HTTPFileArgs.files">
                <elementProp name="${path}" elementType="HTTPFileArg">
                  <stringProp name="File.path">${path}</stringProp>
                  <stringProp name="File.paramname">file</stringProp>
                  <stringProp name="File.mimetype">text/plain</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                  <stringProp name="Argument.value">${csrfToken}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fromUITier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromUITier</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="target" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">target</stringProp>
                  <stringProp name="Argument.value">ContentVersion</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/chatter/handlers/file/body</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="content_body_id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">content_body_id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;content_body_id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1369 /aura?r=34&amp;ui-chatter-components-aura-components-forceChatter-chatter.PublisherFileAttachment.saveContentVersion=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1691;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.chatter.components.aura.components.forceChatter.chatter.PublisherFileAttachmentController/ACTION$saveContentVersion&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;title&quot;:&quot;${name}&quot;,&quot;firstPublishLocationId&quot;:&quot;${firstPublishLocationId}&quot;,&quot;pathOnClient&quot;:&quot;${doc}&quot;,&quot;contentBodyId&quot;:&quot;${content_body_id}&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=34&amp;ui-chatter-components-aura-components-forceChatter-chatter.PublisherFileAttachment.saveContentVersion=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">1170790000005e133d</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="docid" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">docid</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;docid&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="S2_05_Click_Parser" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1370 /aura?r=35&amp;TR1.DocumentParser.parseDocument=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1730;a&quot;,&quot;descriptor&quot;:&quot;apex://TR1.DocumentParserController/ACTION$parseDocument&quot;,&quot;callingDescriptor&quot;:&quot;markup://TR1:DocumentParser&quot;,&quot;params&quot;:{&quot;docId&quot;:&quot;${docid}&quot;,&quot;docName&quot;:&quot;${doc}&quot;},&quot;version&quot;:null}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=35&amp;TR1.DocumentParser.parseDocument=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">13452500000060cbd3</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="data" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;data&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1377 /aura?r=40&amp;ui-force-components-controllers-recordGlobalValueProvider.RecordGvp.getRecord=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1737;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$getRecord&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordDescriptor&quot;:&quot;${data}.undefined.null.null.null.Id,RecordTypeId.VIEW.true.null.null.null&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=40&amp;ui-force-components-controllers-recordGlobalValueProvider.RecordGvp.getRecord=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">22303100000064125e</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1378 /aura?r=41&amp;ui-force-components-controllers-detail.Detail.getEntityConfig=1&amp;ui-force-components-controllers-detail.Detail.getRecord=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1923;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.detail.DetailController/ACTION$getRecord&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;${data}&quot;,&quot;record&quot;:null,&quot;inContextOfComponent&quot;:&quot;&quot;,&quot;mode&quot;:&quot;EDIT&quot;,&quot;layoutType&quot;:&quot;FULL&quot;,&quot;defaultFieldValues&quot;:null},&quot;storable&quot;:true},{&quot;id&quot;:&quot;1924;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.detail.DetailController/ACTION$getEntityConfig&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;${data}&quot;,&quot;layoutType&quot;:&quot;FULL&quot;,&quot;mode&quot;:&quot;EDIT&quot;},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=41&amp;ui-force-components-controllers-detail.Detail.getEntityConfig=1&amp;ui-force-components-controllers-detail.Detail.getRecord=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">2239670000008361a0</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1379 /aura?r=42&amp;ui-flexipage-components-page.FlexipageControllerV2.getPage=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1979;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.flexipage.components.page.FlexipageControllerV2/ACTION$getPage&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;flexiPageDeveloperName&quot;:&quot;Contact_3_Column_Page3&quot;,&quot;sObjectName&quot;:&quot;Contact&quot;},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=42&amp;ui-flexipage-components-page.FlexipageControllerV2.getPage=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">224006000000137b5e</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1380 /aura?r=43&amp;ui-force-components-controllers-recordLayoutBroker.RecordLayoutBroker.getRecordAndLayout=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1973;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordLayoutBroker.RecordLayoutBrokerController/ACTION$getRecordAndLayout&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;${data}&quot;,&quot;mode&quot;:&quot;VIEW&quot;,&quot;type&quot;:&quot;COMPACT&quot;,&quot;stencilOverride&quot;:&quot;force:highlightsStencilDesktop&quot;,&quot;inContextOfComponent&quot;:&quot;force:highlights&quot;,&quot;pageSize&quot;:-1,&quot;offset&quot;:0,&quot;updateMru&quot;:true,&quot;errorContext&quot;:{&quot;componentStack&quot;:&quot;[laf:pageHost] &gt; [one:recordHomeFlexipage] &gt; [one:recordHomeFlexipage] &gt; [one:recordHomeFlexipage] &gt; [force:recordLayoutBroker] &gt; [force:recordLayoutBroker] &gt; [force:recordLayoutBroker]&quot;}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=43&amp;ui-force-components-controllers-recordLayoutBroker.RecordLayoutBroker.getRecordAndLayout=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">224011000000648cfc</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1384 /aura?r=44&amp;ui-force-components-controllers-dedupe.DedupeManager.getConfig=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;2043;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.dedupe.DedupeManagerController/ACTION$getConfig&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;entityApiName&quot;:&quot;Contact&quot;,&quot;recordTypeId&quot;:&quot;0121N000001ZxLTQA0&quot;,&quot;recordId&quot;:&quot;${data}&quot;},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=44&amp;ui-force-components-controllers-dedupe.DedupeManager.getConfig=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">226351000000080d61</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1385 /aura?r=45&amp;ui-force-components-controllers-inputAddress.InputAddress.getAddressAutocompleteUrl=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;2812;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.inputAddress.InputAddressController/ACTION$getAddressAutocompleteUrl&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=45&amp;ui-force-components-controllers-inputAddress.InputAddress.getAddressAutocompleteUrl=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">2273650000006acfc8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1388 /apex/LinkedInProfilePluginPage" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                  <stringProp name="Argument.value">${data}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tour" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tour</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isdtp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isdtp</stringProp>
                  <stringProp name="Argument.value">p1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sfdcIFrameOrigin" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sfdcIFrameOrigin</stringProp>
                  <stringProp name="Argument.value">${protocol}://${host}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sfdcIFrameHost" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sfdcIFrameHost</stringProp>
                  <stringProp name="Argument.value">web</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="nonce" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">nonce</stringProp>
                  <stringProp name="Argument.value">${nonce}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ltn_app_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ltn_app_id</stringProp>
                  <stringProp name="Argument.value">${id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">clc</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">tr-release2--regtest--tr1.cs92.visual.force.com</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apex/LinkedInProfilePluginPage</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1389 /apex/ResumeManager5" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                  <stringProp name="Argument.value">${data}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tour" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tour</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isdtp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isdtp</stringProp>
                  <stringProp name="Argument.value">p1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sfdcIFrameOrigin" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sfdcIFrameOrigin</stringProp>
                  <stringProp name="Argument.value">${protocol}://${host}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sfdcIFrameHost" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sfdcIFrameHost</stringProp>
                  <stringProp name="Argument.value">web</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="nonce" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">nonce</stringProp>
                  <stringProp name="Argument.value">${nonce}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ltn_app_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ltn_app_id</stringProp>
                  <stringProp name="Argument.value">${id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">clc</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">tr-release2--regtest--tr1.cs92.visual.force.com</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apex/ResumeManager5</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1390 /apex/CandidateManager" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                  <stringProp name="Argument.value">${data}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tour" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tour</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isdtp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isdtp</stringProp>
                  <stringProp name="Argument.value">p1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sfdcIFrameOrigin" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sfdcIFrameOrigin</stringProp>
                  <stringProp name="Argument.value">${protocol}://${host}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sfdcIFrameHost" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sfdcIFrameHost</stringProp>
                  <stringProp name="Argument.value">web</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="nonce" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">nonce</stringProp>
                  <stringProp name="Argument.value">${nonce}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ltn_app_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ltn_app_id</stringProp>
                  <stringProp name="Argument.value">${id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">clc</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">tr-release2--regtest--tr1.cs92.visual.force.com</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apex/CandidateManager</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1391 /aura?r=46&amp;ui-force-components-controllers-recordLayoutBroker.RecordLayoutBroker.getLayout=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1812;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordLayoutBroker.RecordLayoutBrokerController/ACTION$getRecordAndLayout&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;${data}&quot;,&quot;mode&quot;:&quot;VIEW&quot;,&quot;type&quot;:&quot;COMPACT&quot;,&quot;stencilOverride&quot;:&quot;force:highlightsStencilDesktop&quot;,&quot;inContextOfComponent&quot;:&quot;force:highlights&quot;,&quot;pageSize&quot;:-1,&quot;offset&quot;:0,&quot;updateMru&quot;:true,&quot;errorContext&quot;:{&quot;componentStack&quot;:&quot;[laf:pageHost] &gt; [one:recordHomeFlexipage] &gt; [one:recordHomeFlexipage] &gt; [one:recordHomeFlexipage] &gt; [force:recordLayoutBroker] &gt; [force:recordLayoutBroker] &gt; [force:recordLayoutBroker]&quot;}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=46&amp;ui-force-components-controllers-recordLayoutBroker.RecordLayoutBroker.getLayout=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">2287280000008c15c0</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1392 /aura?r=48&amp;TR1.TRS_CreteCACtlr.getselectOptions=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;3692;a&quot;,&quot;descriptor&quot;:&quot;apex://TR1.TRS_CreteCACtlr/ACTION$getselectOptions&quot;,&quot;callingDescriptor&quot;:&quot;markup://TR1:CreateAvailability&quot;,&quot;params&quot;:{&quot;ObjectName&quot;:&quot;Candidate_Availability__c&quot;,&quot;fld&quot;:&quot;Type__c&quot;},&quot;version&quot;:null}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=48&amp;TR1.TRS_CreteCACtlr.getselectOptions=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">228751000000d49898</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1393 /aura?r=47&amp;TR1.TRS_CreteCACtlr.getOrgDefaults=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;3691;a&quot;,&quot;descriptor&quot;:&quot;apex://TR1.TRS_CreteCACtlr/ACTION$getOrgDefaults&quot;,&quot;callingDescriptor&quot;:&quot;markup://TR1:CreateAvailability&quot;,&quot;params&quot;:{},&quot;version&quot;:null}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=47&amp;TR1.TRS_CreteCACtlr.getOrgDefaults=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">228749000000c38de8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1396 /resource/1549981040000/TR1__JobApplicationManagerCSS" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/resource/1549981040000/TR1__JobApplicationManagerCSS</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/css,*/*;q=0.1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1397 /resource/1549438193000/TR1__BaseUtility" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/resource/1549438193000/TR1__BaseUtility</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1398 /aura?r=49&amp;ui-merge-components-controller.Merge.getMergeCandidates=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;3744;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.merge.components.controller.MergeController/ACTION$getMergeCandidates&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;0033F00000D3xEgQAJ&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=49&amp;ui-merge-components-controller.Merge.getMergeCandidates=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">228837000000ebc083</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1399 /aura?r=50&amp;ui-force-components-controllers-relatedList.RelatedListContainer.getRelatedListInfos=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;3760;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.relatedList.RelatedListContainerController/ACTION$getRelatedListInfos&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;location&quot;:&quot;ALL&quot;},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=50&amp;ui-force-components-controllers-relatedList.RelatedListContainer.getRelatedListInfos=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">228850000000dcf08a</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1400 /aura?r=51&amp;aura.Component.reportDeprecationUsages=3&amp;ui-force-components-controllers-socialPhoto.SocialPhoto.resolvePhotos=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;3669;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$reportDeprecationUsages&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;usages&quot;:{&quot;AuraComponentService.newComponentDeprecated&quot;:[&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;]}}},{&quot;id&quot;:&quot;3729;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$reportDeprecationUsages&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;usages&quot;:{&quot;AuraComponentService.newComponentDeprecated&quot;:[&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;]}}},{&quot;id&quot;:&quot;3779;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$reportDeprecationUsages&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;usages&quot;:{&quot;AuraComponentService.newComponentDeprecated&quot;:[&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;]}}},{&quot;id&quot;:&quot;3868;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.socialPhoto.SocialPhotoController/ACTION$resolvePhotos&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;records&quot;:{&quot;0011N00001W0YiJQAV&quot;:{}},&quot;refreshCached&quot;:false},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=51&amp;aura.Component.reportDeprecationUsages=3&amp;ui-force-components-controllers-socialPhoto.SocialPhoto.resolvePhotos=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">22898900000067fe33</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1402 /aura?r=52&amp;ui-force-components-controllers-socialPhoto.SocialPhoto.resolvePhotos=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;3972;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.socialPhoto.SocialPhotoController/ACTION$resolvePhotos&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;records&quot;:{&quot;0033F00000D3xEgQAJ&quot;:{}},&quot;refreshCached&quot;:false},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=52&amp;ui-force-components-controllers-socialPhoto.SocialPhoto.resolvePhotos=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">2296950000000166af</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1403 /aura?r=53&amp;ui-global-components-one-actionsManager.ActionsManager.handleAction=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;3954;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.actionsManager.ActionsManagerController/ACTION$handleAction&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;recordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;context&quot;:&quot;CHATTER&quot;,&quot;entityApiName&quot;:&quot;Contact&quot;,&quot;record&quot;:{&quot;sobjectType&quot;:&quot;Contact&quot;,&quot;Id&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;RecordTypeId&quot;:&quot;0121N000001ZxLTQA0&quot;,&quot;SystemModstamp&quot;:&quot;2019-05-28T08:36:35.000Z&quot;,&quot;SystemModstamp__f&quot;:&quot;28/05/2019 03:36&quot;,&quot;SystemModstamp__l&quot;:&quot;28/05/2019 03:36&quot;,&quot;Account&quot;:{&quot;sobjectType&quot;:&quot;Account&quot;,&quot;Id&quot;:&quot;0011N00001W0YiJQAV&quot;,&quot;Name&quot;:&quot;PoolAccountName - 7&quot;,&quot;RecordTypeId&quot;:&quot;0121N000001ZxLUQA0&quot;,&quot;RecordType&quot;:{&quot;sobjectType&quot;:&quot;RecordType&quot;,&quot;Id&quot;:&quot;0121N000001ZxLUQA0&quot;,&quot;Name&quot;:&quot;Account&quot;}},&quot;Account__f&quot;:&quot;PoolAccountName - 7&quot;,&quot;Account__l&quot;:&quot;PoolAccountName - 7&quot;,&quot;AccountId&quot;:&quot;0011N00001W0YiJQAV&quot;,&quot;CreatedDate&quot;:&quot;2019-05-28T08:36:26.000Z&quot;,&quot;CreatedDate__f&quot;:&quot;28/05/2019 03:36&quot;,&quot;CreatedDate__l&quot;:&quot;28/05/2019 03:36&quot;,&quot;Email&quot;:&quot;bethy.dimitrova@tut.com&quot;,&quot;FirstName&quot;:&quot;Bethy&quot;,&quot;LastModifiedById&quot;:&quot;0051N000005pgpoQAA&quot;,&quot;LastModifiedDate&quot;:&quot;2019-05-28T08:36:31.000Z&quot;,&quot;LastModifiedDate__f&quot;:&quot;28/05/2019 03:36&quot;,&quot;LastModifiedDate__l&quot;:&quot;28/05/2019 03:36&quot;,&quot;LastName&quot;:&quot;Dimitrova&quot;,&quot;MiddleName&quot;:null,&quot;MobilePhone&quot;:null,&quot;Name&quot;:&quot;Bethy Dimitrova&quot;,&quot;Owner&quot;:{&quot;sobjectType&quot;:&quot;User&quot;,&quot;Id&quot;:&quot;0051N000005pgpoQAA&quot;,&quot;Name&quot;:&quot;Talent Rover Administrator&quot;,&quot;SystemModstamp&quot;:&quot;2019-05-28T08:07:17.000Z&quot;,&quot;SystemModstamp__f&quot;:&quot;28/05/2019 03:07&quot;,&quot;SystemModstamp__l&quot;:&quot;28/05/2019 03:07&quot;},&quot;Owner__f&quot;:&quot;Talent Rover Administrator&quot;,&quot;Owner__l&quot;:&quot;Talent Rover Administrator&quot;,&quot;OwnerId&quot;:&quot;0051N000005pgpoQAA&quot;,&quot;Phone&quot;:null,&quot;PhotoUrl&quot;:&quot;/services/images/photo/0033F00000D3xEgQAJ&quot;,&quot;Salutation&quot;:null,&quot;Suffix&quot;:null,&quot;Title&quot;:&quot;Technical Operations Officer&quot;,&quot;RecordType&quot;:{&quot;sobjectType&quot;:&quot;RecordType&quot;,&quot;Id&quot;:&quot;0121N000001ZxLTQA0&quot;,&quot;Name&quot;:&quot;Candidate&quot;}},&quot;section&quot;:&quot;SINGLE_ACTION_LINKS&quot;,&quot;inContextOfComponent&quot;:&quot;highlightsStencilDesktopVertical&quot;,&quot;size&quot;:3,&quot;maxWidth&quot;:-1,&quot;actionTypes&quot;:[],&quot;bulkedAction&quot;:false,&quot;actionsRequestId&quot;:1},{&quot;recordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;context&quot;:&quot;RECORD&quot;,&quot;entityApiName&quot;:&quot;Contact&quot;,&quot;record&quot;:{&quot;sobjectType&quot;:&quot;Contact&quot;,&quot;Id&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;RecordTypeId&quot;:&quot;0121N000001ZxLTQA0&quot;,&quot;SystemModstamp&quot;:&quot;2019-05-28T08:36:35.000Z&quot;,&quot;SystemModstamp__f&quot;:&quot;28/05/2019 03:36&quot;,&quot;SystemModstamp__l&quot;:&quot;28/05/2019 03:36&quot;,&quot;Account&quot;:{&quot;sobjectType&quot;:&quot;Account&quot;,&quot;Id&quot;:&quot;0011N00001W0YiJQAV&quot;,&quot;Name&quot;:&quot;PoolAccountName - 7&quot;,&quot;RecordTypeId&quot;:&quot;0121N000001ZxLUQA0&quot;,&quot;RecordType&quot;:{&quot;sobjectType&quot;:&quot;RecordType&quot;,&quot;Id&quot;:&quot;0121N000001ZxLUQA0&quot;,&quot;Name&quot;:&quot;Account&quot;}},&quot;Account__f&quot;:&quot;PoolAccountName - 7&quot;,&quot;Account__l&quot;:&quot;PoolAccountName - 7&quot;,&quot;AccountId&quot;:&quot;0011N00001W0YiJQAV&quot;,&quot;CreatedDate&quot;:&quot;2019-05-28T08:36:26.000Z&quot;,&quot;CreatedDate__f&quot;:&quot;28/05/2019 03:36&quot;,&quot;CreatedDate__l&quot;:&quot;28/05/2019 03:36&quot;,&quot;Email&quot;:&quot;bethy.dimitrova@tut.com&quot;,&quot;FirstName&quot;:&quot;Bethy&quot;,&quot;LastModifiedById&quot;:&quot;0051N000005pgpoQAA&quot;,&quot;LastModifiedDate&quot;:&quot;2019-05-28T08:36:31.000Z&quot;,&quot;LastModifiedDate__f&quot;:&quot;28/05/2019 03:36&quot;,&quot;LastModifiedDate__l&quot;:&quot;28/05/2019 03:36&quot;,&quot;LastName&quot;:&quot;Dimitrova&quot;,&quot;MiddleName&quot;:null,&quot;MobilePhone&quot;:null,&quot;Name&quot;:&quot;Bethy Dimitrova&quot;,&quot;Owner&quot;:{&quot;sobjectType&quot;:&quot;User&quot;,&quot;Id&quot;:&quot;0051N000005pgpoQAA&quot;,&quot;Name&quot;:&quot;Talent Rover Administrator&quot;,&quot;SystemModstamp&quot;:&quot;2019-05-28T08:07:17.000Z&quot;,&quot;SystemModstamp__f&quot;:&quot;28/05/2019 03:07&quot;,&quot;SystemModstamp__l&quot;:&quot;28/05/2019 03:07&quot;},&quot;Owner__f&quot;:&quot;Talent Rover Administrator&quot;,&quot;Owner__l&quot;:&quot;Talent Rover Administrator&quot;,&quot;OwnerId&quot;:&quot;0051N000005pgpoQAA&quot;,&quot;Phone&quot;:null,&quot;PhotoUrl&quot;:&quot;/services/images/photo/0033F00000D3xEgQAJ&quot;,&quot;Salutation&quot;:null,&quot;Suffix&quot;:null,&quot;Title&quot;:&quot;Technical Operations Officer&quot;,&quot;RecordType&quot;:{&quot;sobjectType&quot;:&quot;RecordType&quot;,&quot;Id&quot;:&quot;0121N000001ZxLTQA0&quot;,&quot;Name&quot;:&quot;Candidate&quot;}},&quot;section&quot;:&quot;PAGE&quot;,&quot;inContextOfComponent&quot;:&quot;force:highlights&quot;,&quot;size&quot;:3,&quot;maxWidth&quot;:0,&quot;actionTypes&quot;:[],&quot;bulkedAction&quot;:false,&quot;actionsRequestId&quot;:2}]}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=53&amp;ui-global-components-one-actionsManager.ActionsManager.handleAction=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">229744000000622817</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1407 /resource/1548078413000/TR1__KanbanSwimlaneCSS" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/resource/1548078413000/TR1__KanbanSwimlaneCSS</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/css,*/*;q=0.1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1408 /resource/1518000972000/TR1__LightningJqueryV3" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/resource/1518000972000/TR1__LightningJqueryV3</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1409 /aura?r=54&amp;TR1.ATSv2_Candidate_ListView.getInit=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;4012;a&quot;,&quot;descriptor&quot;:&quot;apex://TR1.ATSv2_Candidate_ListViewController/ACTION$getInit&quot;,&quot;callingDescriptor&quot;:&quot;markup://TR1:ATSv2_Candidate_ListView&quot;,&quot;params&quot;:{&quot;sObjectName&quot;:&quot;Application_V2__c&quot;,&quot;fieldSetName&quot;:&quot;ATSv2_Candidate_ListView&quot;,&quot;parentRecordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;stage&quot;:&quot;ALL&quot;,&quot;selectiveType&quot;:&quot;All&quot;},&quot;version&quot;:null}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=54&amp;TR1.ATSv2_Candidate_ListView.getInit=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">230370000000eb5554</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1410 /aura?r=55&amp;ui-force-components-controllers-multiTemplateVirtualList.MultiTemplateVirtualList.getRecordLayoutComponent=4&amp;ui-force-components-controllers-relatedList.RelatedListContainerDataProvider.getRecords=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;4045;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.multiTemplateVirtualList.MultiTemplateVirtualListController/ACTION$getRecordLayoutComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;inContextOfComponent&quot;:&quot;force:relatedListCard&quot;,&quot;listReference&quot;:{&quot;inContextOfRecordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;listViewIdOrName&quot;:&quot;TR1__References__r&quot;,&quot;entityKeyPrefixOrApiName&quot;:&quot;TR1__Reference__c&quot;},&quot;layoutType&quot;:&quot;RELATED_LIST&quot;}},{&quot;id&quot;:&quot;4059;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.multiTemplateVirtualList.MultiTemplateVirtualListController/ACTION$getRecordLayoutComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;inContextOfComponent&quot;:&quot;force:relatedListCard&quot;,&quot;listReference&quot;:{&quot;inContextOfRecordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;listViewIdOrName&quot;:&quot;TR1__Opportunities_Discussed__r&quot;,&quot;entityKeyPrefixOrApiName&quot;:&quot;TR1__Opportunity_Discussed__c&quot;},&quot;layoutType&quot;:&quot;RELATED_LIST&quot;}},{&quot;id&quot;:&quot;4073;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.multiTemplateVirtualList.MultiTemplateVirtualListController/ACTION$getRecordLayoutComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;inContextOfComponent&quot;:&quot;force:relatedListCard&quot;,&quot;listReference&quot;:{&quot;inContextOfRecordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;listViewIdOrName&quot;:&quot;TR1__Closes__r&quot;,&quot;entityKeyPrefixOrApiName&quot;:&quot;TR1__Closing_Report__c&quot;},&quot;layoutType&quot;:&quot;RELATED_LIST&quot;}},{&quot;id&quot;:&quot;4087;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.multiTemplateVirtualList.MultiTemplateVirtualListController/ACTION$getRecordLayoutComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;inContextOfComponent&quot;:&quot;force:relatedListCard&quot;,&quot;listReference&quot;:{&quot;inContextOfRecordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;listViewIdOrName&quot;:&quot;TR1__Timesheets__r&quot;,&quot;entityKeyPrefixOrApiName&quot;:&quot;TR1__Timesheet__c&quot;},&quot;layoutType&quot;:&quot;RELATED_LIST&quot;}},{&quot;id&quot;:&quot;4120;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.relatedList.RelatedListContainerDataProviderController/ACTION$getRecords&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;relatedListApiNames&quot;:[&quot;TR1__References__r&quot;,&quot;TR1__Opportunities_Discussed__r&quot;,&quot;TR1__Closes__r&quot;,&quot;TR1__Timesheets__r&quot;],&quot;numRecordsToShow&quot;:10,&quot;showPartialCount&quot;:true},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=55&amp;ui-force-components-controllers-multiTemplateVirtualList.MultiTemplateVirtualList.getRecordLayoutComponent=4&amp;ui-force-components-controllers-relatedList.RelatedListContainerDataProvider.getRecords=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">231269000000743ac5</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1424 /aura?r=58&amp;TR1.TRS_CandidateCalendarCtrlCls.getAvailabilitiesOnload=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;4382;a&quot;,&quot;descriptor&quot;:&quot;apex://TR1.TRS_CandidateCalendarCtrlCls/ACTION$getAvailabilitiesOnload&quot;,&quot;callingDescriptor&quot;:&quot;markup://TR1:TRS_CandidateCalendar&quot;,&quot;params&quot;:{&quot;contactId&quot;:&quot;0033F00000D3xEgQAJ&quot;},&quot;version&quot;:null}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=58&amp;TR1.TRS_CandidateCalendarCtrlCls.getAvailabilitiesOnload=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">23390400000073a696</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1422 /aura?r=57&amp;ui-global-components-one-actionsManager.ActionsManager.handleAction=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;4374;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.actionsManager.ActionsManagerController/ACTION$handleAction&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;context&quot;:&quot;RELATED_LIST&quot;,&quot;entityApiName&quot;:&quot;AttachedContentDocument&quot;,&quot;listNameOrId&quot;:&quot;AttachedContentDocuments&quot;,&quot;recordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;actionsRequestId&quot;:3}]}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=57&amp;ui-global-components-one-actionsManager.ActionsManager.handleAction=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">233790000000a63606</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1423 /aura?r=56&amp;ui-force-components-controllers-multiTemplateVirtualList.MultiTemplateVirtualList.getRecordLayoutComponent=4&amp;ui-force-components-controllers-relatedList.RelatedListContainerDataProvider.getRecords=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;4317;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.relatedList.RelatedListContainerDataProviderController/ACTION$getRecords&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;relatedListApiNames&quot;:[&quot;TR1__Consents__r&quot;,&quot;TR1__Contact_Documents__r&quot;,&quot;AttachedContentNotes&quot;,&quot;AttachedContentDocuments&quot;],&quot;numRecordsToShow&quot;:10,&quot;showPartialCount&quot;:true},&quot;storable&quot;:true},{&quot;id&quot;:&quot;4326;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.multiTemplateVirtualList.MultiTemplateVirtualListController/ACTION$getRecordLayoutComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;inContextOfComponent&quot;:&quot;force:relatedListCard&quot;,&quot;listReference&quot;:{&quot;inContextOfRecordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;listViewIdOrName&quot;:&quot;TR1__Consents__r&quot;,&quot;entityKeyPrefixOrApiName&quot;:&quot;TR1__Candidate_Consents__c&quot;},&quot;layoutType&quot;:&quot;RELATED_LIST&quot;}},{&quot;id&quot;:&quot;4341;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.multiTemplateVirtualList.MultiTemplateVirtualListController/ACTION$getRecordLayoutComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;inContextOfComponent&quot;:&quot;force:relatedListCard&quot;,&quot;listReference&quot;:{&quot;inContextOfRecordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;listViewIdOrName&quot;:&quot;TR1__Contact_Documents__r&quot;,&quot;entityKeyPrefixOrApiName&quot;:&quot;TR1__ContactDocument__c&quot;},&quot;layoutType&quot;:&quot;RELATED_LIST&quot;}},{&quot;id&quot;:&quot;4356;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.multiTemplateVirtualList.MultiTemplateVirtualListController/ACTION$getRecordLayoutComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;inContextOfComponent&quot;:&quot;force:relatedListCard&quot;,&quot;listReference&quot;:{&quot;inContextOfRecordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;listViewIdOrName&quot;:&quot;AttachedContentNotes&quot;,&quot;entityKeyPrefixOrApiName&quot;:&quot;AttachedContentNote&quot;},&quot;layoutType&quot;:&quot;RELATED_LIST&quot;}},{&quot;id&quot;:&quot;4371;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.multiTemplateVirtualList.MultiTemplateVirtualListController/ACTION$getRecordLayoutComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;inContextOfComponent&quot;:&quot;force:relatedListCard&quot;,&quot;listReference&quot;:{&quot;inContextOfRecordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;listViewIdOrName&quot;:&quot;AttachedContentDocuments&quot;,&quot;entityKeyPrefixOrApiName&quot;:&quot;AttachedContentDocument&quot;},&quot;layoutType&quot;:&quot;RELATED_LIST&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=56&amp;ui-force-components-controllers-multiTemplateVirtualList.MultiTemplateVirtualList.getRecordLayoutComponent=4&amp;ui-force-components-controllers-relatedList.RelatedListContainerDataProvider.getRecords=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">233789000000a3672e</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1425 /aura?r=59&amp;TR1.TRS_CandidateCalendarCtrlCls.getCalendarDefaults=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;4383;a&quot;,&quot;descriptor&quot;:&quot;apex://TR1.TRS_CandidateCalendarCtrlCls/ACTION$getCalendarDefaults&quot;,&quot;callingDescriptor&quot;:&quot;markup://TR1:TRS_CandidateCalendar&quot;,&quot;params&quot;:{},&quot;version&quot;:null}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=59&amp;TR1.TRS_CandidateCalendarCtrlCls.getCalendarDefaults=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">234665000000da48a2</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S3_txt" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1370726934000</longProp>
        <longProp name="ThreadGroup.end_time">1370726934000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">.\Resumetxt.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">path,name,doc</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="S3_01_Open_ main_page" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1222 /" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host2}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="QCQQ" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">QCQQ</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;QCQQ&quot; value=&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="S3_02_login" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1276 /" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="un" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">un</stringProp>
                  <stringProp name="Argument.value">${login}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="width" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">width</stringProp>
                  <stringProp name="Argument.value">1920</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="height" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">height</stringProp>
                  <stringProp name="Argument.value">1080</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasRememberUn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">hasRememberUn</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="startURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">startURL</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="loginURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">loginURL</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="loginType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">loginType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="useSecure" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">useSecure</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="local" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">local</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="lt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">lt</stringProp>
                  <stringProp name="Argument.value">standard</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="qs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">qs</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">locale</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="oauth_token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">oauth_token</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="oauth_callback" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">oauth_callback</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="login" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">login</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serverid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">serverid</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="QCQQ" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">QCQQ</stringProp>
                  <stringProp name="Argument.value">${QCQQ}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="display" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">display</stringProp>
                  <stringProp name="Argument.value">page</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="Argument.value">${login}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ExtraLog" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ExtraLog</stringProp>
                  <stringProp name="Argument.value">%5B%7B%22width%22:1920%7D,%7B%22height%22:1080%7D,%7B%22language%22:%22ru-RU%22%7D,%7B%22offset%22:-3%7D,%7B%22scripts%22:%5B%7B%22size%22:249,%22summary%22:%22if%20(self%20==%20top)%20%7Bdocument.documentElement.style.v%22%7D,%7B%22size%22:586,%22summary%22:%22var%20SFDCSessionVars=%7B%5C%22server%5C%22:%5C%22https:%5C%5C/%5C%5C/test.sale%22%7D,%7B%22url%22:%22https://${host2}/jslibrary/SfdcSessionBase208.js%22%7D,%7B%22url%22:%22https://${host2}/jslibrary/LoginHint208.js%22%7D,%7B%22size%22:26,%22summary%22:%22LoginHint.hideLoginForm();%22%7D,%7B%22size%22:36,%22summary%22:%22LoginHint.getSavedIdentities(false);%22%7D,%7B%22url%22:%22https://${host2}/jslibrary/baselogin4.js%22%7D,%7B%22url%22:%22https://${host2}/jslibrary/LoginMarketingSurveyResponse.js%22%7D,%7B%22url%22:%22https://${host2}/marketing/survey/survey1/1380%22%7D,%7B%22url%22:%22https://${host2}/marketing/survey/survey4/1380%22%7D,%7B%22size%22:357,%22summary%22:%22function%20handleLogin()%7Bdocument.login.un.value=doc%22%7D%5D%7D,%7B%22scriptCount%22:11%7D,%7B%22iframes%22:%5B%22https://c.salesforce.com/login-messages/promos.html%22,%22https://test.salesforce.com/login/sessionserver212.html%22%5D%7D,%7B%22iframeCount%22:2%7D,%7B%22referrer%22:%22NO_REFERRER%22%7D%5D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Fingerprint" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">Fingerprint</stringProp>
                  <stringProp name="Argument.value">%7B%22platform%22:%22Win32%22,%22window%22:%221056x1936%22,%22screen%22:%221080x1920%22,%22color%22:%2224-24%22,%22timezoneOffset%22:%22-180%22,%22canvas%22:%22-344685604%22,%22sessionStorage%22:%22true%22,%22LocalStorage%22:%22true%22,%22indexDB%22:%22true%22,%22webSockets%22:%22true%22,%22plugins%22:%22%22,%22drm%22:1,%22languages%22:%5B%22ru-RU%22,%22ru%22,%22en-US%22,%22en%22%5D,%22fonts%22:%22%22,%22codecs%22:%22gMGIqqqgRqoCqH4=%22%7D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pw" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pw</stringProp>
                  <stringProp name="Argument.value">${password}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Login" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">Login</stringProp>
                  <stringProp name="Argument.value">Log In to Sandbox</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host2}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host2}/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cshc" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">cshc</stringProp>
              <stringProp name="RegexExtractor.regex">cshc=(.+?)&amp;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sid" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">sid</stringProp>
              <stringProp name="RegexExtractor.regex">sid=(.+?)&amp;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1280 /secur/contentDoor" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="startURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">startURL</stringProp>
                  <stringProp name="Argument.value">${protocol}%3A%2F%2Ftr-release2--RegTest.cs92.my.salesforce.com%2Fone%2Fone.app</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sid</stringProp>
                  <stringProp name="Argument.value">${sid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="skipRedirect" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">skipRedirect</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="lm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">lm</stringProp>
                  <stringProp name="Argument.value">eyJlbmMiOiJBMjU2R0NNIiwiYXVkIjoiMDBEM0YwMDAwMDA5UFBpIiwia2lkIjoie1widFwiOlwiMDBEM0YwMDAwMDA5UFBpXCIsXCJ2XCI6XCIwMkcxTjAwMDAwMFFiUEJcIixcImFcIjpcImNvbnRlbnRkb29ydXNlcnRyYW5zaWVudGtleWVuY3J5cHRcIixcInVcIjpcIjAwNTFOMDAwMDA1cGdwb1wifSIsImNyaXQiOlsiaWF0Il0sImlhdCI6MTU1OTAzMjM2OTMxOCwiZXhwIjowfQ%3D%3D..1u27AVIUbpZWrDKt.N18qpCk4LuT4CdLfto6z9Q%3D%3D.qFARJZI7VEbJ_MfcmvZaQQ%3D%3D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">tr-release2--regtest--c.cs92.content.force.com</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/secur/contentDoor</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host2}/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1283 /one/one.app" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host2}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/one/one.app</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://tr-release2--regtest--c.cs92.content.force.com/secur/contentDoor?startURL=${protocol}%3A%2F%2Ftr-release2--RegTest.cs92.my.salesforce.com%2Fone%2Fone.app&amp;sid=00D3F0000009PPi%21AQkAQKlvs0l7eoJZ4sKYyl8sJOKv0OQqU9HZDlm7yca9P2MHD3LcDBzoVGXKHBj2bjfTatYAyJSI5BssJJ48l4.n3uGXYc.5&amp;skipRedirect=1&amp;lm=eyJlbmMiOiJBMjU2R0NNIiwiYXVkIjoiMDBEM0YwMDAwMDA5UFBpIiwia2lkIjoie1widFwiOlwiMDBEM0YwMDAwMDA5UFBpXCIsXCJ2XCI6XCIwMkcxTjAwMDAwMFFiUEJcIixcImFcIjpcImNvbnRlbnRkb29ydXNlcnRyYW5zaWVudGtleWVuY3J5cHRcIixcInVcIjpcIjAwNTFOMDAwMDA1cGdwb1wifSIsImNyaXQiOlsiaWF0Il0sImlhdCI6MTU1OTAzMjM2OTMxOCwiZXhwIjowfQ%3D%3D..1u27AVIUbpZWrDKt.N18qpCk4LuT4CdLfto6z9Q%3D%3D.qFARJZI7VEbJ_MfcmvZaQQ%3D%3D</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="token" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">token</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;token&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="firstPublishLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">firstPublishLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1292 /aura?preloadActions" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">%7B%22mode%22%3A%22PROD%22%2C%22fwuid%22%3A%22pxtF0ZdGYF-z00XsmRUcGQ%22%2C%22loaded%22%3A%7B%22APPLICATION%40markup%3A%2F%2Fone%3Aone%22%3A%22Vel2xmipbW6B0F2Wfw22YA%22%7D%2C%22app%22%3A%22one%3Aone%22%7D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">%7B%22actions%22%3A%5B%7B%22descriptor%22%3A%22serviceComponent%3A%2F%2Fui.global.components.one.one.controller.OneController%2FACTION%24getCurrentApp%22%2C%22params%22%3A%7B%7D%2C%22id%22%3A%220%3Bp%22%7D%5D%7D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/aura?preloadActions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/one/one.app</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">id</stringProp>
              <stringProp name="RegexExtractor.regex">:{&quot;id&quot;:&quot;(.+?)&quot;,&quot;namespacePrefix&quot;:&quot;TR1&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1295 /file-asset/unnamed1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/file-asset/unnamed1</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/one/one.app</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/webp,*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1298 /aura?r=0&amp;aura.HostConfig.getConfigData=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;71;a&quot;,&quot;descriptor&quot;:&quot;aura://HostConfigController/ACTION$getConfigData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/one/one.app</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=0&amp;aura.HostConfig.getConfigData=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/one/one.app</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">55075000000ed96333</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="nonce" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">nonce</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;nonce&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1301 /aura?r=1&amp;ui-flexipage-components-page.FlexipageControllerV2.getPage=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;203;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.flexipage.components.page.FlexipageControllerV2/ACTION$getPage&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;flexiPageDeveloperName&quot;:&quot;TR1__Front_Office_UtilityBar1&quot;},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/one/one.app</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=1&amp;ui-flexipage-components-page.FlexipageControllerV2.getPage=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/one/one.app</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">553450000002de7715</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1303 /file-asset/unnamed1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="height" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">height</stringProp>
                  <stringProp name="Argument.value">80</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="width" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">width</stringProp>
                  <stringProp name="Argument.value">400</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/file-asset/unnamed1</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/l/%7B%22mode%22%3A%22PROD%22%2C%22app%22%3A%22one%3Aone%22%2C%22loaded%22%3A%7B%22APPLICATION%40markup%3A%2F%2Fone%3Aone%22%3A%22Vel2xmipbW6B0F2Wfw22YA%22%7D%2C%22styleContext%22%3A%7B%22c%22%3A%22firefox%22%2C%22x%22%3A%5B%22isDesktop%22%5D%2C%22tokens%22%3A%5B%22markup%3A%2F%2Fforce%3AsldsTokens%22%2C%22markup%3A%2F%2Fforce%3Abase%22%2C%22markup%3A%2F%2Fforce%3AoneSalesforceSkin%22%2C%22markup%3A%2F%2Fforce%3AlevelTwoDensity%22%2C%22markup%3A%2F%2Fforce%3AthemeTokens%22%2C%22markup%3A%2F%2Fforce%3AformFactorLarge%22%5D%2C%22tuid%22%3A%22ZHAX_KjJjptHBeEdFDO12g%22%2C%22cuid%22%3A-1432176237%7D%2C%22pathPrefix%22%3A%22%22%7D/app.css</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/webp,*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1305 /aura?r=3&amp;ui-force-components-controllers-platformStateManager.PlatformStateManager.getTabByNameAndApp=1&amp;ui-force-components-controllers-recordGlobalValueProvider.RecordGvp.getRecord=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;229;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getTabByNameAndApp&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;devName&quot;:&quot;standard-home&quot;,&quot;customApplicationId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;storable&quot;:true},{&quot;id&quot;:&quot;230;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$getRecord&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordDescriptor&quot;:&quot;0051N000005pgpoQAA.undefined.null.null.null.Name,Id.VIEW.false.null.null.null&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/one/one.app</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=3&amp;ui-force-components-controllers-platformStateManager.PlatformStateManager.getTabByNameAndApp=1&amp;ui-force-components-controllers-recordGlobalValueProvider.RecordGvp.getRecord=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/one/one.app</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">55610000000924ee0a</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1304 /aura?r=2&amp;ui-force-components-controllers-empApi.EmpApi.getEmpConfig=1&amp;ui-global-components-one-favorites.Favorites.getFavorites=1&amp;ui-global-components-one-header.Header.getSettings=1&amp;ui-global-components-one-systemMessage.SystemMessage.getSystemMessages=1&amp;ui-notifications-components-notifications-controller.Notifications.getInitializationValues=1&amp;ui-search-components-forcesearch-sgdp.PermsAndPrefsCache.getPermsAndPrefs=1&amp;ui-search-components-forcesearch-sgdp.ScopesCache.getScopeMaps=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;133;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.search.components.forcesearch.sgdp.ScopesCacheController/ACTION$getScopeMaps&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;scopeTypes&quot;:[&quot;SMART_SCOPE&quot;,&quot;PRIMARY&quot;,&quot;FILTER&quot;]},&quot;storable&quot;:true},{&quot;id&quot;:&quot;135;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.search.components.forcesearch.sgdp.PermsAndPrefsCacheController/ACTION$getPermsAndPrefs&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true},{&quot;id&quot;:&quot;147;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.systemMessage.SystemMessageController/ACTION$getSystemMessages&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;isExtensiveMessage&quot;:false}},{&quot;id&quot;:&quot;164;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.favorites.FavoritesController/ACTION$getFavorites&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true},{&quot;id&quot;:&quot;182;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.empApi.EmpApiController/ACTION$getEmpConfig&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}},{&quot;id&quot;:&quot;185;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.notifications.components.notifications.controller.NotificationsController/ACTION$getInitializationValues&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true},{&quot;id&quot;:&quot;195;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.header.HeaderController/ACTION$getSettings&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/one/one.app</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=2&amp;ui-force-components-controllers-empApi.EmpApi.getEmpConfig=1&amp;ui-global-components-one-favorites.Favorites.getFavorites=1&amp;ui-global-components-one-header.Header.getSettings=1&amp;ui-global-components-one-systemMessage.SystemMessage.getSystemMessages=1&amp;ui-notifications-components-notifications-controller.Notifications.getInitializationValues=1&amp;ui-search-components-forcesearch-sgdp.PermsAndPrefsCache.getPermsAndPrefs=1&amp;ui-search-components-forcesearch-sgdp.ScopesCache.getScopeMaps=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/one/one.app</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">5551400000038b2f10</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1309 /aura?r=5&amp;ui-home-impl-landing.Landing.populateTodayGVP=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;286;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.home.impl.landing.LandingController/ACTION$populateTodayGVP&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=5&amp;ui-home-impl-landing.Landing.populateTodayGVP=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">567250000008c04ddd</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1310 /aura?r=6&amp;ui-force-components-controllers-socialPhoto.SocialPhoto.resolvePhotos=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;390;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.socialPhoto.SocialPhotoController/ACTION$resolvePhotos&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;records&quot;:{&quot;0051N000005pgpoQAA&quot;:{}},&quot;refreshCached&quot;:false},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=6&amp;ui-force-components-controllers-socialPhoto.SocialPhoto.resolvePhotos=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">570560000005eeeb5d</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1308 /aura?r=4&amp;ui-flexipage-components-page.FlexipageControllerV2.getPage=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;269;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.flexipage.components.page.FlexipageControllerV2/ACTION$getPage&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;flexiPageDeveloperName&quot;:&quot;Home_Page_Default&quot;},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=4&amp;ui-flexipage-components-page.FlexipageControllerV2.getPage=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">56705000000a77506a</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1317 /aura?r=7&amp;aura.Component.reportDeprecationUsages=1&amp;ui-global-components-one-systemMessage.SystemMessage.getSystemMessages=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;395;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$reportDeprecationUsages&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;usages&quot;:{&quot;AuraComponentService.newComponentDeprecated&quot;:[&quot;flexipage:runtimeComponent&quot;]}}},{&quot;id&quot;:&quot;471;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.systemMessage.SystemMessageController/ACTION$getSystemMessages&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;isExtensiveMessage&quot;:true}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=7&amp;aura.Component.reportDeprecationUsages=1&amp;ui-global-components-one-systemMessage.SystemMessage.getSystemMessages=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">6192400000083cfc8c</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1318 /aura?r=8&amp;ui-today-impl-components-today-taskContainer.TodayTasksCardDataManager.getTasks=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;486;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.today.impl.components.today.taskContainer.TodayTasksCardDataManagerController/ACTION$getTasks&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;limit&quot;:5,&quot;filterType&quot;:&quot;MY_DAY&quot;},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=8&amp;ui-today-impl-components-today-taskContainer.TodayTasksCardDataManager.getTasks=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">65822000000729497f</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1319 /aura?r=9&amp;aura.Component.getComponent=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;489;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$getComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;name&quot;:&quot;markup://force:listTemplate&quot;,&quot;attributes&quot;:{&quot;recordExpression&quot;:&quot;item&quot;,&quot;entityName&quot;:&quot;Task&quot;,&quot;mode&quot;:&quot;VIEW&quot;,&quot;type&quot;:&quot;COMPACT&quot;,&quot;inContextOfComponent&quot;:&quot;runtime_sales_activities:todayTaskContainer&quot;,&quot;actions&quot;:[]}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=9&amp;aura.Component.getComponent=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">65831000000ffec684</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1320 /aura?r=10&amp;ui-force-components-controllers-recordLayoutBroker.RecordLayoutBroker.getLayout=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;521;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordLayoutBroker.RecordLayoutBrokerController/ACTION$getLayout&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;entityName&quot;:&quot;Event&quot;,&quot;mode&quot;:&quot;VIEW&quot;,&quot;type&quot;:&quot;COMPACT&quot;,&quot;inContextOfComponent&quot;:&quot;home:eventContainer&quot;,&quot;pageSize&quot;:-1,&quot;offset&quot;:0}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=10&amp;ui-force-components-controllers-recordLayoutBroker.RecordLayoutBroker.getLayout=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">6588900000013030b5</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1321 /aura?r=11&amp;ui-calendar-impl-controllers.SFDCCalendarDataProvider.getTodayEvents=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;528;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.calendar.impl.controllers.SFDCCalendarDataProviderController/ACTION$getTodayEvents&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;limit&quot;:5},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=11&amp;ui-calendar-impl-controllers.SFDCCalendarDataProvider.getTodayEvents=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">659210000008b83520</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1322 /aura?r=12&amp;ui-wits-impl-components-news.NewsPanel.getNewsMetaData=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;546;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.wits.impl.components.news.NewsPanelController/ACTION$getNewsMetaData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=12&amp;ui-wits-impl-components-news.NewsPanel.getNewsMetaData=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">6593600000031c5b50</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1323 /aura?r=13&amp;ui-flexipage-components-reportchart.ReportChart.getReportInfo=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;554;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.flexipage.components.reportchart.ReportChartController/ACTION$getReportInfo&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;reportName&quot;:&quot;TR1__My_Temp_GP_Trend&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=13&amp;ui-flexipage-components-reportchart.ReportChart.getReportInfo=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">65946000000f087630</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1324 /aura?r=14&amp;aura.Component.reportDeprecationUsages=2&amp;ui-flexipage-components-filterlistcard.FilterListCard.getFilterLabel=2&amp;ui-flexipage-components-reportchart.ReportChart.getReportInfo=3" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;508;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$reportDeprecationUsages&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;usages&quot;:{&quot;AuraComponentService.newComponentDeprecated&quot;:[&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;]}}},{&quot;id&quot;:&quot;562;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.flexipage.components.reportchart.ReportChartController/ACTION$getReportInfo&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;reportName&quot;:&quot;TR1__My_Quarterly_Calls&quot;}},{&quot;id&quot;:&quot;570;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.flexipage.components.reportchart.ReportChartController/ACTION$getReportInfo&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;reportName&quot;:&quot;TR1__Submittals_This_Quarter&quot;}},{&quot;id&quot;:&quot;573;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$reportDeprecationUsages&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;usages&quot;:{&quot;AuraComponentService.newComponentDeprecated&quot;:[&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;]}}},{&quot;id&quot;:&quot;579;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.flexipage.components.reportchart.ReportChartController/ACTION$getReportInfo&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;reportName&quot;:&quot;TR1__Client_Interviews_This_Quarter&quot;}},{&quot;id&quot;:&quot;584;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.flexipage.components.filterlistcard.FilterListCardController/ACTION$getFilterLabel&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;entityName&quot;:&quot;TR1__Closing_Report__c&quot;,&quot;filterName&quot;:&quot;TR1__My_Active_Assignments&quot;}},{&quot;id&quot;:&quot;589;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.flexipage.components.filterlistcard.FilterListCardController/ACTION$getFilterLabel&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;entityName&quot;:&quot;TR1__Closing_Report__c&quot;,&quot;filterName&quot;:&quot;TR1__Assignments_Ending_in_30_Days&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=14&amp;aura.Component.reportDeprecationUsages=2&amp;ui-flexipage-components-filterlistcard.FilterListCard.getFilterLabel=2&amp;ui-flexipage-components-reportchart.ReportChart.getReportInfo=3</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">66598000000a8c2e87</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1327 /aura?r=15&amp;ui-global-components-one-actionsManager.ActionsManager.handleAction=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;597;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.actionsManager.ActionsManagerController/ACTION$handleAction&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;context&quot;:&quot;GLOBAL&quot;,&quot;record&quot;:null,&quot;section&quot;:&quot;COLLABORATE_COMPOSER&quot;,&quot;size&quot;:3,&quot;width&quot;:&quot;SMALL&quot;,&quot;maxWidth&quot;:-1,&quot;actionTypes&quot;:[],&quot;bulkedAction&quot;:false,&quot;actionsRequestId&quot;:0}]}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=15&amp;ui-global-components-one-actionsManager.ActionsManager.handleAction=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">666600000004b0c8d9</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1329 /aura?r=16&amp;ui-chatter-components-aura-components-forceChatter-chatter.Feed.getModel=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;613;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.chatter.components.aura.components.forceChatter.chatter.FeedController/ACTION$getModel&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;type&quot;:&quot;BOOKMARKS&quot;,&quot;subjectId&quot;:&quot;undefined&quot;,&quot;showFeedItemActions&quot;:true,&quot;feedDesign&quot;:&quot;DEFAULT&quot;,&quot;firstPageSize&quot;:4,&quot;hasFeedSwitcher&quot;:false,&quot;showFilteringMenuGroup&quot;:false,&quot;includeRecordActivitiesInFeed&quot;:true,&quot;retrieveOnlyTopLevelThreadedComments&quot;:false}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=16&amp;ui-chatter-components-aura-components-forceChatter-chatter.Feed.getModel=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">66702000000aae79e5</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1331 /aura?r=18&amp;ui-wits-impl-components-news.NewsPanel.notifyError=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;691;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.wits.impl.components.news.NewsPanelController/ACTION$notifyError&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;errorMessage&quot;:&quot;Request to ${protocol}://api.bluetail.salesforce.com/v10/insights/query failed with  status code 0&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=18&amp;ui-wits-impl-components-news.NewsPanel.notifyError=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">668930000004a93b80</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1330 /aura?r=17&amp;ui-analytics-platform-embeddedChart.EmbeddedReportChart.loadChart=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;690;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.analytics.platform.embeddedChart.EmbeddedReportChartController/ACTION$loadChart&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;reportIdOrDeveloperName&quot;:&quot;00O1N000007jedjUAA&quot;,&quot;embeddedChartInput&quot;:{&quot;componentId&quot;:&quot;1:554;a&quot;,&quot;filter&quot;:null,&quot;showTitle&quot;:false,&quot;size&quot;:&quot;auto&quot;,&quot;widthOverrides&quot;:null,&quot;isInteractive&quot;:false,&quot;cacheAge&quot;:86400000,&quot;origin&quot;:&quot;earc&quot;,&quot;isInS1Context&quot;:true,&quot;renderEclairChart&quot;:true}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=17&amp;ui-analytics-platform-embeddedChart.EmbeddedReportChart.loadChart=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">66837000000407f092</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1334 /aura?r=19&amp;ui-force-components-controllers-lists-filterList.FilterList.getFilterListConfig=1&amp;ui-force-components-controllers-lists-listViewDataManager.ListViewDataManager.getItems=2&amp;ui-force-components-controllers-recordLayoutBroker.RecordLayoutBroker.getLayout=2" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;889;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordLayoutBroker.RecordLayoutBrokerController/ACTION$getLayout&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;entityName&quot;:&quot;TR1__Closing_Report__c&quot;,&quot;mode&quot;:&quot;VIEW&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;layoutOverride&quot;:&quot;TR1__My_Active_Assignments&quot;,&quot;inContextOfComponent&quot;:&quot;force:filterList&quot;,&quot;pageSize&quot;:-1,&quot;offset&quot;:0}},{&quot;id&quot;:&quot;895;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.lists.listViewDataManager.ListViewDataManagerController/ACTION$getItems&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;filterName&quot;:&quot;TR1__My_Active_Assignments&quot;,&quot;entityName&quot;:&quot;TR1__Closing_Report__c&quot;,&quot;pageSize&quot;:10,&quot;layoutType&quot;:&quot;LIST&quot;,&quot;sortBy&quot;:null,&quot;getCount&quot;:false,&quot;enableRowActions&quot;:false,&quot;offset&quot;:0},&quot;storable&quot;:true},{&quot;id&quot;:&quot;899;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.lists.filterList.FilterListController/ACTION$getFilterListConfig&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;entityName&quot;:&quot;TR1__Closing_Report__c&quot;},&quot;storable&quot;:true},{&quot;id&quot;:&quot;948;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordLayoutBroker.RecordLayoutBrokerController/ACTION$getLayout&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;entityName&quot;:&quot;TR1__Closing_Report__c&quot;,&quot;mode&quot;:&quot;VIEW&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;layoutOverride&quot;:&quot;TR1__Assignments_Ending_in_30_Days&quot;,&quot;inContextOfComponent&quot;:&quot;force:filterList&quot;,&quot;pageSize&quot;:-1,&quot;offset&quot;:0}},{&quot;id&quot;:&quot;954;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.lists.listViewDataManager.ListViewDataManagerController/ACTION$getItems&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;filterName&quot;:&quot;TR1__Assignments_Ending_in_30_Days&quot;,&quot;entityName&quot;:&quot;TR1__Closing_Report__c&quot;,&quot;pageSize&quot;:10,&quot;layoutType&quot;:&quot;LIST&quot;,&quot;sortBy&quot;:null,&quot;getCount&quot;:false,&quot;enableRowActions&quot;:false,&quot;offset&quot;:0},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=19&amp;ui-force-components-controllers-lists-filterList.FilterList.getFilterListConfig=1&amp;ui-force-components-controllers-lists-listViewDataManager.ListViewDataManager.getItems=2&amp;ui-force-components-controllers-recordLayoutBroker.RecordLayoutBroker.getLayout=2</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">67816000000abbcdb9</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1336 /aura?r=20&amp;ui-analytics-platform-embeddedChart.EmbeddedReportChart.loadChart=3" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;972;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.analytics.platform.embeddedChart.EmbeddedReportChartController/ACTION$loadChart&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;reportIdOrDeveloperName&quot;:&quot;00O1N000007jedmUAA&quot;,&quot;embeddedChartInput&quot;:{&quot;componentId&quot;:&quot;1:562;a&quot;,&quot;filter&quot;:null,&quot;showTitle&quot;:false,&quot;size&quot;:&quot;auto&quot;,&quot;widthOverrides&quot;:null,&quot;isInteractive&quot;:false,&quot;cacheAge&quot;:86400000,&quot;origin&quot;:&quot;earc&quot;,&quot;isInS1Context&quot;:true,&quot;renderEclairChart&quot;:true}}},{&quot;id&quot;:&quot;973;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.analytics.platform.embeddedChart.EmbeddedReportChartController/ACTION$loadChart&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;reportIdOrDeveloperName&quot;:&quot;00O1N000007jedlUAA&quot;,&quot;embeddedChartInput&quot;:{&quot;componentId&quot;:&quot;1:570;a&quot;,&quot;filter&quot;:null,&quot;showTitle&quot;:false,&quot;size&quot;:&quot;auto&quot;,&quot;widthOverrides&quot;:null,&quot;isInteractive&quot;:false,&quot;cacheAge&quot;:86400000,&quot;origin&quot;:&quot;earc&quot;,&quot;isInS1Context&quot;:true,&quot;renderEclairChart&quot;:true}}},{&quot;id&quot;:&quot;974;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.analytics.platform.embeddedChart.EmbeddedReportChartController/ACTION$loadChart&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;reportIdOrDeveloperName&quot;:&quot;00O1N000007jednUAA&quot;,&quot;embeddedChartInput&quot;:{&quot;componentId&quot;:&quot;1:579;a&quot;,&quot;filter&quot;:null,&quot;showTitle&quot;:false,&quot;size&quot;:&quot;auto&quot;,&quot;widthOverrides&quot;:null,&quot;isInteractive&quot;:false,&quot;cacheAge&quot;:86400000,&quot;origin&quot;:&quot;earc&quot;,&quot;isInS1Context&quot;:true,&quot;renderEclairChart&quot;:true}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=20&amp;ui-analytics-platform-embeddedChart.EmbeddedReportChart.loadChart=3</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">6788500000003898e8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1344 /aura?r=21&amp;ui-force-components-controllers-defenseHook.DefenseHook.getDefenseHook=1&amp;ui-force-components-controllers-hostConfig.HostConfig.getConfigData=1&amp;ui-global-components-one-globalCreate.GlobalCreate.getDockableActionsList=1&amp;ui-global-components-one-userProfileCard.UserProfileCard.loadProfileCardInfo=1&amp;ui-identity-components-sessiontimeoutwarn.SessionTimeoutWarn.getSessionTimeoutConfig=1&amp;ui-notifications-components-notifications-controller.Notifications.getNotifications=1&amp;ui-rtc-components-aura-components.RtcDiscoveryBanner.getConfig=1&amp;ui-support-components-crossFrameApiManager.CrossFrameApiManager.getIsLightningOpenCtiUser=1&amp;ui-walkthroughs-components-controllers.Player.willDisplayWalkthroughInternalTool=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1379;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.defenseHook.DefenseHookController/ACTION$getDefenseHook&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}},{&quot;id&quot;:&quot;1380;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.identity.components.sessiontimeoutwarn.SessionTimeoutWarnController/ACTION$getSessionTimeoutConfig&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}},{&quot;id&quot;:&quot;1382;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.support.components.crossFrameApiManager.CrossFrameApiManagerController/ACTION$getIsLightningOpenCtiUser&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true},{&quot;id&quot;:&quot;1383;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.rtc.components.aura.components.RtcDiscoveryBannerController/ACTION$getConfig&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true},{&quot;id&quot;:&quot;1385;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.hostConfig.HostConfigController/ACTION$getConfigData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true},{&quot;id&quot;:&quot;1409;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.globalCreate.GlobalCreateController/ACTION$getDockableActionsList&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}},{&quot;id&quot;:&quot;1410;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.notifications.components.notifications.controller.NotificationsController/ACTION$getNotifications&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;currentLastActivity&quot;:&quot;1970-01-01T00:00:00.000Z&quot;}},{&quot;id&quot;:&quot;1414;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.userProfileCard.UserProfileCardController/ACTION$loadProfileCardInfo&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true},{&quot;id&quot;:&quot;1417;a&quot;,&quot;descriptor&quot;:&quot;java://ui.walkthroughs.components.controllers.PlayerController/ACTION$willDisplayWalkthroughInternalTool&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=21&amp;ui-force-components-controllers-defenseHook.DefenseHook.getDefenseHook=1&amp;ui-force-components-controllers-hostConfig.HostConfig.getConfigData=1&amp;ui-global-components-one-globalCreate.GlobalCreate.getDockableActionsList=1&amp;ui-global-components-one-userProfileCard.UserProfileCard.loadProfileCardInfo=1&amp;ui-identity-components-sessiontimeoutwarn.SessionTimeoutWarn.getSessionTimeoutConfig=1&amp;ui-notifications-components-notifications-controller.Notifications.getNotifications=1&amp;ui-rtc-components-aura-components.RtcDiscoveryBanner.getConfig=1&amp;ui-support-components-crossFrameApiManager.CrossFrameApiManager.getIsLightningOpenCtiUser=1&amp;ui-walkthroughs-components-controllers.Player.willDisplayWalkthroughInternalTool=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">70100000000c575be7</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1346 /aura?r=25&amp;ui-setup-components-aura-components-gear.Gear.getPermissions=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1420;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.setup.components.aura.components.gear.GearController/ACTION$getPermissions&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=25&amp;ui-setup-components-aura-components-gear.Gear.getPermissions=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">70105000000c091ac0</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1342 /aura?r=22&amp;ui-instrumentation-components-beacon.InstrumentationBeacon.sendData=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1378;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.instrumentation.components.beacon.InstrumentationBeaconController/ACTION$sendData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:bootstrap\&quot;,\&quot;ts\&quot;:0,\&quot;duration\&quot;:55492,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (2)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55427,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:11},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (3)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55448,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (4)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55455,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (5)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55458,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;navContainer:render\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55415,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;navContainer:afterRender\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55460,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;duration\&quot;:0}],\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://laf:standardLayoutContainer\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:280},{\&quot;name\&quot;:\&quot;markup://ui:label\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:3}]},\&quot;owner\&quot;:\&quot;laf:appLayoutHost\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;bootstrap\&quot;,\&quot;eventSource\&quot;:\&quot;lightning\&quot;,\&quot;attributes\&quot;:{\&quot;cache\&quot;:{\&quot;appCache\&quot;:false,\&quot;gvps\&quot;:false,\&quot;lightningLayout\&quot;:true},\&quot;execBootstrapJs\&quot;:8332,\&quot;execInlineJs\&quot;:8332,\&quot;appCssLoading\&quot;:null,\&quot;visibilityStateStart\&quot;:\&quot;visible\&quot;,\&quot;execAuraJs\&quot;:14970,\&quot;runInitAsync\&quot;:14974,\&quot;appCssLoadedCallback\&quot;:null,\&quot;runAfterContextCreated\&quot;:20677,\&quot;runAfterInitDefsReady\&quot;:54907,\&quot;runAfterBootstrapReady\&quot;:54908,\&quot;AuraFrameworkEPT\&quot;:54909,\&quot;appCreationStart\&quot;:54928,\&quot;appCreationEnd\&quot;:55067,\&quot;appRenderingStart\&quot;:55067,\&quot;appRenderingEnd\&quot;:55073,\&quot;bootstrapEPT\&quot;:55074,\&quot;cdnEnabled\&quot;:false,\&quot;mode\&quot;:\&quot;PROD\&quot;,\&quot;pageStartTime\&quot;:1559032372042,\&quot;timing\&quot;:{\&quot;navigationStart\&quot;:1559032372042,\&quot;fetchStart\&quot;:1559032375076,\&quot;readyStart\&quot;:3034,\&quot;dnsStart\&quot;:1559032375077,\&quot;dnsEnd\&quot;:1559032375077,\&quot;lookupDomainTime\&quot;:0,\&quot;connectStart\&quot;:1559032375077,\&quot;connectEnd\&quot;:1559032375077,\&quot;connectTime\&quot;:0,\&quot;requestStart\&quot;:1559032375077,\&quot;responseStart\&quot;:1559032375077,\&quot;responseEnd\&quot;:1559032380354,\&quot;requestTime\&quot;:5277,\&quot;domLoading\&quot;:1559032380354,\&quot;domInteractive\&quot;:1559032427125,\&quot;initDomTreeTime\&quot;:46771,\&quot;contentLoadStart\&quot;:1559032427126,\&quot;contentLoadEnd\&quot;:1559032427127,\&quot;domComplete\&quot;:1559032427127,\&quot;domReadyTime\&quot;:2,\&quot;loadEventStart\&quot;:1559032427127,\&quot;loadEventEnd\&quot;:1559032427127,\&quot;loadEventTime\&quot;:0,\&quot;loadTime\&quot;:52051,\&quot;unloadEventStart\&quot;:0,\&quot;unloadEventEnd\&quot;:0,\&quot;unloadEventTime\&quot;:0,\&quot;appCacheTime\&quot;:1,\&quot;redirectTime\&quot;:0},\&quot;type\&quot;:\&quot;COLD\&quot;,\&quot;allRequests\&quot;:[{\&quot;name\&quot;:\&quot;${protocol}://${host}/one/one.app\&quot;,\&quot;initiatorType\&quot;:\&quot;navigation\&quot;,\&quot;duration\&quot;:3035,\&quot;startTime\&quot;:0,\&quot;fetchStart\&quot;:3033,\&quot;requestStart\&quot;:3035,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:3033,\&quot;ttfb\&quot;:3035,\&quot;transfer\&quot;:0,\&quot;transferSize\&quot;:207748,\&quot;encodedBodySize\&quot;:205823,\&quot;decodedBodySize\&quot;:205823},{\&quot;name\&quot;:\&quot;${protocol}://${host}/l/%7B%22mode%22%3A%22PROD%22%2C%22app%22%3A%22one%3Aone%22%2C%22fwuid%22%3A%22pxtF0ZdGYF-z00XsmRUcGQ%22%2C%22loaded%22%3A%7B%22APPLICATION%40markup%3A%2F%2Fone%3Aone%22%3A%22Vel2xmipbW6B0F2Wfw22YA%22%7D%2C%22pathPrefix%22%3A%22%22%2C%22ls%22%3A1%7D/resources.js?version=1558443552000\&quot;,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:3850,\&quot;startTime\&quot;:8318,\&quot;fetchStart\&quot;:8318,\&quot;requestStart\&quot;:8330,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:12,\&quot;transfer\&quot;:3838,\&quot;transferSize\&quot;:9069,\&quot;encodedBodySize\&quot;:8153,\&quot;decodedBodySize\&quot;:8153,\&quot;serverTime\&quot;:19},{\&quot;name\&quot;:\&quot;appcore.js\&quot;,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:37614,\&quot;startTime\&quot;:8319,\&quot;fetchStart\&quot;:8319,\&quot;requestStart\&quot;:8332,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:1,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:56,\&quot;transfer\&quot;:37558,\&quot;transferSize\&quot;:2382443,\&quot;encodedBodySize\&quot;:2381519,\&quot;decodedBodySize\&quot;:2381519},{\&quot;name\&quot;:\&quot;app.js\&quot;,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:46546,\&quot;startTime\&quot;:8319,\&quot;fetchStart\&quot;:8319,\&quot;requestStart\&quot;:8375,\&quot;dns\&quot;:43,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:131,\&quot;transfer\&quot;:46415,\&quot;transferSize\&quot;:7566124,\&quot;encodedBodySize\&quot;:7565200,\&quot;decodedBodySize\&quot;:7565200},{\&quot;name\&quot;:\&quot;/aura_\&quot;,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:6603,\&quot;startTime\&quot;:8319,\&quot;fetchStart\&quot;:8319,\&quot;requestStart\&quot;:8330,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:56,\&quot;transfer\&quot;:6547,\&quot;transferSize\&quot;:628385,\&quot;encodedBodySize\&quot;:627462,\&quot;decodedBodySize\&quot;:627462},{\&quot;name\&quot;:\&quot;app.css\&quot;,\&quot;initiatorType\&quot;:\&quot;link\&quot;,\&quot;duration\&quot;:12300,\&quot;startTime\&quot;:8335,\&quot;fetchStart\&quot;:8335,\&quot;requestStart\&quot;:8450,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:75,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:152,\&quot;transfer\&quot;:12148,\&quot;transferSize\&quot;:1161503,\&quot;encodedBodySize\&quot;:1160587,\&quot;decodedBodySize\&quot;:1160587},{\&quot;name\&quot;:\&quot;${protocol}://${host}/aura?preloadActions\&quot;,\&quot;initiatorType\&quot;:\&quot;xmlhttprequest\&quot;,\&quot;duration\&quot;:2832,\&quot;startTime\&quot;:8335,\&quot;fetchStart\&quot;:8335,\&quot;requestStart\&quot;:8450,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:74,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:115,\&quot;transfer\&quot;:2717,\&quot;transferSize\&quot;:99615,\&quot;encodedBodySize\&quot;:97530,\&quot;decodedBodySize\&quot;:97530,\&quot;serverTime\&quot;:228},{\&quot;name\&quot;:\&quot;${protocol}://${host}/file-asset/unnamed1?v=1\&quot;,\&quot;initiatorType\&quot;:\&quot;css\&quot;,\&quot;duration\&quot;:13038,\&quot;startTime\&quot;:8340,\&quot;fetchStart\&quot;:21378,\&quot;requestStart\&quot;:0,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:-8340,\&quot;transfer\&quot;:21378,\&quot;transferSize\&quot;:0,\&quot;encodedBodySize\&quot;:0,\&quot;decodedBodySize\&quot;:0},{\&quot;name\&quot;:\&quot;${protocol}://${host}/img/one/favicon-152.png\&quot;,\&quot;initiatorType\&quot;:\&quot;other\&quot;,\&quot;duration\&quot;:14614,\&quot;startTime\&quot;:8346,\&quot;fetchStart\&quot;:8346,\&quot;requestStart\&quot;:20636,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:1,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:12291,\&quot;transfer\&quot;:2323,\&quot;transferSize\&quot;:13820,\&quot;encodedBodySize\&quot;:12929,\&quot;decodedBodySize\&quot;:12929},{\&quot;name\&quot;:\&quot;${protocol}://${host}/img/one/favicon.ico\&quot;,\&quot;initiatorType\&quot;:\&quot;other\&quot;,\&quot;duration\&quot;:14314,\&quot;startTime\&quot;:8347,\&quot;fetchStart\&quot;:8347,\&quot;requestStart\&quot;:20636,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:12290,\&quot;transfer\&quot;:2024,\&quot;transferSize\&quot;:6322,\&quot;encodedBodySize\&quot;:5430,\&quot;decodedBodySize\&quot;:5430},{\&quot;name\&quot;:\&quot;${protocol}://${host}/_slds/fonts/v2.3.0/SalesforceSans-Regular.woff2\&quot;,\&quot;initiatorType\&quot;:\&quot;other\&quot;,\&quot;duration\&quot;:4266,\&quot;startTime\&quot;:20694,\&quot;fetchStart\&quot;:20694,\&quot;requestStart\&quot;:20754,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:60,\&quot;transfer\&quot;:4206,\&quot;transferSize\&quot;:28577,\&quot;encodedBodySize\&quot;:27684,\&quot;decodedBodySize\&quot;:27684}],\&quot;requestAppCoreJs\&quot;:{\&quot;name\&quot;:\&quot;appcore.js\&quot;,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:37614,\&quot;startTime\&quot;:8319,\&quot;fetchStart\&quot;:8319,\&quot;requestStart\&quot;:8332,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:1,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:56,\&quot;transfer\&quot;:37558,\&quot;transferSize\&quot;:2382443,\&quot;encodedBodySize\&quot;:2381519,\&quot;decodedBodySize\&quot;:2381519},\&quot;requestAppJs\&quot;:{\&quot;name\&quot;:\&quot;app.js\&quot;,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:46546,\&quot;startTime\&quot;:8319,\&quot;fetchStart\&quot;:8319,\&quot;requestStart\&quot;:8375,\&quot;dns\&quot;:43,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:131,\&quot;transfer\&quot;:46415,\&quot;transferSize\&quot;:7566124,\&quot;encodedBodySize\&quot;:7565200,\&quot;decodedBodySize\&quot;:7565200},\&quot;requestAuraJs\&quot;:{\&quot;name\&quot;:\&quot;/aura_\&quot;,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:6603,\&quot;startTime\&quot;:8319,\&quot;fetchStart\&quot;:8319,\&quot;requestStart\&quot;:8330,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:56,\&quot;transfer\&quot;:6547,\&quot;transferSize\&quot;:628385,\&quot;encodedBodySize\&quot;:627462,\&quot;decodedBodySize\&quot;:627462},\&quot;requestAppCss\&quot;:{\&quot;name\&quot;:\&quot;app.css\&quot;,\&quot;initiatorType\&quot;:\&quot;link\&quot;,\&quot;duration\&quot;:12300,\&quot;startTime\&quot;:8335,\&quot;fetchStart\&quot;:8335,\&quot;requestStart\&quot;:8450,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:75,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:152,\&quot;transfer\&quot;:12148,\&quot;transferSize\&quot;:1161503,\&quot;encodedBodySize\&quot;:1160587,\&quot;decodedBodySize\&quot;:1160587},\&quot;requestLightningLayout\&quot;:{\&quot;name\&quot;:\&quot;${protocol}://${host}/aura?preloadActions\&quot;,\&quot;initiatorType\&quot;:\&quot;xmlhttprequest\&quot;,\&quot;duration\&quot;:2832,\&quot;startTime\&quot;:8335,\&quot;fetchStart\&quot;:8335,\&quot;requestStart\&quot;:8450,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:74,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:115,\&quot;transfer\&quot;:2717,\&quot;transferSize\&quot;:99615,\&quot;encodedBodySize\&quot;:97530,\&quot;decodedBodySize\&quot;:97530,\&quot;serverTime\&quot;:228},\&quot;lightningLayoutCreationStart\&quot;:55094,\&quot;lightningLayoutCreationEnd\&quot;:55376,\&quot;lightningLayoutRenderingStart\&quot;:55377,\&quot;lightningLayoutRenderingEnd\&quot;:55489,\&quot;visibilityStateEnd\&quot;:\&quot;visible\&quot;,\&quot;lightningEPT\&quot;:55492,\&quot;referer\&quot;:\&quot;Login\&quot;,\&quot;appRootRequestId\&quot;:\&quot;63a3c9a72593fa63\&quot;,\&quot;navbarCPUTime\&quot;:0,\&quot;appType\&quot;:\&quot;Standard\&quot;,\&quot;viewportHeight\&quot;:966,\&quot;viewportWidth\&quot;:1920,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:55532,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-click\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:1,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;global-nav-container-load\&quot;,\&quot;scope\&quot;:\&quot;standard-layout-container\&quot;,\&quot;context\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appNavType\&quot;:\&quot;Standard\&quot;,\&quot;appUiType\&quot;:\&quot;Lightning\&quot;,\&quot;tabId\&quot;:\&quot;0Qk1N000000CeVwSAK\&quot;,\&quot;tabContentType\&quot;:\&quot;home\&quot;,\&quot;tabIsCustom\&quot;:false,\&quot;tabIsGranular\&quot;:false,\&quot;numberOfTabs\&quot;:24,\&quot;numberOfTopLevelTabs\&quot;:24,\&quot;numberOfGranularTabs\&quot;:0,\&quot;numberOfUserAddedTabs\&quot;:9,\&quot;isPersonalized\&quot;:true}},\&quot;page\&quot;:{\&quot;entity\&quot;:\&quot;unknown\&quot;,\&quot;entityType\&quot;:\&quot;unknown\&quot;,\&quot;context\&quot;:\&quot;unknown\&quot;}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:55493,\&quot;duration\&quot;:322,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (12)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55536,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:61},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55598,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:4},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55602,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;navContainer:create\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55526,\&quot;context\&quot;:{\&quot;itemCount\&quot;:24},\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;duration\&quot;:5}],\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://one:appnav\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:0},{\&quot;name\&quot;:\&quot;markup://force:recordGlobalValueProvider\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:0}],\&quot;force_record\&quot;:[{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;retrieveDraftsFromOldStorage.55519\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55519,\&quot;context\&quot;:null},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;cacheLookup.55607\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordKey\&quot;:\&quot;$Record.0051N000005pgpoQAA.undefined.null.null.null.Name,Id.VIEW.false.null.null.null\&quot;,\&quot;keyPrefix\&quot;:\&quot;005\&quot;,\&quot;cacheHit\&quot;:false},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;recordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecord\&quot;,\&quot;parentCmpName\&quot;:\&quot;oneUserProfileCardTrigger\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;335:0;p\&quot;,\&quot;recordId\&quot;:\&quot;0051N000005pgpoQAA\&quot;,\&quot;requestConfig\&quot;:\&quot;0051N000005pgpoQAA, layoutType=undefined, layoutOverride=undefined, parentId=undefined, fields=Name,Id, optionalFields=null, mode=VIEW, updateMru=false, noServer=false\&quot;,\&quot;hitMissType\&quot;:\&quot;MISS\&quot;,\&quot;recordAgeMs\&quot;:null}}]},\&quot;owner\&quot;:\&quot;laf:appLayoutHost\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;loadClientLibrary\&quot;,\&quot;attributes\&quot;:{\&quot;library\&quot;:\&quot;canvasrendering\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:newDefs\&quot;,\&quot;ts\&quot;:56141,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;flexipage:page\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;newDefs\&quot;,\&quot;attributes\&quot;:{\&quot;componentDefs\&quot;:[\&quot;markup://flexipage:runtimeBackgroundComponentsWrapper\&quot;,\&quot;markup://one:fp0M01N000000QV8cSAG__pageWithoutSobject__1516162029000\&quot;,\&quot;markup://flexipage:runtimeComponent\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:56671,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;force:record\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;read\&quot;,\&quot;attributes\&quot;:{\&quot;recordId\&quot;:\&quot;0051N000005pgpoQAA\&quot;,\&quot;recordType\&quot;:\&quot;User\&quot;,\&quot;recordTypeSetInClient\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:2,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;read\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;page\&quot;:{\&quot;entity\&quot;:\&quot;unknown\&quot;,\&quot;entityType\&quot;:\&quot;unknown\&quot;,\&quot;context\&quot;:\&quot;unknown\&quot;}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:55244,\&quot;duration\&quot;:1670,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (2)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55427,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:11},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (3)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55448,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (4)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55455,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (5)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55458,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (12)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55536,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:61},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55598,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:4},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55602,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56740,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56742,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;navContainer:render\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55415,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;navContainer:afterRender\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55460,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;navContainer:create\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55526,\&quot;context\&quot;:{\&quot;itemCount\&quot;:24},\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;duration\&quot;:5},{\&quot;ns\&quot;:\&quot;newRouting\&quot;,\&quot;name\&quot;:\&quot;resolvePage\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55605,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;duration\&quot;:1070},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;singlePaneWindowManager:contentSelected\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56683,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;laf:singlePaneWindowManager\&quot;,\&quot;duration\&quot;:12},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;pageHost:loadContent\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56698,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;laf:pageHost\&quot;,\&quot;duration\&quot;:27}],\&quot;transport\&quot;:[{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55345,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:1,\&quot;requestLength\&quot;:873,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;203;a\&quot;],\&quot;requestId\&quot;:\&quot;553450000002de7715\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:37865,\&quot;xhrDuration\&quot;:790,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:55345,\&quot;fetchStart\&quot;:55345,\&quot;requestStart\&quot;:55347,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:3,\&quot;transfer\&quot;:787,\&quot;transferSize\&quot;:39798,\&quot;serverTime\&quot;:105,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:792},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55610,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:3,\&quot;requestLength\&quot;:1301,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;229;a\&quot;,\&quot;230;a\&quot;],\&quot;requestId\&quot;:\&quot;55610000000924ee0a\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:8661,\&quot;xhrDuration\&quot;:1056,\&quot;xhrStall\&quot;:286,\&quot;startTime\&quot;:55610,\&quot;fetchStart\&quot;:55610,\&quot;requestStart\&quot;:55896,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:289,\&quot;transfer\&quot;:767,\&quot;transferSize\&quot;:10593,\&quot;serverTime\&quot;:81,\&quot;xhrDelay\&quot;:0},\&quot;duration\&quot;:1056},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55514,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:2,\&quot;requestLength\&quot;:2434,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;133;a\&quot;,\&quot;135;a\&quot;,\&quot;147;a\&quot;,\&quot;164;a\&quot;,\&quot;182;a\&quot;,\&quot;185;a\&quot;,\&quot;195;a\&quot;],\&quot;requestId\&quot;:\&quot;5551400000038b2f10\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:20657,\&quot;xhrDuration\&quot;:1392,\&quot;xhrStall\&quot;:295,\&quot;startTime\&quot;:55516,\&quot;fetchStart\&quot;:55516,\&quot;requestStart\&quot;:55811,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:295,\&quot;transfer\&quot;:1097,\&quot;transferSize\&quot;:22590,\&quot;serverTime\&quot;:398,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:1395}],\&quot;actions\&quot;:[{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55344,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;203;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;flexipage:page\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.flexipage.components.page.FlexipageControllerV2/ACTION$getPage\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;params\&quot;:{\&quot;flexiPageDeveloperName\&quot;:\&quot;TR1__Front_Office_UtilityBar1\&quot;},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:64,\&quot;db\&quot;:2,\&quot;xhrServerTime\&quot;:100,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:799},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55606,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;229;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getTabByNameAndApp\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:37,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:77,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1068},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55609,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;230;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:recordGlobalValueProvider\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$getRecord\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:14,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:77,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1065}],\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://ui:label\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:3},{\&quot;name\&quot;:\&quot;markup://one:appnav\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:0},{\&quot;name\&quot;:\&quot;markup://force:recordGlobalValueProvider\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:0},{\&quot;name\&quot;:\&quot;markup://laf:pageHost\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:10},{\&quot;name\&quot;:\&quot;markup://home:landing\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:26}],\&quot;force_record\&quot;:[{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;retrieveDraftsFromOldStorage.55519\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55519,\&quot;context\&quot;:null},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;cacheLookup.55607\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordKey\&quot;:\&quot;$Record.0051N000005pgpoQAA.undefined.null.null.null.Name,Id.VIEW.false.null.null.null\&quot;,\&quot;keyPrefix\&quot;:\&quot;005\&quot;,\&quot;cacheHit\&quot;:false},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;recordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecord\&quot;,\&quot;parentCmpName\&quot;:\&quot;oneUserProfileCardTrigger\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;335:0;p\&quot;,\&quot;recordId\&quot;:\&quot;0051N000005pgpoQAA\&quot;,\&quot;requestConfig\&quot;:\&quot;0051N000005pgpoQAA, layoutType=undefined, layoutOverride=undefined, parentId=undefined, fields=Name,Id, optionalFields=null, mode=VIEW, updateMru=false, noServer=false\&quot;,\&quot;hitMissType\&quot;:\&quot;MISS\&quot;,\&quot;recordAgeMs\&quot;:null}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;loadRecordFromServer.55607\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordKey\&quot;:\&quot;$Record.0051N000005pgpoQAA.undefined.null.null.null.Name,Id.VIEW.false.null.null.null\&quot;,\&quot;error\&quot;:false},\&quot;duration\&quot;:1064}]},\&quot;owner\&quot;:\&quot;forceSearch:searchGDPCacheScopes\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-search-sgdp-fetch-getScopeMaps\&quot;,\&quot;attributes\&quot;:{\&quot;tStart\&quot;:1559032427288,\&quot;cacheHit\&quot;:false,\&quot;actionId\&quot;:\&quot;133;a\&quot;,\&quot;fetchedScopeMaps\&quot;:20,\&quot;name\&quot;:\&quot;DEFAULT\&quot;,\&quot;groupId\&quot;:\&quot;DEFAULT\&quot;,\&quot;requestType\&quot;:\&quot;getScopeMaps\&quot;,\&quot;requestId\&quot;:\&quot;forceSearchSearchGDPCacheScopes:201:0;p\&quot;,\&quot;requestCmp\&quot;:\&quot;forceSearchSearchGDPCacheScopes\&quot;,\&quot;requestCmpId\&quot;:\&quot;201:0;p\&quot;,\&quot;params\&quot;:{\&quot;scopeTypes\&quot;:[\&quot;SMART_SCOPE\&quot;,\&quot;PRIMARY\&quot;,\&quot;FILTER\&quot;]},\&quot;sourceCmp\&quot;:\&quot;forceSearch:searchGDPCacheScopes\&quot;,\&quot;time\&quot;:1559032428958,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:55246,\&quot;duration\&quot;:1670,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (2)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55427,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:11},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (3)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55448,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (4)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55455,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (5)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55458,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (12)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55536,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:61},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55598,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:4},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55602,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56740,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56742,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;navContainer:render\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55415,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;navContainer:afterRender\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55460,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;ltng\&quot;,\&quot;name\&quot;:\&quot;navContainer:create\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55526,\&quot;context\&quot;:{\&quot;itemCount\&quot;:24},\&quot;owner\&quot;:\&quot;one:appNavContainer\&quot;,\&quot;duration\&quot;:5},{\&quot;ns\&quot;:\&quot;newRouting\&quot;,\&quot;name\&quot;:\&quot;resolvePage\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55605,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;duration\&quot;:1070},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;singlePaneWindowManager:contentSelected\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56683,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;laf:singlePaneWindowManager\&quot;,\&quot;duration\&quot;:12},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;pageHost:loadContent\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56698,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;laf:pageHost\&quot;,\&quot;duration\&quot;:27}],\&quot;transport\&quot;:[{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55345,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:1,\&quot;requestLength\&quot;:873,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;203;a\&quot;],\&quot;requestId\&quot;:\&quot;553450000002de7715\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:37865,\&quot;xhrDuration\&quot;:790,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:55345,\&quot;fetchStart\&quot;:55345,\&quot;requestStart\&quot;:55347,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:3,\&quot;transfer\&quot;:787,\&quot;transferSize\&quot;:39798,\&quot;serverTime\&quot;:105,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:792},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55610,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:3,\&quot;requestLength\&quot;:1301,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;229;a\&quot;,\&quot;230;a\&quot;],\&quot;requestId\&quot;:\&quot;55610000000924ee0a\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:8661,\&quot;xhrDuration\&quot;:1056,\&quot;xhrStall\&quot;:286,\&quot;startTime\&quot;:55610,\&quot;fetchStart\&quot;:55610,\&quot;requestStart\&quot;:55896,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:289,\&quot;transfer\&quot;:767,\&quot;transferSize\&quot;:10593,\&quot;serverTime\&quot;:81,\&quot;xhrDelay\&quot;:0},\&quot;duration\&quot;:1056},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55514,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:2,\&quot;requestLength\&quot;:2434,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;133;a\&quot;,\&quot;135;a\&quot;,\&quot;147;a\&quot;,\&quot;164;a\&quot;,\&quot;182;a\&quot;,\&quot;185;a\&quot;,\&quot;195;a\&quot;],\&quot;requestId\&quot;:\&quot;5551400000038b2f10\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:20657,\&quot;xhrDuration\&quot;:1392,\&quot;xhrStall\&quot;:295,\&quot;startTime\&quot;:55516,\&quot;fetchStart\&quot;:55516,\&quot;requestStart\&quot;:55811,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:295,\&quot;transfer\&quot;:1097,\&quot;transferSize\&quot;:22590,\&quot;serverTime\&quot;:398,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:1395}],\&quot;actions\&quot;:[{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55344,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;203;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;flexipage:page\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.flexipage.components.page.FlexipageControllerV2/ACTION$getPage\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;params\&quot;:{\&quot;flexiPageDeveloperName\&quot;:\&quot;TR1__Front_Office_UtilityBar1\&quot;},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:64,\&quot;db\&quot;:2,\&quot;xhrServerTime\&quot;:100,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:799},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55606,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;229;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getTabByNameAndApp\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:37,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:77,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1068},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55609,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;230;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:recordGlobalValueProvider\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$getRecord\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:14,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:77,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1065}],\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://ui:label\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:3},{\&quot;name\&quot;:\&quot;markup://one:appnav\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:0},{\&quot;name\&quot;:\&quot;markup://force:recordGlobalValueProvider\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:0},{\&quot;name\&quot;:\&quot;markup://laf:pageHost\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:10},{\&quot;name\&quot;:\&quot;markup://home:landing\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:26}],\&quot;force_record\&quot;:[{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;retrieveDraftsFromOldStorage.55519\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55519,\&quot;context\&quot;:null},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;cacheLookup.55607\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordKey\&quot;:\&quot;$Record.0051N000005pgpoQAA.undefined.null.null.null.Name,Id.VIEW.false.null.null.null\&quot;,\&quot;keyPrefix\&quot;:\&quot;005\&quot;,\&quot;cacheHit\&quot;:false},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;recordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecord\&quot;,\&quot;parentCmpName\&quot;:\&quot;oneUserProfileCardTrigger\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;335:0;p\&quot;,\&quot;recordId\&quot;:\&quot;0051N000005pgpoQAA\&quot;,\&quot;requestConfig\&quot;:\&quot;0051N000005pgpoQAA, layoutType=undefined, layoutOverride=undefined, parentId=undefined, fields=Name,Id, optionalFields=null, mode=VIEW, updateMru=false, noServer=false\&quot;,\&quot;hitMissType\&quot;:\&quot;MISS\&quot;,\&quot;recordAgeMs\&quot;:null}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;loadRecordFromServer.55607\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordKey\&quot;:\&quot;$Record.0051N000005pgpoQAA.undefined.null.null.null.Name,Id.VIEW.false.null.null.null\&quot;,\&quot;error\&quot;:false},\&quot;duration\&quot;:1064}]},\&quot;owner\&quot;:\&quot;forceSearch:searchGDPCachePermsAndPrefs\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-search-sgdp-fetch-getPermsAndPrefs\&quot;,\&quot;attributes\&quot;:{\&quot;tStart\&quot;:1559032427290,\&quot;cacheHit\&quot;:false,\&quot;actionId\&quot;:\&quot;135;a\&quot;,\&quot;name\&quot;:\&quot;DEFAULT\&quot;,\&quot;groupId\&quot;:\&quot;DEFAULT\&quot;,\&quot;requestType\&quot;:\&quot;getPermsAndPrefs\&quot;,\&quot;requestId\&quot;:\&quot;forceSearchSearchGDPCachePermsAndPrefs:195:0;p\&quot;,\&quot;requestCmp\&quot;:\&quot;forceSearchSearchGDPCachePermsAndPrefs\&quot;,\&quot;requestCmpId\&quot;:\&quot;195:0;p\&quot;,\&quot;params\&quot;:{},\&quot;sourceCmp\&quot;:\&quot;forceSearch:searchGDPCachePermsAndPrefs\&quot;,\&quot;time\&quot;:1559032428958,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:57112,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;flexipage:page\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;componentTracker\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:3,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;default\&quot;,\&quot;scope\&quot;:\&quot;component\&quot;,\&quot;context\&quot;:{\&quot;devNameOrId\&quot;:[\&quot;one:utilityBarItem\&quot;,\&quot;one:utilityBarItem\&quot;,\&quot;one:utilityBarItem\&quot;,\&quot;one:utilityBarItem\&quot;]}},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:newDefs\&quot;,\&quot;ts\&quot;:58929,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;flexipage:page\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;newDefs\&quot;,\&quot;attributes\&quot;:{\&quot;componentDefs\&quot;:[\&quot;markup://home:fp0M01N000000QV8dSAG__pageWithoutSobject__1516162029000\&quot;,\&quot;markup://flexipage:runtimeBackgroundComponentsWrapper\&quot;,\&quot;markup://flexipage:runtimeComponent\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:65860,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;force:recordCollection\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;reads\&quot;,\&quot;attributes\&quot;:{\&quot;recordIds\&quot;:[],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:4,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;reads\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:66004,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;flexipage:page\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;componentTracker\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:5,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;default\&quot;,\&quot;scope\&quot;:\&quot;component\&quot;,\&quot;context\&quot;:{\&quot;devNameOrId\&quot;:[\&quot;one:utilityBarItem\&quot;,\&quot;one:utilityBarItem\&quot;,\&quot;one:utilityBarItem\&quot;,\&quot;one:utilityBarItem\&quot;,\&quot;runtime_sales_activities:todayTaskContainer\&quot;,\&quot;home:eventContainer\&quot;,\&quot;home:newsPanel\&quot;,\&quot;flexipage:reportChart\&quot;,\&quot;flexipage:reportChart\&quot;,\&quot;flexipage:reportChart\&quot;,\&quot;flexipage:reportChart\&quot;,\&quot;flexipage:filterListCard\&quot;,\&quot;flexipage:filterListCard\&quot;,\&quot;forceChatter:publisher\&quot;,\&quot;forceChatter:exposedFeed\&quot;]}},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:newDefs\&quot;,\&quot;ts\&quot;:66649,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;force:recordLayoutList\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;newDefs\&quot;,\&quot;attributes\&quot;:{\&quot;componentDefs\&quot;:[\&quot;layout://rl-Task-VIEW-COMPACT----runtime_sales_activities_todayTaskContainer-_1-0-2f5a2f5a7438684a76664f746c5765454f376c4e6b773d3d.c\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:newDefs\&quot;,\&quot;ts\&quot;:66654,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;force:recordLayoutTemplate\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;newDefs\&quot;,\&quot;attributes\&quot;:{\&quot;componentDefs\&quot;:[\&quot;layout://rl-Event-VIEW-COMPACT----home_eventContainer-_1-0-446e78382f476c71597a4739452f52436c6d6d506e413d3d.c\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:66848,\&quot;duration\&quot;:17,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;NewsRequest_1\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66848,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:16},{\&quot;ns\&quot;:\&quot;wits\&quot;,\&quot;name\&quot;:\&quot;SFXPERF:fetchNews\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66848,\&quot;context\&quot;:{\&quot;action\&quot;:\&quot;fetchNews\&quot;},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:16}]},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-wits-fetchNews\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:66866,\&quot;duration\&quot;:33,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://wits:newsTeaserCard\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:26}],\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;wits\&quot;,\&quot;name\&quot;:\&quot;displayNewsItems\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66867,\&quot;context\&quot;:{\&quot;event\&quot;:\&quot;cardRendered\&quot;,\&quot;clientType\&quot;:\&quot;SFXPERF\&quot;},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:26}]},\&quot;owner\&quot;:null,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-wits-fetchNews\&quot;,\&quot;attributes\&quot;:{\&quot;action\&quot;:\&quot;process error callback\&quot;,\&quot;clientType\&quot;:\&quot;SFXPERF\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:66807,\&quot;duration\&quot;:137,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://force:placeholder\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:1},{\&quot;name\&quot;:\&quot;markup://wits:newsTeaserCard\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:26}],\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;NewsRequest_1\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66848,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:16},{\&quot;ns\&quot;:\&quot;wits\&quot;,\&quot;name\&quot;:\&quot;SFXPERF:fetchNews\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66848,\&quot;context\&quot;:{\&quot;action\&quot;:\&quot;fetchNews\&quot;},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:16},{\&quot;ns\&quot;:\&quot;wits\&quot;,\&quot;name\&quot;:\&quot;displayNewsItems\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66867,\&quot;context\&quot;:{\&quot;event\&quot;:\&quot;cardRendered\&quot;,\&quot;clientType\&quot;:\&quot;SFXPERF\&quot;},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:26}]},\&quot;owner\&quot;:\&quot;reports:eclairReportChart\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;loadClientLibrary\&quot;,\&quot;attributes\&quot;:{\&quot;library\&quot;:\&quot;eclairng\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:67701,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;force:recordCollection\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;reads\&quot;,\&quot;attributes\&quot;:{\&quot;recordIds\&quot;:[],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:6,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;reads\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:67778,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;force:recordCollection\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;reads\&quot;,\&quot;attributes\&quot;:{\&quot;recordIds\&quot;:[],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:7,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;reads\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:67923,\&quot;duration\&quot;:67,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://forceChatter:style\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:64}]},\&quot;owner\&quot;:\&quot;forceChatter:feed\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-feed:component:create\&quot;,\&quot;attributes\&quot;:{\&quot;context\&quot;:{\&quot;type\&quot;:\&quot;BOOKMARKS\&quot;,\&quot;subjectId\&quot;:null,\&quot;searchQuery\&quot;:null,\&quot;showFeedItemActions\&quot;:true,\&quot;feedDesign\&quot;:\&quot;DEFAULT\&quot;,\&quot;firstPageSize\&quot;:4,\&quot;hasFeedSwitcher\&quot;:false,\&quot;showFilteringMenuGroup\&quot;:false,\&quot;includeRecordActivitiesInFeed\&quot;:true,\&quot;retrieveOnlyTopLevelThreadedComments\&quot;:false,\&quot;gusTeamId\&quot;:\&quot;a00B0000002pDJa\&quot;,\&quot;hardwareConcurrency\&quot;:4},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:67991,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;forceChatter:feed\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;reads\&quot;,\&quot;attributes\&quot;:{\&quot;operation\&quot;:\&quot;feedLoad\&quot;,\&quot;feedItemIds\&quot;:\&quot;\&quot;,\&quot;sortOrder\&quot;:\&quot;LastModifiedDateDesc\&quot;,\&quot;feedType\&quot;:\&quot;Bookmarks\&quot;,\&quot;startFeedItemPosition\&quot;:0,\&quot;searchQueryId\&quot;:null,\&quot;subjectId\&quot;:\&quot;user\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:8,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;load\&quot;,\&quot;scope\&quot;:\&quot;ChatterFeed\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:67994,\&quot;duration\&quot;:43,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (148)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:68007,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:8},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (149)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:68015,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:5},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (150)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:68021,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0}]},\&quot;owner\&quot;:\&quot;forceChatter:feedInner\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-feed:component:render\&quot;,\&quot;attributes\&quot;:{\&quot;context\&quot;:{\&quot;action\&quot;:\&quot;PageView\&quot;,\&quot;target\&quot;:\&quot;forceChatter:feed:init\&quot;,\&quot;type\&quot;:\&quot;Normal\&quot;,\&quot;gusTeamId\&quot;:\&quot;a00B0000002pDJa\&quot;,\&quot;hardwareConcurrency\&quot;:4},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:65998,\&quot;duration\&quot;:2039,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (138)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66038,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (139)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66039,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (142)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66603,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (143)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66705,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (144)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67863,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (145)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67875,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (148)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:68007,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:8},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (149)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:68015,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:5},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (150)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:68021,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;NewsRequest_1\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66848,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:16},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;RLTCacheInfo\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67721,\&quot;context\&quot;:{\&quot;gusTeamId\&quot;:\&quot;a00B0000003EdjdIAC\&quot;,\&quot;hasLayout\&quot;:false,\&quot;entityName\&quot;:\&quot;TR1__Closing_Report__c\&quot;,\&quot;mode\&quot;:\&quot;VIEW\&quot;,\&quot;type\&quot;:\&quot;LIST\&quot;,\&quot;cmpName\&quot;:\&quot;recordLayoutTemplate\&quot;},\&quot;owner\&quot;:\&quot;force:recordLayoutTemplate\&quot;},{\&quot;ns\&quot;:\&quot;S1PERF\&quot;,\&quot;name\&quot;:\&quot;RLTCacheInfo\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67801,\&quot;context\&quot;:{\&quot;gusTeamId\&quot;:\&quot;a00B0000003EdjdIAC\&quot;,\&quot;hasLayout\&quot;:false,\&quot;entityName\&quot;:\&quot;TR1__Closing_Report__c\&quot;,\&quot;mode\&quot;:\&quot;VIEW\&quot;,\&quot;type\&quot;:\&quot;LIST\&quot;,\&quot;cmpName\&quot;:\&quot;recordLayoutTemplate\&quot;},\&quot;owner\&quot;:\&quot;force:recordLayoutTemplate\&quot;},{\&quot;ns\&quot;:\&quot;wits\&quot;,\&quot;name\&quot;:\&quot;newsPanelRender\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66030,\&quot;context\&quot;:{\&quot;action\&quot;:\&quot;newsPanelRender\&quot;},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:11},{\&quot;ns\&quot;:\&quot;wits\&quot;,\&quot;name\&quot;:\&quot;SFXPERF:fetchNews\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66848,\&quot;context\&quot;:{\&quot;action\&quot;:\&quot;fetchNews\&quot;},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:16},{\&quot;ns\&quot;:\&quot;wits\&quot;,\&quot;name\&quot;:\&quot;displayNewsItems\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66867,\&quot;context\&quot;:{\&quot;event\&quot;:\&quot;cardRendered\&quot;,\&quot;clientType\&quot;:\&quot;SFXPERF\&quot;},\&quot;owner\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;duration\&quot;:26},{\&quot;ns\&quot;:\&quot;feeds\&quot;,\&quot;name\&quot;:\&quot;feedXhrAndNetworkTime\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66049,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;forceChatter:feed\&quot;,\&quot;duration\&quot;:1874},{\&quot;ns\&quot;:\&quot;feeds\&quot;,\&quot;name\&quot;:\&quot;feedClientCreateTime\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67923,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;forceChatter:feed\&quot;,\&quot;duration\&quot;:66},{\&quot;ns\&quot;:\&quot;feeds\&quot;,\&quot;name\&quot;:\&quot;feedRenderTime\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67994,\&quot;context\&quot;:{},\&quot;owner\&quot;:\&quot;forceChatter:feedInner\&quot;,\&quot;duration\&quot;:43},{\&quot;ns\&quot;:\&quot;force:recordLayoutTemplate\&quot;,\&quot;name\&quot;:\&quot;layoutItems\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66662,\&quot;context\&quot;:{\&quot;itemCount\&quot;:1}},{\&quot;ns\&quot;:\&quot;force:recordLayoutTemplate\&quot;,\&quot;name\&quot;:\&quot;storageSize\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66662,\&quot;context\&quot;:{\&quot;storageSize\&quot;:\&quot;0.2509765625 KB\&quot;}}],\&quot;transport\&quot;:[{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66663,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:3,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:771,\&quot;startTime\&quot;:66663,\&quot;fetchStart\&quot;:66663,\&quot;requestStart\&quot;:66686,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:24,\&quot;transfer\&quot;:747,\&quot;transferSize\&quot;:112407,\&quot;encodedBodySize\&quot;:111457,\&quot;decodedBodySize\&quot;:111457,\&quot;serverTime\&quot;:36,\&quot;defs\&quot;:[\&quot;markup://runtime_sales_activities:manyWhoName\&quot;,\&quot;markup://runtime_sales_activities:manyWhoNameCompact\&quot;,\&quot;markup://runtime_sales_activities:taskCompactStencil\&quot;],\&quot;xhrDelay\&quot;:5},\&quot;duration\&quot;:776},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66598,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:14,\&quot;requestLength\&quot;:3037,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;508;a\&quot;,\&quot;562;a\&quot;,\&quot;570;a\&quot;,\&quot;573;a\&quot;,\&quot;579;a\&quot;,\&quot;584;a\&quot;,\&quot;589;a\&quot;],\&quot;requestId\&quot;:\&quot;66598000000a8c2e87\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:7630,\&quot;xhrDuration\&quot;:935,\&quot;xhrStall\&quot;:1,\&quot;startTime\&quot;:66599,\&quot;fetchStart\&quot;:66599,\&quot;requestStart\&quot;:66600,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:1,\&quot;transfer\&quot;:934,\&quot;transferSize\&quot;:9563,\&quot;serverTime\&quot;:182,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:938},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66660,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:15,\&quot;requestLength\&quot;:1087,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;597;a\&quot;],\&quot;requestId\&quot;:\&quot;666600000004b0c8d9\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:10907,\&quot;xhrDuration\&quot;:916,\&quot;xhrStall\&quot;:25,\&quot;startTime\&quot;:66660,\&quot;fetchStart\&quot;:66660,\&quot;requestStart\&quot;:66685,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:27,\&quot;transfer\&quot;:889,\&quot;transferSize\&quot;:12840,\&quot;serverTime\&quot;:130,\&quot;xhrDelay\&quot;:337},\&quot;duration\&quot;:1253},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66702,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:16,\&quot;requestLength\&quot;:1146,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;613;a\&quot;],\&quot;requestId\&quot;:\&quot;66702000000aae79e5\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:13087,\&quot;xhrDuration\&quot;:920,\&quot;xhrStall\&quot;:61,\&quot;startTime\&quot;:66702,\&quot;fetchStart\&quot;:66702,\&quot;requestStart\&quot;:66763,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:61,\&quot;transfer\&quot;:859,\&quot;transferSize\&quot;:15020,\&quot;serverTime\&quot;:129,\&quot;xhrDelay\&quot;:298},\&quot;duration\&quot;:1218}],\&quot;actions\&quot;:[{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66050,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;613;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:false,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;forceChatter:feed\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.chatter.components.aura.components.forceChatter.chatter.FeedController/ACTION$getModel\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;params\&quot;:{\&quot;type\&quot;:\&quot;BOOKMARKS\&quot;,\&quot;subjectId\&quot;:\&quot;undefined\&quot;,\&quot;firstPageSize\&quot;:4},\&quot;xhrWait\&quot;:649,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:99,\&quot;db\&quot;:45,\&quot;xhrServerTime\&quot;:125,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:69,\&quot;duration\&quot;:1941}],\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://force:placeholder\&quot;,\&quot;createCount\&quot;:13,\&quot;createTimeTotal\&quot;:8},{\&quot;name\&quot;:\&quot;markup://force:emptyState\&quot;,\&quot;createCount\&quot;:2,\&quot;createTimeTotal\&quot;:1},{\&quot;name\&quot;:\&quot;markup://analytics:embeddedReportChart\&quot;,\&quot;createCount\&quot;:4,\&quot;createTimeTotal\&quot;:167},{\&quot;name\&quot;:\&quot;markup://wits:newsTeaserCard\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:26},{\&quot;name\&quot;:\&quot;markup://force:listTemplate\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:7},{\&quot;name\&quot;:\&quot;markup://flexipage:card\&quot;,\&quot;createCount\&quot;:2,\&quot;createTimeTotal\&quot;:148},{\&quot;name\&quot;:\&quot;markup://forceChatter:style\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:64}],\&quot;force_record\&quot;:[{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;bulkRecordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67702,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecordCollection\&quot;,\&quot;parentCmpName\&quot;:\&quot;auraIf\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;97:584;a\&quot;,\&quot;bulkGetHitCount\&quot;:0,\&quot;bulkGetMissCount\&quot;:0,\&quot;totalRecordsRequested\&quot;:0}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;bulkRecordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67778,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecordCollection\&quot;,\&quot;parentCmpName\&quot;:\&quot;auraIf\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;97:589;a\&quot;,\&quot;bulkGetHitCount\&quot;:0,\&quot;bulkGetMissCount\&quot;:0,\&quot;totalRecordsRequested\&quot;:0}}]},\&quot;owner\&quot;:\&quot;forceChatter:feed\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-feed:centerStage\&quot;,\&quot;attributes\&quot;:{\&quot;context\&quot;:{\&quot;foregroundPanel\&quot;:true,\&quot;feedType\&quot;:\&quot;BOOKMARKS\&quot;,\&quot;subjectId\&quot;:\&quot;undefined\&quot;,\&quot;action\&quot;:\&quot;PageView\&quot;,\&quot;target\&quot;:\&quot;forceChatter:feed:init\&quot;,\&quot;type\&quot;:\&quot;Normal\&quot;,\&quot;gusTeamId\&quot;:\&quot;a00B0000002pDJa\&quot;,\&quot;hardwareConcurrency\&quot;:4},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:newDefs\&quot;,\&quot;ts\&quot;:68830,\&quot;duration\&quot;:0,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;one:one\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;newDefs\&quot;,\&quot;attributes\&quot;:{\&quot;componentDefs\&quot;:[\&quot;layout://rl-TR1__Closing_Report__c-VIEW-LIST--TR1__Assignments_Ending_in_30_Days--force_filterList-_1-0-6c486564426970424d62636352426853314f4b5944413d3d.c\&quot;,\&quot;layout://rl-TR1__Closing_Report__c-VIEW-LIST--TR1__My_Active_Assignments--force_filterList-_1-0-444c5970374e2b366758534c353563386742742f77413d3d.c\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:69529,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;force:recordCollection\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;reads\&quot;,\&quot;attributes\&quot;:{\&quot;recordIds\&quot;:[],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:9,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;reads\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:69538,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;force:recordCollection\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;reads\&quot;,\&quot;attributes\&quot;:{\&quot;recordIds\&quot;:[\&quot;a091N00000bMS2wQAG\&quot;,\&quot;a091N00000bMS2xQAG\&quot;,\&quot;a091N00000bMS2yQAG\&quot;,\&quot;a091N00000bMS2zQAG\&quot;,\&quot;a091N00000bMS30QAG\&quot;,\&quot;a091N00000bMS31QAG\&quot;,\&quot;a091N00000bMS32QAG\&quot;,\&quot;a091N00000bMS33QAG\&quot;,\&quot;a091N00000bMS34QAG\&quot;,\&quot;a091N00000bMS35QAG\&quot;],\&quot;recordType\&quot;:\&quot;TR1__Closing_Report__c\&quot;,\&quot;recordTypeSetInClient\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:10,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;reads\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:69554,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;force:recordCollection\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;reads\&quot;,\&quot;attributes\&quot;:{\&quot;recordIds\&quot;:[],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:11,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;reads\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:69568,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;force:recordCollection\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;crud\&quot;,\&quot;eventSource\&quot;:\&quot;reads\&quot;,\&quot;attributes\&quot;:{\&quot;recordIds\&quot;:[\&quot;a091N00000gAidrQAC\&quot;,\&quot;a091N00000gAjE0QAK\&quot;,\&quot;a091N00000gAjE1QAK\&quot;,\&quot;a091N00000gAjDKQA0\&quot;,\&quot;a091N00000gAjE2QAK\&quot;,\&quot;a091N00000gAiCXQA0\&quot;,\&quot;a091N00000gAjE3QAK\&quot;,\&quot;a091N00000gAc9xQAC\&quot;,\&quot;a091N00000gAidsQAC\&quot;,\&quot;a091N00000i9SlyQAE\&quot;],\&quot;recordType\&quot;:\&quot;TR1__Closing_Report__c\&quot;,\&quot;recordTypeSetInClient\&quot;:true,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:12,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;reads\&quot;,\&quot;scope\&quot;:\&quot;force_record\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPageView&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:pageView\&quot;,\&quot;ts\&quot;:55605,\&quot;duration\&quot;:14472,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56740,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:56742,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (116)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:57041,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (117)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:57043,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (118)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:57044,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (119)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:57045,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (120)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:57049,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (126)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:58908,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (127)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:58908,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (128)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:58909,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (129)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:58910,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (130)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:58911,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (131)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:58911,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (132)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:58913,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (133)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:58914,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (138)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66038,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (139)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66039,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (142)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66603,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (143)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:66705,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (144)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67863,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (145)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67875,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (148)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:68007,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:8},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (149)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:68015,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:5},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (150)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:68021,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (156)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69811,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (157)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69813,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (158)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69815,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (159)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69817,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (160)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69820,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (161)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69821,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (162)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69823,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (163)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69824,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (164)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69826,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (165)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69828,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (176)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69959,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (177)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69981,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (178)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69985,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (179)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69987,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (180)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69990,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (181)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69993,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (182)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69994,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (183)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69997,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (184)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69999,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (185)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:70002,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0}],\&quot;transport\&quot;:[{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55610,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:3,\&quot;requestLength\&quot;:1301,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;229;a\&quot;,\&quot;230;a\&quot;],\&quot;requestId\&quot;:\&quot;55610000000924ee0a\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:8661,\&quot;xhrDuration\&quot;:1056,\&quot;xhrStall\&quot;:286,\&quot;startTime\&quot;:55610,\&quot;fetchStart\&quot;:55610,\&quot;requestStart\&quot;:55896,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:289,\&quot;transfer\&quot;:767,\&quot;transferSize\&quot;:10593,\&quot;serverTime\&quot;:81,\&quot;xhrDelay\&quot;:0},\&quot;duration\&quot;:1056},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:56147,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:0,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:850,\&quot;startTime\&quot;:56147,\&quot;fetchStart\&quot;:56147,\&quot;requestStart\&quot;:56180,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:34,\&quot;transfer\&quot;:816,\&quot;transferSize\&quot;:161108,\&quot;encodedBodySize\&quot;:160156,\&quot;decodedBodySize\&quot;:160156,\&quot;serverTime\&quot;:113,\&quot;defs\&quot;:[\&quot;markup://flexipage:componentDecorator\&quot;,\&quot;markup://force:filterDataProvider\&quot;,\&quot;markup://force:listSortOrderChangeAppLevel\&quot;,\&quot;markup://force:listViewStatusInfo\&quot;,\&quot;markup://force:mruDataProvider\&quot;,\&quot;markup://force:notesBaseListViewNonGrid\&quot;,\&quot;markup://force:notesObjectHomeListLibrary\&quot;,\&quot;markup://force:notesObjectHomeListViewIdChange\&quot;,\&quot;markup://force:notesObjectHomeListViewStatusChange\&quot;],\&quot;xhrDelay\&quot;:80},\&quot;duration\&quot;:930},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:56725,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:5,\&quot;requestLength\&quot;:814,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;286;a\&quot;],\&quot;requestId\&quot;:\&quot;567250000008c04ddd\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:7060,\&quot;xhrDuration\&quot;:740,\&quot;xhrStall\&quot;:20,\&quot;startTime\&quot;:56725,\&quot;fetchStart\&quot;:56725,\&quot;requestStart\&quot;:56745,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:21,\&quot;transfer\&quot;:719,\&quot;transferSize\&quot;:8992,\&quot;serverTime\&quot;:31,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:742},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:57056,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:6,\&quot;requestLength\&quot;:923,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;390;a\&quot;],\&quot;requestId\&quot;:\&quot;570560000005eeeb5d\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:7149,\&quot;xhrDuration\&quot;:715,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:57056,\&quot;fetchStart\&quot;:57056,\&quot;requestStart\&quot;:57058,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:3,\&quot;transfer\&quot;:712,\&quot;transferSize\&quot;:9081,\&quot;serverTime\&quot;:28,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:717},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:57122,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:1,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:1731,\&quot;startTime\&quot;:57123,\&quot;fetchStart\&quot;:58164,\&quot;requestStart\&quot;:58165,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:1040,\&quot;ttfb\&quot;:1042,\&quot;transfer\&quot;:689,\&quot;transferSize\&quot;:2930,\&quot;encodedBodySize\&quot;:1982,\&quot;decodedBodySize\&quot;:1982,\&quot;serverTime\&quot;:23,\&quot;defs\&quot;:[\&quot;markup://one:utilityBarContent\&quot;],\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:1733},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:56705,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:4,\&quot;requestLength\&quot;:871,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;269;a\&quot;],\&quot;requestId\&quot;:\&quot;56705000000a77506a\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:57861,\&quot;xhrDuration\&quot;:2164,\&quot;xhrStall\&quot;:1,\&quot;startTime\&quot;:56706,\&quot;fetchStart\&quot;:56706,\&quot;requestStart\&quot;:56707,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:2,\&quot;transfer\&quot;:2162,\&quot;transferSize\&quot;:59794,\&quot;serverTime\&quot;:130,\&quot;xhrDelay\&quot;:57},\&quot;duration\&quot;:2221},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:61923,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:7,\&quot;requestLength\&quot;:1153,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;395;a\&quot;,\&quot;471;a\&quot;],\&quot;requestId\&quot;:\&quot;6192400000083cfc8c\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6854,\&quot;xhrDuration\&quot;:906,\&quot;xhrStall\&quot;:1,\&quot;startTime\&quot;:61924,\&quot;fetchStart\&quot;:61924,\&quot;requestStart\&quot;:61925,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:2,\&quot;transfer\&quot;:904,\&quot;transferSize\&quot;:8786,\&quot;serverTime\&quot;:96,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:909},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:58932,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:2,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:6823,\&quot;startTime\&quot;:58932,\&quot;fetchStart\&quot;:58932,\&quot;requestStart\&quot;:58934,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:2,\&quot;transfer\&quot;:6821,\&quot;transferSize\&quot;:582472,\&quot;encodedBodySize\&quot;:581551,\&quot;decodedBodySize\&quot;:581551,\&quot;defs\&quot;:[\&quot;markup://calendar:refresh\&quot;,\&quot;markup://force:calendarDateLibrary\&quot;,\&quot;markup://force:calendarLibrary\&quot;,\&quot;markup://force:calendarStoreCreate\&quot;,\&quot;markup://force:calendarStoreUpdate\&quot;,\&quot;markup://force:changeCalendarType\&quot;,\&quot;markup://force:emptyState\&quot;,\&quot;markup://force:menuTriggerIcon\&quot;,\&quot;markup://forceChatter:delegateFeedUtilityService\&quot;],\&quot;xhrDelay\&quot;:13},\&quot;duration\&quot;:6836},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65822,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:8,\&quot;requestLength\&quot;:897,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;486;a\&quot;],\&quot;requestId\&quot;:\&quot;65822000000729497f\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6816,\&quot;xhrDuration\&quot;:754,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:65823,\&quot;fetchStart\&quot;:65823,\&quot;requestStart\&quot;:65825,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:3,\&quot;transfer\&quot;:751,\&quot;transferSize\&quot;:8748,\&quot;serverTime\&quot;:62,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:756},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65831,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:9,\&quot;requestLength\&quot;:1067,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;489;a\&quot;],\&quot;requestId\&quot;:\&quot;65831000000ffec684\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:29876,\&quot;xhrDuration\&quot;:811,\&quot;xhrStall\&quot;:33,\&quot;startTime\&quot;:65832,\&quot;fetchStart\&quot;:65832,\&quot;requestStart\&quot;:65865,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:33,\&quot;transfer\&quot;:778,\&quot;transferSize\&quot;:31808,\&quot;serverTime\&quot;:69,\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:815},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65889,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:10,\&quot;requestLength\&quot;:1009,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;521;a\&quot;],\&quot;requestId\&quot;:\&quot;6588900000013030b5\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:16874,\&quot;xhrDuration\&quot;:753,\&quot;xhrStall\&quot;:12,\&quot;startTime\&quot;:65890,\&quot;fetchStart\&quot;:65890,\&quot;requestStart\&quot;:65902,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:19,\&quot;transfer\&quot;:734,\&quot;transferSize\&quot;:18806,\&quot;serverTime\&quot;:44,\&quot;xhrDelay\&quot;:9},\&quot;duration\&quot;:762},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65921,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:11,\&quot;requestLength\&quot;:852,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;528;a\&quot;],\&quot;requestId\&quot;:\&quot;659210000008b83520\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6819,\&quot;xhrDuration\&quot;:762,\&quot;xhrStall\&quot;:28,\&quot;startTime\&quot;:65922,\&quot;fetchStart\&quot;:65922,\&quot;requestStart\&quot;:65950,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:28,\&quot;transfer\&quot;:734,\&quot;transferSize\&quot;:8751,\&quot;serverTime\&quot;:52,\&quot;xhrDelay\&quot;:5},\&quot;duration\&quot;:767},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65946,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:13,\&quot;requestLength\&quot;:852,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;554;a\&quot;],\&quot;requestId\&quot;:\&quot;65946000000f087630\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6828,\&quot;xhrDuration\&quot;:815,\&quot;xhrStall\&quot;:4,\&quot;startTime\&quot;:65946,\&quot;fetchStart\&quot;:65946,\&quot;requestStart\&quot;:65950,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:1,\&quot;ttfb\&quot;:76,\&quot;transfer\&quot;:739,\&quot;transferSize\&quot;:8760,\&quot;serverTime\&quot;:34,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:817},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65936,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:12,\&quot;requestLength\&quot;:823,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;546;a\&quot;],\&quot;requestId\&quot;:\&quot;6593600000031c5b50\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:8174,\&quot;xhrDuration\&quot;:825,\&quot;xhrStall\&quot;:13,\&quot;startTime\&quot;:65937,\&quot;fetchStart\&quot;:65937,\&quot;requestStart\&quot;:65950,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:13,\&quot;transfer\&quot;:812,\&quot;transferSize\&quot;:10106,\&quot;serverTime\&quot;:61,\&quot;xhrDelay\&quot;:82},\&quot;duration\&quot;:907},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66663,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:3,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:771,\&quot;startTime\&quot;:66663,\&quot;fetchStart\&quot;:66663,\&quot;requestStart\&quot;:66686,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:24,\&quot;transfer\&quot;:747,\&quot;transferSize\&quot;:112407,\&quot;encodedBodySize\&quot;:111457,\&quot;decodedBodySize\&quot;:111457,\&quot;serverTime\&quot;:36,\&quot;defs\&quot;:[\&quot;markup://runtime_sales_activities:manyWhoName\&quot;,\&quot;markup://runtime_sales_activities:manyWhoNameCompact\&quot;,\&quot;markup://runtime_sales_activities:taskCompactStencil\&quot;],\&quot;xhrDelay\&quot;:5},\&quot;duration\&quot;:776},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66598,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:14,\&quot;requestLength\&quot;:3037,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;508;a\&quot;,\&quot;562;a\&quot;,\&quot;570;a\&quot;,\&quot;573;a\&quot;,\&quot;579;a\&quot;,\&quot;584;a\&quot;,\&quot;589;a\&quot;],\&quot;requestId\&quot;:\&quot;66598000000a8c2e87\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:7630,\&quot;xhrDuration\&quot;:935,\&quot;xhrStall\&quot;:1,\&quot;startTime\&quot;:66599,\&quot;fetchStart\&quot;:66599,\&quot;requestStart\&quot;:66600,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:1,\&quot;transfer\&quot;:934,\&quot;transferSize\&quot;:9563,\&quot;serverTime\&quot;:182,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:938},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66660,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:15,\&quot;requestLength\&quot;:1087,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;597;a\&quot;],\&quot;requestId\&quot;:\&quot;666600000004b0c8d9\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:10907,\&quot;xhrDuration\&quot;:916,\&quot;xhrStall\&quot;:25,\&quot;startTime\&quot;:66660,\&quot;fetchStart\&quot;:66660,\&quot;requestStart\&quot;:66685,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:27,\&quot;transfer\&quot;:889,\&quot;transferSize\&quot;:12840,\&quot;serverTime\&quot;:130,\&quot;xhrDelay\&quot;:337},\&quot;duration\&quot;:1253},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66702,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:16,\&quot;requestLength\&quot;:1146,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;613;a\&quot;],\&quot;requestId\&quot;:\&quot;66702000000aae79e5\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:13087,\&quot;xhrDuration\&quot;:920,\&quot;xhrStall\&quot;:61,\&quot;startTime\&quot;:66702,\&quot;fetchStart\&quot;:66702,\&quot;requestStart\&quot;:66763,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:61,\&quot;transfer\&quot;:859,\&quot;transferSize\&quot;:15020,\&quot;serverTime\&quot;:129,\&quot;xhrDelay\&quot;:298},\&quot;duration\&quot;:1218},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66893,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:18,\&quot;requestLength\&quot;:942,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;691;a\&quot;],\&quot;requestId\&quot;:\&quot;668930000004a93b80\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6766,\&quot;xhrDuration\&quot;:1331,\&quot;xhrStall\&quot;:540,\&quot;startTime\&quot;:66894,\&quot;fetchStart\&quot;:66894,\&quot;requestStart\&quot;:67434,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:542,\&quot;transfer\&quot;:789,\&quot;transferSize\&quot;:8698,\&quot;serverTime\&quot;:45,\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:1335},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66837,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:17,\&quot;requestLength\&quot;:1191,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;690;a\&quot;],\&quot;requestId\&quot;:\&quot;66837000000407f092\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:10279,\&quot;xhrDuration\&quot;:1470,\&quot;xhrStall\&quot;:493,\&quot;startTime\&quot;:66838,\&quot;fetchStart\&quot;:66838,\&quot;requestStart\&quot;:67331,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:494,\&quot;transfer\&quot;:976,\&quot;transferSize\&quot;:12212,\&quot;serverTime\&quot;:215,\&quot;xhrDelay\&quot;:1},\&quot;duration\&quot;:1471},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67816,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:19,\&quot;requestLength\&quot;:2997,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;889;a\&quot;,\&quot;895;a\&quot;,\&quot;899;a\&quot;,\&quot;948;a\&quot;,\&quot;954;a\&quot;],\&quot;requestId\&quot;:\&quot;67816000000abbcdb9\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:83066,\&quot;xhrDuration\&quot;:974,\&quot;xhrStall\&quot;:1,\&quot;startTime\&quot;:67817,\&quot;fetchStart\&quot;:67817,\&quot;requestStart\&quot;:67818,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:1,\&quot;transfer\&quot;:973,\&quot;transferSize\&quot;:84999,\&quot;serverTime\&quot;:284,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:976},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:68052,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:4,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:956,\&quot;startTime\&quot;:68052,\&quot;fetchStart\&quot;:68052,\&quot;requestStart\&quot;:68226,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:211,\&quot;transfer\&quot;:745,\&quot;transferSize\&quot;:82011,\&quot;encodedBodySize\&quot;:81095,\&quot;decodedBodySize\&quot;:81095,\&quot;serverTime\&quot;:45,\&quot;defs\&quot;:[\&quot;markup://TR1:DocumentParser\&quot;,\&quot;markup://lightning:badge\&quot;,\&quot;markup://lightning:card\&quot;,\&quot;markup://lightning:fileUpload\&quot;,\&quot;markup://lightning:progressBar\&quot;,\&quot;markup://lightning:progressIndicator\&quot;,\&quot;markup://lightning:progressStep\&quot;,\&quot;markup://lightning:radioGroup\&quot;,\&quot;markup://lightning:textarea\&quot;],\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:960},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67885,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:20,\&quot;requestLength\&quot;:2429,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;972;a\&quot;,\&quot;973;a\&quot;,\&quot;974;a\&quot;],\&quot;requestId\&quot;:\&quot;6788500000003898e8\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:18650,\&quot;xhrDuration\&quot;:1408,\&quot;xhrStall\&quot;:298,\&quot;startTime\&quot;:67885,\&quot;fetchStart\&quot;:67885,\&quot;requestStart\&quot;:68183,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:298,\&quot;transfer\&quot;:1110,\&quot;transferSize\&quot;:20583,\&quot;serverTime\&quot;:413,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:1410},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:68835,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:5,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:686,\&quot;startTime\&quot;:68835,\&quot;fetchStart\&quot;:68835,\&quot;requestStart\&quot;:68837,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:0,\&quot;ttfb\&quot;:2,\&quot;transfer\&quot;:684,\&quot;transferSize\&quot;:11052,\&quot;encodedBodySize\&quot;:10103,\&quot;decodedBodySize\&quot;:10103,\&quot;serverTime\&quot;:23,\&quot;defs\&quot;:[\&quot;markup://force:listRecord\&quot;],\&quot;xhrDelay\&quot;:1},\&quot;duration\&quot;:687}],\&quot;actions\&quot;:[{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55606,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;229;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getTabByNameAndApp\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:37,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:77,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1068},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:55609,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;230;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:recordGlobalValueProvider\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$getRecord\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:14,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:77,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1065},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:56721,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;286;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;home:landing\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.home.impl.landing.LandingController/ACTION$populateTodayGVP\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:4,\&quot;serverTime\&quot;:{\&quot;total\&quot;:6,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:28,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:751},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:57056,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;390;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:socialPhotoController\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.socialPhoto.SocialPhotoController/ACTION$resolvePhotos\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:25,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:4,\&quot;duration\&quot;:723},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:56705,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;269;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;flexipage:page\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.flexipage.components.page.FlexipageControllerV2/ACTION$getPage\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;params\&quot;:{\&quot;flexiPageDeveloperName\&quot;:\&quot;Home_Page_Default\&quot;},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:60,\&quot;db\&quot;:17,\&quot;xhrServerTime\&quot;:124,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:2225},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:57086,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;395;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ComponentController/ACTION$reportDeprecationUsages\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:4811,\&quot;enqueueWait\&quot;:26,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:93,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:5750},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:61923,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;471;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;one:systemMessage\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.global.components.one.systemMessage.SystemMessageController/ACTION$getSystemMessages\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:1,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:93,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:6,\&quot;duration\&quot;:920},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65822,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;486;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;runtime_sales_activities:todayTasksCardDataProvider\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.today.impl.components.today.taskContainer.TodayTasksCardDataManagerController/ACTION$getTasks\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;params\&quot;:{\&quot;limit\&quot;:5},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:31,\&quot;db\&quot;:6,\&quot;xhrServerTime\&quot;:59,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:18,\&quot;duration\&quot;:775},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65831,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;489;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ComponentController/ACTION$getComponent\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;params\&quot;:{\&quot;name\&quot;:\&quot;markup://force:listTemplate\&quot;},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:18,\&quot;db\&quot;:1,\&quot;xhrServerTime\&quot;:65,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:819},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65889,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;521;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:recordLayoutTemplate\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.recordLayoutBroker.RecordLayoutBrokerController/ACTION$getLayout\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:13,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:40,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:5,\&quot;duration\&quot;:770},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65921,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;528;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;home:eventCardDataManager\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.calendar.impl.controllers.SFDCCalendarDataProviderController/ACTION$getTodayEvents\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:23,\&quot;db\&quot;:4,\&quot;xhrServerTime\&quot;:48,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:10,\&quot;duration\&quot;:780},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65946,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;554;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;flexipage:reportChart\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.flexipage.components.reportchart.ReportChartController/ACTION$getReportInfo\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:6,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:30,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:67,\&quot;duration\&quot;:885},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65936,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;546;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.wits.impl.components.news.NewsPanelController/ACTION$getNewsMetaData\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:33,\&quot;db\&quot;:4,\&quot;xhrServerTime\&quot;:57,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:4,\&quot;duration\&quot;:914},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65851,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;508;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ComponentController/ACTION$reportDeprecationUsages\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:593,\&quot;enqueueWait\&quot;:154,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:178,\&quot;boxCarCount\&quot;:7},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1688},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65952,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;562;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;flexipage:reportChart\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.flexipage.components.reportchart.ReportChartController/ACTION$getReportInfo\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:593,\&quot;enqueueWait\&quot;:53,\&quot;serverTime\&quot;:{\&quot;total\&quot;:9,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:178,\&quot;boxCarCount\&quot;:7},\&quot;callbackTime\&quot;:64,\&quot;duration\&quot;:1651},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65958,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;570;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;flexipage:reportChart\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.flexipage.components.reportchart.ReportChartController/ACTION$getReportInfo\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:593,\&quot;enqueueWait\&quot;:47,\&quot;serverTime\&quot;:{\&quot;total\&quot;:7,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:178,\&quot;boxCarCount\&quot;:7},\&quot;callbackTime\&quot;:34,\&quot;duration\&quot;:1679},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65959,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;573;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ComponentController/ACTION$reportDeprecationUsages\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:593,\&quot;enqueueWait\&quot;:46,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:178,\&quot;boxCarCount\&quot;:7},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1678},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65962,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;579;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;flexipage:reportChart\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.flexipage.components.reportchart.ReportChartController/ACTION$getReportInfo\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:593,\&quot;enqueueWait\&quot;:43,\&quot;serverTime\&quot;:{\&quot;total\&quot;:7,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:178,\&quot;boxCarCount\&quot;:7},\&quot;callbackTime\&quot;:28,\&quot;duration\&quot;:1703},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65968,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;584;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;flexipage:filterListCard\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.flexipage.components.filterlistcard.FilterListCardController/ACTION$getFilterLabel\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:593,\&quot;enqueueWait\&quot;:37,\&quot;serverTime\&quot;:{\&quot;total\&quot;:97,\&quot;db\&quot;:12,\&quot;xhrServerTime\&quot;:178,\&quot;boxCarCount\&quot;:7},\&quot;callbackTime\&quot;:84,\&quot;duration\&quot;:1781},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65972,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;589;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;flexipage:filterListCard\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.flexipage.components.filterlistcard.FilterListCardController/ACTION$getFilterLabel\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:593,\&quot;enqueueWait\&quot;:33,\&quot;serverTime\&quot;:{\&quot;total\&quot;:22,\&quot;db\&quot;:6,\&quot;xhrServerTime\&quot;:178,\&quot;boxCarCount\&quot;:7},\&quot;callbackTime\&quot;:65,\&quot;duration\&quot;:1842},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:65981,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;597;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;one:actionsManager\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.global.components.one.actionsManager.ActionsManagerController/ACTION$handleAction\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:655,\&quot;enqueueWait\&quot;:24,\&quot;serverTime\&quot;:{\&quot;total\&quot;:97,\&quot;db\&quot;:39,\&quot;xhrServerTime\&quot;:125,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:2,\&quot;duration\&quot;:1937},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66050,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;613;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:false,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;forceChatter:feed\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.chatter.components.aura.components.forceChatter.chatter.FeedController/ACTION$getModel\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;params\&quot;:{\&quot;type\&quot;:\&quot;BOOKMARKS\&quot;,\&quot;subjectId\&quot;:\&quot;undefined\&quot;,\&quot;firstPageSize\&quot;:4},\&quot;xhrWait\&quot;:649,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:99,\&quot;db\&quot;:45,\&quot;xhrServerTime\&quot;:125,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:69,\&quot;duration\&quot;:1941},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66866,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;691;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;wits:newsPanel\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.wits.impl.components.news.NewsPanelController/ACTION$notifyError\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:27,\&quot;serverTime\&quot;:{\&quot;total\&quot;:7,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:39,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1365},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:66835,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;690;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;analytics:embeddedReportChart\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.analytics.platform.embeddedChart.EmbeddedReportChartController/ACTION$loadChart\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:130,\&quot;db\&quot;:38,\&quot;xhrServerTime\&quot;:211,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:9,\&quot;duration\&quot;:1486},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67722,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;889;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:recordLayoutTemplate\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.recordLayoutBroker.RecordLayoutBrokerController/ACTION$getLayout\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:92,\&quot;serverTime\&quot;:{\&quot;total\&quot;:93,\&quot;db\&quot;:8,\&quot;xhrServerTime\&quot;:273,\&quot;boxCarCount\&quot;:5},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1108},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67733,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;895;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:listViewDataManager\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.lists.listViewDataManager.ListViewDataManagerController/ACTION$getItems\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:83,\&quot;serverTime\&quot;:{\&quot;total\&quot;:55,\&quot;db\&quot;:40,\&quot;xhrServerTime\&quot;:273,\&quot;boxCarCount\&quot;:5},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1098},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67738,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;899;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:filterList\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.lists.filterList.FilterListController/ACTION$getFilterListConfig\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:78,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:273,\&quot;boxCarCount\&quot;:5},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1093},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67808,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;958;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:filterList\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.lists.filterList.FilterListController/ACTION$getFilterListConfig\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:8,\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1023},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67801,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;948;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:recordLayoutTemplate\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.recordLayoutBroker.RecordLayoutBrokerController/ACTION$getLayout\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:14,\&quot;serverTime\&quot;:{\&quot;total\&quot;:25,\&quot;db\&quot;:7,\&quot;xhrServerTime\&quot;:273,\&quot;boxCarCount\&quot;:5},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1030},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67806,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;954;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:listViewDataManager\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.lists.listViewDataManager.ListViewDataManagerController/ACTION$getItems\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:10,\&quot;serverTime\&quot;:{\&quot;total\&quot;:31,\&quot;db\&quot;:16,\&quot;xhrServerTime\&quot;:273,\&quot;boxCarCount\&quot;:5},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1025},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67857,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;972;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;analytics:embeddedReportChart\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.analytics.platform.embeddedChart.EmbeddedReportChartController/ACTION$loadChart\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:28,\&quot;serverTime\&quot;:{\&quot;total\&quot;:118,\&quot;db\&quot;:30,\&quot;xhrServerTime\&quot;:408,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:9,\&quot;duration\&quot;:1451},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67858,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;973;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;analytics:embeddedReportChart\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.analytics.platform.embeddedChart.EmbeddedReportChartController/ACTION$loadChart\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:27,\&quot;serverTime\&quot;:{\&quot;total\&quot;:119,\&quot;db\&quot;:28,\&quot;xhrServerTime\&quot;:408,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:5,\&quot;duration\&quot;:1455},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:67859,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;974;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;analytics:embeddedReportChart\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.analytics.platform.embeddedChart.EmbeddedReportChartController/ACTION$loadChart\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:26,\&quot;serverTime\&quot;:{\&quot;total\&quot;:142,\&quot;db\&quot;:21,\&quot;xhrServerTime\&quot;:408,\&quot;boxCarCount\&quot;:3},\&quot;callbackTime\&quot;:6,\&quot;duration\&quot;:1460}],\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://force:recordGlobalValueProvider\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:0},{\&quot;name\&quot;:\&quot;markup://laf:pageHost\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:10},{\&quot;name\&quot;:\&quot;markup://home:landing\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:26},{\&quot;name\&quot;:\&quot;markup://force:headerButton\&quot;,\&quot;createCount\&quot;:4,\&quot;createTimeTotal\&quot;:25},{\&quot;name\&quot;:\&quot;markup://ui:menu\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:20},{\&quot;name\&quot;:\&quot;markup://uns:notificationsCounter\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:10},{\&quot;name\&quot;:\&quot;markup://force:socialPhotoController\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:1},{\&quot;name\&quot;:\&quot;markup://one:fp0M01N000000QV8cSAG__pageWithoutSobject__1516162029000\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:33},{\&quot;name\&quot;:\&quot;one:utilityBarItem\&quot;,\&quot;createCount\&quot;:4,\&quot;createTimeTotal\&quot;:8},{\&quot;name\&quot;:\&quot;markup://force:dockingPanelOverflow\&quot;,\&quot;createCount\&quot;:2,\&quot;createTimeTotal\&quot;:2},{\&quot;name\&quot;:\&quot;markup://force:entityIcon\&quot;,\&quot;createCount\&quot;:3,\&quot;createTimeTotal\&quot;:5},{\&quot;name\&quot;:\&quot;markup://one:utilityBarContent\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:64},{\&quot;name\&quot;:\&quot;markup://home:fp0M01N000000QV8dSAG__pageWithoutSobject__1516162029000\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:226},{\&quot;name\&quot;:\&quot;runtime_sales_activities:todayTaskContainer\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:64},{\&quot;name\&quot;:\&quot;home:eventContainer\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:78},{\&quot;name\&quot;:\&quot;home:newsPanel\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:7},{\&quot;name\&quot;:\&quot;flexipage:reportChart\&quot;,\&quot;createCount\&quot;:4,\&quot;createTimeTotal\&quot;:19},{\&quot;name\&quot;:\&quot;flexipage:filterListCard\&quot;,\&quot;createCount\&quot;:2,\&quot;createTimeTotal\&quot;:5},{\&quot;name\&quot;:\&quot;forceChatter:publisher\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:8},{\&quot;name\&quot;:\&quot;forceChatter:exposedFeed\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:19},{\&quot;name\&quot;:\&quot;markup://force:placeholder\&quot;,\&quot;createCount\&quot;:13,\&quot;createTimeTotal\&quot;:8},{\&quot;name\&quot;:\&quot;markup://force:emptyState\&quot;,\&quot;createCount\&quot;:2,\&quot;createTimeTotal\&quot;:1},{\&quot;name\&quot;:\&quot;markup://analytics:embeddedReportChart\&quot;,\&quot;createCount\&quot;:4,\&quot;createTimeTotal\&quot;:167},{\&quot;name\&quot;:\&quot;markup://wits:newsTeaserCard\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:26},{\&quot;name\&quot;:\&quot;markup://force:listTemplate\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:7},{\&quot;name\&quot;:\&quot;markup://flexipage:card\&quot;,\&quot;createCount\&quot;:2,\&quot;createTimeTotal\&quot;:148},{\&quot;name\&quot;:\&quot;markup://forceChatter:style\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:64},{\&quot;name\&quot;:\&quot;markup://ui:button\&quot;,\&quot;createCount\&quot;:4,\&quot;createTimeTotal\&quot;:11},{\&quot;name\&quot;:\&quot;markup://one:actionsComposer\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:27},{\&quot;name\&quot;:\&quot;markup://ui:tabItem\&quot;,\&quot;createCount\&quot;:2,\&quot;createTimeTotal\&quot;:4},{\&quot;name\&quot;:\&quot;markup://force:publisherQuickActionCollapser\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:7},{\&quot;name\&quot;:\&quot;markup://force:recordLayout\&quot;,\&quot;createCount\&quot;:20,\&quot;createTimeTotal\&quot;:197}],\&quot;force_record\&quot;:[{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;cacheLookup.55607\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordKey\&quot;:\&quot;$Record.0051N000005pgpoQAA.undefined.null.null.null.Name,Id.VIEW.false.null.null.null\&quot;,\&quot;keyPrefix\&quot;:\&quot;005\&quot;,\&quot;cacheHit\&quot;:false},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;recordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecord\&quot;,\&quot;parentCmpName\&quot;:\&quot;oneUserProfileCardTrigger\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;335:0;p\&quot;,\&quot;recordId\&quot;:\&quot;0051N000005pgpoQAA\&quot;,\&quot;requestConfig\&quot;:\&quot;0051N000005pgpoQAA, layoutType=undefined, layoutOverride=undefined, parentId=undefined, fields=Name,Id, optionalFields=null, mode=VIEW, updateMru=false, noServer=false\&quot;,\&quot;hitMissType\&quot;:\&quot;MISS\&quot;,\&quot;recordAgeMs\&quot;:null}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;loadRecordFromServer.55607\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:55607,\&quot;context\&quot;:{\&quot;recordKey\&quot;:\&quot;$Record.0051N000005pgpoQAA.undefined.null.null.null.Name,Id.VIEW.false.null.null.null\&quot;,\&quot;error\&quot;:false},\&quot;duration\&quot;:1064},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;bulkRecordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:65861,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecordCollection\&quot;,\&quot;parentCmpName\&quot;:\&quot;auraIf\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;519:0\&quot;,\&quot;bulkGetHitCount\&quot;:0,\&quot;bulkGetMissCount\&quot;:0,\&quot;totalRecordsRequested\&quot;:0,\&quot;layoutType\&quot;:\&quot;COMPACT\&quot;}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;bulkRecordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67702,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecordCollection\&quot;,\&quot;parentCmpName\&quot;:\&quot;auraIf\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;97:584;a\&quot;,\&quot;bulkGetHitCount\&quot;:0,\&quot;bulkGetMissCount\&quot;:0,\&quot;totalRecordsRequested\&quot;:0}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;bulkRecordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:67778,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecordCollection\&quot;,\&quot;parentCmpName\&quot;:\&quot;auraIf\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;97:589;a\&quot;,\&quot;bulkGetHitCount\&quot;:0,\&quot;bulkGetMissCount\&quot;:0,\&quot;totalRecordsRequested\&quot;:0}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;bulkRecordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69529,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecordCollection\&quot;,\&quot;parentCmpName\&quot;:\&quot;auraIf\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;97:584;a\&quot;,\&quot;bulkGetHitCount\&quot;:0,\&quot;bulkGetMissCount\&quot;:0,\&quot;totalRecordsRequested\&quot;:0}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;bulkRecordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69539,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecordCollection\&quot;,\&quot;parentCmpName\&quot;:\&quot;auraIf\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;97:584;a\&quot;,\&quot;bulkGetHitCount\&quot;:10,\&quot;bulkGetMissCount\&quot;:0,\&quot;totalRecordsRequested\&quot;:10}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;bulkRecordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69554,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecordCollection\&quot;,\&quot;parentCmpName\&quot;:\&quot;auraIf\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;97:589;a\&quot;,\&quot;bulkGetHitCount\&quot;:0,\&quot;bulkGetMissCount\&quot;:0,\&quot;totalRecordsRequested\&quot;:0}},{\&quot;ns\&quot;:\&quot;force_record\&quot;,\&quot;name\&quot;:\&quot;bulkRecordRequest\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:69569,\&quot;context\&quot;:{\&quot;recordProvider\&quot;:\&quot;forceRecordCollection\&quot;,\&quot;parentCmpName\&quot;:\&quot;auraIf\&quot;,\&quot;parentCmpGlobalId\&quot;:\&quot;97:589;a\&quot;,\&quot;bulkGetHitCount\&quot;:10,\&quot;bulkGetMissCount\&quot;:0,\&quot;totalRecordsRequested\&quot;:10}}]},\&quot;owner\&quot;:\&quot;laf:pageTransactionProcessor\&quot;,\&quot;unixTS\&quot;:false,\&quot;ept\&quot;:14472,\&quot;previousPage\&quot;:{\&quot;context\&quot;:\&quot;undefined\&quot;,\&quot;attributes\&quot;:{}},\&quot;attributes\&quot;:{\&quot;cores\&quot;:4,\&quot;eptDeviation\&quot;:true,\&quot;eptDeviationReason\&quot;:\&quot;PageInBackgroundBeforeLoaded\&quot;,\&quot;backgroundTimeBeforeEPT\&quot;:836,\&quot;density\&quot;:\&quot;COMPACT\&quot;,\&quot;totalEpt\&quot;:70077,\&quot;bootstrapType\&quot;:\&quot;COLD\&quot;,\&quot;defaultCmp\&quot;:[\&quot;one:utilityBarItem\&quot;,\&quot;one:utilityBarItem\&quot;,\&quot;one:utilityBarItem\&quot;,\&quot;one:utilityBarItem\&quot;,\&quot;runtime_sales_activities:todayTaskContainer\&quot;,\&quot;home:eventContainer\&quot;,\&quot;home:newsPanel\&quot;,\&quot;flexipage:reportChart\&quot;,\&quot;flexipage:reportChart\&quot;,\&quot;flexipage:reportChart\&quot;,\&quot;flexipage:reportChart\&quot;,\&quot;flexipage:filterListCard\&quot;,\&quot;flexipage:filterListCard\&quot;,\&quot;forceChatter:publisher\&quot;,\&quot;forceChatter:exposedFeed\&quot;],\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;cacheStats\&quot;:{\&quot;AuraStorage_actions\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:11},\&quot;AuraRecordStore\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:1},\&quot;AuraStorage_tempTabs-1559032427302-836680\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:1},\&quot;AuraRecordStore_oneUserProfileCardTrigger\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:1},\&quot;AuraRecordStore_bulkRecordRequestauraIf\&quot;:{\&quot;hits\&quot;:20,\&quot;misses\&quot;:0},\&quot;AuraStorage_recordLayoutMap\&quot;:{\&quot;hits\&quot;:0,\&quot;misses\&quot;:3},\&quot;total\&quot;:{\&quot;hits\&quot;:20,\&quot;misses\&quot;:17}},\&quot;complexity\&quot;:{\&quot;ADS_records\&quot;:20,\&quot;ADS_fields\&quot;:230},\&quot;sequence\&quot;:1,\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:70080,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;system\&quot;,\&quot;eventSource\&quot;:\&quot;defsUsage\&quot;,\&quot;attributes\&quot;:{\&quot;defs\&quot;:[\&quot;markup://aura:component\&quot;,\&quot;markup://ui:virtualList\&quot;,\&quot;markup://ui:virtualDataGrid\&quot;,\&quot;markup://ui:virtualDataTable\&quot;,\&quot;markup://aura:application\&quot;,\&quot;markup://force:slds\&quot;,\&quot;markup://force:sldsDynamic\&quot;,\&quot;markup://one:one\&quot;,\&quot;markup://aura:html\&quot;,\&quot;markup://aura:text\&quot;,\&quot;markup://force:fingerprint\&quot;,\&quot;markup://force:defenseHook\&quot;,\&quot;markup://one:auraSystemErrorHandler\&quot;,\&quot;markup://one:auraCustomerErrorHandler\&quot;,\&quot;markup://force:downloadHandler\&quot;,\&quot;markup://force:hostConfig\&quot;,\&quot;markup://force:switchToNetworkHandler\&quot;,\&quot;markup://instrumentation:beacon\&quot;,\&quot;markup://laf:platformRouter\&quot;,\&quot;markup://laf:baseRouter\&quot;,\&quot;markup://laf:sObjectRouter\&quot;,\&quot;markup://force:setupRouter\&quot;,\&quot;markup://objectManager:objectManagerRouter\&quot;,\&quot;markup://force:personalSettingsPageRouter\&quot;,\&quot;markup://forceChatter:router\&quot;,\&quot;markup://laf:directCmpReferenceRouter\&quot;,\&quot;markup://laf:navigationServiceAPI\&quot;,\&quot;markup://force:style\&quot;,\&quot;markup://force:access\&quot;,\&quot;markup://laf:appLayoutHost\&quot;,\&quot;markup://force:alohaUrlService\&quot;,\&quot;markup://force:quickActionHandler\&quot;,\&quot;markup://laf:layoutContainer\&quot;,\&quot;markup://aura:expression\&quot;,\&quot;markup://aura:if\&quot;,\&quot;markup://runtime_all_walkthroughs:player\&quot;,\&quot;markup://one:onboardingManagerWrapper\&quot;,\&quot;markup://ui:image\&quot;,\&quot;markup://force:icon\&quot;,\&quot;markup://lightning:icon\&quot;,\&quot;markup://ui:datePickerManager\&quot;,\&quot;markup://force:tempDepend\&quot;,\&quot;markup://flexipage:tempDepend\&quot;,\&quot;markup://runtime_sales_activities:tempDepend\&quot;,\&quot;markup://support:outputPhoneManager\&quot;,\&quot;markup://emailStream:connectEmailWrapper\&quot;,\&quot;markup://emailStream:connectEmail\&quot;,\&quot;markup://one:sessionManager\&quot;,\&quot;markup://salesforceIdentity:sessionTimeoutWarn\&quot;,\&quot;markup://salesforceIdentity:sessionTimeoutWatcher\&quot;,\&quot;markup://voice:getVendorLine\&quot;,\&quot;markup://one:establishVFSessionComponent\&quot;,\&quot;markup://laf:standardLayoutContainer\&quot;,\&quot;markup://force:pageInfo\&quot;,\&quot;markup://laf:platformPageResolver\&quot;,\&quot;markup://force:lds\&quot;,\&quot;markup://force:dirtyStateManager\&quot;,\&quot;markup://one:layoutContainerLib\&quot;,\&quot;markup://laf:pageTransactionProcessor\&quot;,\&quot;markup://laf:navEventManager\&quot;,\&quot;markup://laf:urlProcessor\&quot;,\&quot;markup://laf:baseLayoutContainer\&quot;,\&quot;markup://forceContent:filesManager\&quot;,\&quot;markup://forceContent:modalPreviewManager\&quot;,\&quot;markup://force:quickActionManager\&quot;,\&quot;markup://one:panelService\&quot;,\&quot;markup://force:inlineSpinner\&quot;,\&quot;markup://force:loadingLaser\&quot;,\&quot;markup://one:apiHandler\&quot;,\&quot;markup://force:localRecordChangeObserver\&quot;,\&quot;markup://forceChatter:feedEventsProcessor\&quot;,\&quot;markup://forceChatter:s1FeedsProxy\&quot;,\&quot;markup://support:crossFrameApiManager\&quot;,\&quot;markup://one:actionsManager\&quot;,\&quot;markup://force:targetInteractionHandler\&quot;,\&quot;markup://forceChatter:editManager\&quot;,\&quot;markup://runtime_rtc:rtcDiscoveryBanner\&quot;,\&quot;markup://forceContent:contentHubAuthenticationBanner\&quot;,\&quot;markup://one:keyboardShortcutListener\&quot;,\&quot;markup://one:helpAndTrainingKeyboardShortcuts\&quot;,\&quot;markup://force:logoutHandler\&quot;,\&quot;markup://one:iframeMessageManager\&quot;,\&quot;markup://lightning:messageDispatcher\&quot;,\&quot;markup://force:userAssistancePlatform\&quot;,\&quot;markup://one:header\&quot;,\&quot;markup://forceSearch:desktopHeaderManager\&quot;,\&quot;markup://forceSearch:baseSearch\&quot;,\&quot;markup://forceSearch:desktopHeader\&quot;,\&quot;markup://forceSearch:groupContainer\&quot;,\&quot;markup://forceSearch:inputEntitySelector\&quot;,\&quot;markup://ui:dataProvider\&quot;,\&quot;markup://forceSearch:inputEntitySelectorDataProvider\&quot;,\&quot;markup://lightning:groupedCombobox\&quot;,\&quot;markup://forceSearch:input\&quot;,\&quot;markup://forceSearch:inputDesktop\&quot;,\&quot;markup://forceSearch:optionDataProvider\&quot;,\&quot;markup://forceSearch:inputDataProvider\&quot;,\&quot;markup://forceSearch:inputDesktopDataProvider\&quot;,\&quot;markup://forceSearch:actionDataProvider\&quot;,\&quot;markup://forceSearch:mruDataProvider\&quot;,\&quot;markup://forceSearch:typeAheadDataProvider\&quot;,\&quot;markup://ui:resizeObserver\&quot;,\&quot;markup://forceSearch:inputDesktopPillWrapper\&quot;,\&quot;markup://ui:input\&quot;,\&quot;markup://ui:autocomplete\&quot;,\&quot;markup://forceSearch:searchInputListHeader\&quot;,\&quot;markup://forceSearch:inputDesktopListFooter\&quot;,\&quot;markup://ui:inputTextForAutocomplete\&quot;,\&quot;markup://forceSearch:searchGDP\&quot;,\&quot;markup://forceSearch:searchGDPCache\&quot;,\&quot;markup://forceSearch:searchGDPCacheActivity\&quot;,\&quot;markup://forceSearch:searchGDPCacheMrus\&quot;,\&quot;markup://forceSearch:searchGDPCachePermsAndPrefs\&quot;,\&quot;markup://forceSearch:searchGDPCacheResultsFilters\&quot;,\&quot;markup://forceSearch:searchGDPCacheScopes\&quot;,\&quot;markup://one:appNavContainer\&quot;,\&quot;markup://force:skipLink\&quot;,\&quot;markup://force:onboardingManagerLib\&quot;,\&quot;markup://salesforceIdentity:appLauncherManager\&quot;,\&quot;markup://one:systemMessage\&quot;,\&quot;markup://aura:iteration\&quot;,\&quot;markup://one:ept\&quot;,\&quot;markup://ui:stamp\&quot;,\&quot;markup://auraStorage:fuelGauge\&quot;,\&quot;markup://one:ladybugTrigger\&quot;,\&quot;markup://one:favorites\&quot;,\&quot;markup://one:globalCreate\&quot;,\&quot;markup://one:globalCreateIcon\&quot;,\&quot;markup://one:helpAndTrainingExperience\&quot;,\&quot;markup://ui:interactive\&quot;,\&quot;markup://ui:popupTrigger\&quot;,\&quot;markup://ui:menuTriggerLink\&quot;,\&quot;markup://force:headerMenuTrigger\&quot;,\&quot;markup://ui:tooltip\&quot;,\&quot;markup://setup:gear\&quot;,\&quot;markup://uns:notifications\&quot;,\&quot;markup://force:empApi\&quot;,\&quot;markup://one:userProfileCardTrigger\&quot;,\&quot;markup://force:record\&quot;,\&quot;markup://one:userProfileCardData\&quot;,\&quot;markup://force:toastManager\&quot;,\&quot;markup://force:visualMessageQueue\&quot;,\&quot;markup://force:brandBandPageContainer\&quot;,\&quot;markup://laf:singlePaneWindowManager\&quot;,\&quot;markup://force:recordContentPlugin\&quot;,\&quot;markup://one:searchContentPlugin\&quot;,\&quot;markup://one:editablePagePlugin\&quot;,\&quot;markup://laf:pageCapability\&quot;,\&quot;markup://one:uncacheableContentPlugin\&quot;,\&quot;markup://one:iframeContentPlugin\&quot;,\&quot;markup://laf:standardLayoutContentSelector\&quot;,\&quot;markup://flexipage:page\&quot;,\&quot;markup://force:brandBand\&quot;,\&quot;markup://ui:containerManager\&quot;,\&quot;markup://ui:panelManager2\&quot;,\&quot;markup://one:panelManager\&quot;,\&quot;markup://force:modalSpinner\&quot;,\&quot;markup://force:dotsSpinner\&quot;,\&quot;markup://notes:editPanelManager\&quot;,\&quot;markup://ui:asyncComponentManager\&quot;,\&quot;markup://instrumentation:uiManager\&quot;,\&quot;markup://force:massErrorsManager\&quot;,\&quot;markup://force:hoverPrototypeManager\&quot;,\&quot;markup://force:hoverPrototype\&quot;,\&quot;markup://ui:label\&quot;,\&quot;markup://one:appnav\&quot;,\&quot;markup://force:recordGlobalValueProvider\&quot;,\&quot;markup://laf:pageHost\&quot;,\&quot;markup://laf:windowUpdate\&quot;,\&quot;markup://home:landing\&quot;,\&quot;markup://force:headerButton\&quot;,\&quot;markup://ui:button\&quot;,\&quot;markup://ui:popup\&quot;,\&quot;markup://ui:menu\&quot;,\&quot;markup://ui:popupTarget\&quot;,\&quot;markup://ui:menuList\&quot;,\&quot;markup://uns:notificationsCounter\&quot;,\&quot;markup://force:socialPhoto\&quot;,\&quot;markup://force:socialPhotoController\&quot;,\&quot;markup://one:fp0M01N000000QV8cSAG__pageWithoutSobject__1516162029000\&quot;,\&quot;markup://one:utilityBar\&quot;,\&quot;markup://flexipage:runtimeComponent\&quot;,\&quot;markup://flexipage:componentDecorator\&quot;,\&quot;markup://one:utilityBarItem\&quot;,\&quot;markup://one:dockingPanelManager\&quot;,\&quot;markup://one:utilityBarContainer\&quot;,\&quot;markup://one:utilPanelManager\&quot;,\&quot;markup://force:dockingPanelOverflow\&quot;,\&quot;markup://force:entityIcon\&quot;,\&quot;markup://one:utilityBarContent\&quot;,\&quot;markup://force:popOutManagerAura\&quot;,\&quot;markup://force:popOutManager\&quot;,\&quot;markup://laf:windowMessengerAura\&quot;,\&quot;markup://home:fp0M01N000000QV8dSAG__pageWithoutSobject__1516162029000\&quot;,\&quot;markup://home:homeCard\&quot;,\&quot;markup://runtime_sales_activities:todayTaskContainer\&quot;,\&quot;markup://runtime_sales_activities:todayTasksFilter\&quot;,\&quot;markup://runtime_sales_activities:todayTasksList\&quot;,\&quot;markup://force:recordLayoutList\&quot;,\&quot;markup://runtime_sales_activities:todayTasksCardDataProvider\&quot;,\&quot;markup://force:placeholder\&quot;,\&quot;markup://ui:abstractList\&quot;,\&quot;markup://ui:infiniteList\&quot;,\&quot;markup://force:recordLayout\&quot;,\&quot;markup://force:listTemplate\&quot;,\&quot;markup://force:baseCard\&quot;,\&quot;markup://home:eventContainer\&quot;,\&quot;markup://force:recordList\&quot;,\&quot;markup://force:dataManager\&quot;,\&quot;markup://home:eventCardDataManager\&quot;,\&quot;markup://force:recordCollection\&quot;,\&quot;markup://force:recordListDummyDataProvider\&quot;,\&quot;markup://force:recordLayoutTemplate\&quot;,\&quot;markup://home:newsPanel\&quot;,\&quot;markup://wits:newsPanel\&quot;,\&quot;markup://aura:renderIf\&quot;,\&quot;markup://flexipage:card\&quot;,\&quot;markup://flexipage:reportChart\&quot;,\&quot;markup://flexipage:filterListCard\&quot;,\&quot;markup://forceChatter:publisher\&quot;,\&quot;markup://force:actionsContainer\&quot;,\&quot;markup://aura:unescapedHtml\&quot;,\&quot;markup://forceChatter:exposedFeed\&quot;,\&quot;markup://forceChatter:exposedFeedDesktop\&quot;,\&quot;markup://lightning:workspaceAPI\&quot;,\&quot;markup://forceChatter:feed\&quot;,\&quot;markup://force:emptyState\&quot;,\&quot;markup://analytics:embeddedReportChart\&quot;,\&quot;markup://analytics:embeddedChart\&quot;,\&quot;markup://ui:message\&quot;,\&quot;markup://force:message\&quot;,\&quot;markup://ui:block\&quot;,\&quot;markup://analytics:cordaChart\&quot;,\&quot;markup://analytics:csrPopChart\&quot;,\&quot;markup://ui:scroller\&quot;,\&quot;markup://analytics:pluginChart\&quot;,\&quot;markup://reports:eclairReportChart\&quot;,\&quot;markup://reports:eclairChart\&quot;,\&quot;markup://wits:newsTeaserCard\&quot;,\&quot;markup://wits:newsCardsContainer\&quot;,\&quot;markup://lightning:buttonIcon\&quot;,\&quot;markup://lightning:primitiveIcon\&quot;,\&quot;markup://force:filterList\&quot;,\&quot;markup://offline:banner\&quot;,\&quot;markup://ui:outputText\&quot;,\&quot;markup://offline:sash\&quot;,\&quot;markup://aura:label\&quot;,\&quot;markup://force:filterMenu\&quot;,\&quot;markup://force:listViewDataManagerAdapter\&quot;,\&quot;markup://force:listViewDataManager\&quot;,\&quot;markup://force:card\&quot;,\&quot;markup://forceChatter:style\&quot;,\&quot;markup://forceChatter:feedInner\&quot;,\&quot;markup://forceChatter:richLinkPreviewMetadata\&quot;,\&quot;markup://forceChatter:contentVisibilityMonitor\&quot;,\&quot;markup://forceChatter:scroller\&quot;,\&quot;markup://feeds_sorter:sorter\&quot;,\&quot;markup://forceChatter:searchInFeed\&quot;,\&quot;markup://lightning:input\&quot;,\&quot;markup://forceChatter:feedElementIteration\&quot;,\&quot;markup://forceChatter:emptyFeed\&quot;,\&quot;markup://forceChatter:newContent\&quot;,\&quot;markup://one:actionsComposer\&quot;,\&quot;markup://ui:tabset\&quot;,\&quot;markup://ui:tabBar\&quot;,\&quot;markup://ui:tabOverflowMenuItem\&quot;,\&quot;markup://ui:tab\&quot;,\&quot;markup://ui:tabItem\&quot;,\&quot;markup://force:publisherQuickActionCollapser\&quot;,\&quot;layout://rl-TR1__Closing_Report__c-VIEW-LIST--TR1__My_Active_Assignments--force_filterList-_1-0-444c5970374e2b366758534c353563386742742f77413d3d.c\&quot;,\&quot;markup://force:listRecord\&quot;,\&quot;markup://force:listRecordItem\&quot;,\&quot;markup://ui:infiniteListRow\&quot;,\&quot;markup://force:actionRow\&quot;,\&quot;layout://rl-TR1__Closing_Report__c-VIEW-LIST--TR1__Assignments_Ending_in_30_Days--force_filterList-_1-0-6c486564426970424d62636352426853314f4b5944413d3d.c\&quot;,\&quot;markup://ui:outputDate\&quot;],\&quot;pageCounter\&quot;:1,\&quot;phase\&quot;:\&quot;EPT\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:13,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;defsUsage\&quot;,\&quot;scope\&quot;:\&quot;defsUsage\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;}]}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=22&amp;ui-instrumentation-components-beacon.InstrumentationBeacon.sendData=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">70101000000d18900e</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1348 /aura?r=26&amp;ui-setup-components-aura-components-gear.Gear.getEntitySupport=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1421;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.setup.components.aura.components.gear.GearController/ACTION$getEntitySupport&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=26&amp;ui-setup-components-aura-components-gear.Gear.getEntitySupport=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">71067000000826ec7c</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1349 /aura?r=27&amp;ui-force-components-controllers-platformStateManager.PlatformStateManager.getActionOverrides=1&amp;ui-force-components-controllers-platformStateManager.PlatformStateManager.getKeyPrefixesWithRecordTypes=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1467;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getActionOverrides&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;sObjectNames&quot;:[&quot;Account&quot;,&quot;AccountBrand&quot;,&quot;AccountContactRelation&quot;,&quot;AccountInsight&quot;,&quot;AccountRelationship&quot;,&quot;AccountTeamMember&quot;,&quot;AccountUserTerritory2View&quot;,&quot;ActionCadence&quot;,&quot;ActionPlan&quot;,&quot;ActionPlanItem&quot;,&quot;ActionPlanTemplate&quot;,&quot;ActionPlanTemplateItem&quot;,&quot;ActionPlanTemplateVersion&quot;,&quot;ActiveScratchOrg&quot;,&quot;ActivityHistory&quot;,&quot;AddOnDefinition&quot;,&quot;Address&quot;,&quot;AiImageDetectedObject&quot;,&quot;AiImageObject&quot;,&quot;AiImageTrainingObject&quot;,&quot;AppMenuItem&quot;,&quot;Asset&quot;,&quot;AssetRelationship&quot;,&quot;AssignedResource&quot;,&quot;AssociatedLocation&quot;,&quot;AttachedContentNote&quot;,&quot;CallTemplate&quot;,&quot;Campaign&quot;,&quot;CampaignInfluence&quot;,&quot;CampaignInsight&quot;,&quot;CampaignMember&quot;,&quot;CampaignMemberStatus&quot;,&quot;Candidate_Community__c&quot;,&quot;CareBarrier&quot;,&quot;CareBarrierDeterminant&quot;,&quot;CareBarrierType&quot;,&quot;CareDeterminant&quot;,&quot;CareDeterminantType&quot;,&quot;CareDiagnosis&quot;,&quot;CareInterventionType&quot;,&quot;CarePreauth&quot;,&quot;CarePreauthItem&quot;,&quot;CareProgram&quot;,&quot;CareProgramCampaign&quot;,&quot;CareProgramEnrollee&quot;,&quot;CareProgramTeamMember&quot;,&quot;CareRequest&quot;,&quot;CareRequestDrug&quot;,&quot;CareRequestItem&quot;,&quot;Case&quot;,&quot;CaseComment&quot;,&quot;CaseContactRole&quot;,&quot;CaseMilestone&quot;,&quot;ChannelProgram&quot;,&quot;ChannelProgramLevel&quot;,&quot;ChannelProgramMember&quot;,&quot;Claim&quot;,&quot;CloudServiceProvider&quot;,&quot;CollaborationGroup&quot;,&quot;CommerceOrder&quot;,&quot;Consent__c&quot;,&quot;ConsumptionRate&quot;,&quot;ConsumptionSchedule&quot;,&quot;Contact&quot;,&quot;ContactPointAddress&quot;,&quot;ContactPointConsent&quot;,&quot;ContactPointEmail&quot;,&quot;ContactPointPhone&quot;,&quot;ContactPointTypeConsent&quot;,&quot;ContactRequest&quot;,&quot;ContactSuggestionInsight&quot;,&quot;ContentDocument&quot;,&quot;ContentDocumentListViewMapping&quot;,&quot;ContentNote&quot;,&quot;ContentVersion&quot;,&quot;ContentWorkspace&quot;,&quot;Contract&quot;,&quot;ContractContactRole&quot;,&quot;ContractLineItem&quot;,&quot;Contract_Type_Mapping__c&quot;,&quot;Country__c&quot;,&quot;CoverageBenefit&quot;,&quot;CoverageBenefitItem&quot;,&quot;CoverageLimit&quot;,&quot;CoverageType&quot;,&quot;CustomerAssetAuto&quot;,&quot;CustomerAssetHome&quot;,&quot;Dashboard&quot;,&quot;DataSharingCustomerLocal&quot;,&quot;DataSharingOrder&quot;,&quot;DataUseLegalBasis&quot;,&quot;DataUsePurpose&quot;,&quot;DssOrder&quot;,&quot;DuplicateRecordItem&quot;,&quot;DuplicateRecordSet&quot;,&quot;EditionDefinition&quot;,&quot;EmailMessage&quot;,&quot;EmailMessageRelation&quot;,&quot;EmailTemplate&quot;,&quot;EmbeddedServiceConfig&quot;,&quot;EmbeddedServiceLiveAgent&quot;,&quot;EngagementProgram&quot;,&quot;EngagementProgramVersion&quot;,&quot;EnhancedEmailTemplate&quot;,&quot;Entitlement&quot;,&quot;EntityMilestone&quot;,&quot;EnvironmentHubMember&quot;,&quot;Event&quot;,&quot;FeedItem&quot;,&quot;Folder&quot;,&quot;HealthCareDiagnosis&quot;,&quot;HealthCareProcedure&quot;,&quot;IdentityDocument&quot;,&quot;Image&quot;,&quot;InStoreLocation&quot;,&quot;IncludedLicenseDefinition&quot;,&quot;Individual&quot;,&quot;InsightsApplication&quot;,&quot;InsurancePolicy&quot;,&quot;InsurancePolicyAsset&quot;,&quot;InsurancePolicyBeneficiary&quot;,&quot;InsurancePolicyCoverageLimit&quot;,&quot;InsurancePolicyMember&quot;,&quot;InsurancePolicyOwner&quot;,&quot;InsuranceProfile&quot;,&quot;JobBoardsSiteMapping__c&quot;,&quot;KeyPerformanceIndicator&quot;,&quot;KnowledgeArticleVersion&quot;,&quot;LandingPage&quot;,&quot;Lead&quot;,&quot;Lens&quot;,&quot;LicensingError&quot;,&quot;LicensingRequest&quot;,&quot;ListEmail&quot;,&quot;ListEmailSentResult&quot;,&quot;LiveAgentSession&quot;,&quot;LiveChatTranscript&quot;,&quot;LiveChatVisitor&quot;,&quot;Location&quot;,&quot;Macro&quot;,&quot;MaintenanceAsset&quot;,&quot;MaintenancePlan&quot;,&quot;MarketingForm&quot;,&quot;MarketingLink&quot;,&quot;MemberPlan&quot;,&quot;MessagingChannel&quot;,&quot;MessagingDeliveryError&quot;,&quot;MessagingEndUser&quot;,&quot;MessagingSession&quot;,&quot;MessagingTemplate&quot;,&quot;NamespaceRegistry&quot;,&quot;Note&quot;,&quot;ObjectTerritory2Association&quot;,&quot;OpenActivity&quot;,&quot;OperatingHours&quot;,&quot;Opportunity&quot;,&quot;OpportunityContactRole&quot;,&quot;OpportunityContactRoleSuggestionInsight&quot;,&quot;OpportunityInsight&quot;,&quot;OpportunityLineItem&quot;,&quot;OpportunityLineItemSchedule&quot;,&quot;OpportunitySplit&quot;,&quot;OpportunityTeamMember&quot;,&quot;Order&quot;,&quot;OrderDeliveryGroup&quot;,&quot;OrderDeliveryGroupLine&quot;,&quot;OrderItem&quot;,&quot;OrderPriceAdjustDistrLine&quot;,&quot;OrderPriceAdjustmentLine&quot;,&quot;PartnerFundAllocation&quot;,&quot;PartnerFundClaim&quot;,&quot;PartnerFundRequest&quot;,&quot;PartnerMarketingBudget&quot;,&quot;PersonAccount&quot;,&quot;PersonEducation&quot;,&quot;PersonEmployment&quot;,&quot;PersonLifeEvent&quot;,&quot;PersonList&quot;,&quot;PersonListMember&quot;,&quot;PlanBenefit&quot;,&quot;PlanBenefitItem&quot;,&quot;PlatformLicenseDefinition&quot;,&quot;Pricebook2&quot;,&quot;PricebookEntry&quot;,&quot;ProcessInstanceHistory&quot;,&quot;ProcessInstanceStep&quot;,&quot;ProcessInstanceWorkitem&quot;,&quot;Producer&quot;,&quot;Product2&quot;,&quot;ProductConsumed&quot;,&quot;ProductConsumptionSchedule&quot;,&quot;ProductCoverage&quot;,&quot;ProductCoverageLimit&quot;,&quot;ProductItem&quot;,&quot;ProductItemTransaction&quot;,&quot;ProductLicenseMap&quot;,&quot;ProductRequest&quot;,&quot;ProductRequestLineItem&quot;,&quot;ProductRequired&quot;,&quot;ProductTransfer&quot;,&quot;PurchaserPlan&quot;,&quot;PurchaserPlanAssn&quot;,&quot;QuickText&quot;,&quot;Quote&quot;,&quot;QuoteLineItem&quot;,&quot;Recommendation&quot;,&quot;RecordType&quot;,&quot;Report&quot;,&quot;ResourceAbsence&quot;,&quot;ResourcePreference&quot;,&quot;RetailLocationGroup&quot;,&quot;RetailStore&quot;,&quot;RetailStoreKpi&quot;,&quot;RetailStoreVisitTemplate&quot;,&quot;RetailVisitKpi&quot;,&quot;RetailVisitTemplate&quot;,&quot;RetailVisitTemplateWorkTask&quot;,&quot;RetailVisitWorkTask&quot;,&quot;RetailWorkTask&quot;,&quot;RetailWorkTaskKpi&quot;,&quot;ReturnOrder&quot;,&quot;ReturnOrderLineItem&quot;,&quot;SalesAgreement&quot;,&quot;SalesAgreementProduct&quot;,&quot;SalesAgreementProductSchedule&quot;,&quot;Scorecard&quot;,&quot;ScorecardAssociation&quot;,&quot;ScorecardMetric&quot;,&quot;ScratchOrgInfo&quot;,&quot;ServiceAppointment&quot;,&quot;ServiceAppointmentCapacityUsage&quot;,&quot;ServiceContract&quot;,&quot;ServiceCrew&quot;,&quot;ServiceCrewMember&quot;,&quot;ServiceResource&quot;,&quot;ServiceResourceCapacity&quot;,&quot;ServiceResourceSkill&quot;,&quot;ServiceTerritory&quot;,&quot;ServiceTerritoryLocation&quot;,&quot;ServiceTerritoryMember&quot;,&quot;ServiceTerritoryWorkType&quot;,&quot;SettingUsageDefinition&quot;,&quot;SettingUsageMap&quot;,&quot;Shipment&quot;,&quot;SiqExchangeConnection&quot;,&quot;SkillRequirement&quot;,&quot;SocialPersona&quot;,&quot;SocialPost&quot;,&quot;StandardPermissionSet&quot;,&quot;StreamingChannel&quot;,&quot;Survey&quot;,&quot;SurveyEmailBranding&quot;,&quot;SurveyInvitation&quot;,&quot;SurveyQuestion&quot;,&quot;SurveyQuestionChoice&quot;,&quot;SurveyQuestionResponse&quot;,&quot;SurveyResponse&quot;,&quot;SurveyVersion&quot;,&quot;TR1__ADP__c&quot;,&quot;TR1__ATS_Configuration_Settings__c&quot;,&quot;TR1__ATS_Job_AppV2_Picklist_Mapping__c&quot;,&quot;TR1__AccountPool__c&quot;,&quot;TR1__Account_Address__c&quot;,&quot;TR1__Activate_Triggers__c&quot;,&quot;TR1__AdjustedGrossProfit__c&quot;,&quot;TR1__Agreement__c&quot;,&quot;TR1__Application_History__c&quot;,&quot;TR1__Application_V2__c&quot;,&quot;TR1__Application__c&quot;,&quot;TR1__AreaCode__c&quot;,&quot;TR1__Associate_PO_Closing_Report__c&quot;,&quot;TR1__Associated_Qualification__c&quot;,&quot;TR1__BHLO_Log__c&quot;,&quot;TR1__BHTK_Indexing_status__c&quot;,&quot;TR1__BHTK_User_Authentication__c&quot;,&quot;TR1__Blacklisted__c&quot;,&quot;TR1__Branch__c&quot;,&quot;TR1__CalendarDays__c&quot;,&quot;TR1__Call_List_Member__c&quot;,&quot;TR1__Call_List__c&quot;,&quot;TR1__CandidateManagerActionMenu__c&quot;,&quot;TR1__CandidateManagerViewMenu__c&quot;,&quot;TR1__Candidate_Availability_D2D__c&quot;,&quot;TR1__Candidate_Availability__c&quot;,&quot;TR1__Candidate_Consents__c&quot;,&quot;TR1__Candidate_Finder_Source_Setting__c&quot;,&quot;TR1__Candidate_Summary__c&quot;,&quot;TR1__Candidates_Marketed__c&quot;,&quot;TR1__ClosingReportSettings__c&quot;,&quot;TR1__Closing_Report_Schedule__c&quot;,&quot;TR1__Closing_Report__c&quot;,&quot;TR1__Commission__c&quot;,&quot;TR1__Consent_Type__c&quot;,&quot;TR1__ContactDocument__c&quot;,&quot;TR1__ContactRecordTypes__c&quot;,&quot;TR1__ContactSelectedFields__c&quot;,&quot;TR1__Contact_Accrual__c&quot;,&quot;TR1__Contact_Address__c&quot;,&quot;TR1__Contact_Assessment__c&quot;,&quot;TR1__Contact_fields__c&quot;,&quot;TR1__Country_Code__c&quot;,&quot;TR1__DaxtraSearchProperties__c&quot;,&quot;TR1__Debug_Log__c&quot;,&quot;TR1__Document_Session__c&quot;,&quot;TR1__EMail__c&quot;,&quot;TR1__EducationHistory__c&quot;,&quot;TR1__EmploymentHistory__c&quot;,&quot;TR1__Expense_Report_Detail__c&quot;,&quot;TR1__Expense_Report__c&quot;,&quot;TR1__ExternalSearch__c&quot;,&quot;TR1__External_Search_Junction__c&quot;,&quot;TR1__External_Search_Result__c&quot;,&quot;TR1__External_Search_Status__c&quot;,&quot;TR1__External_Timesheet_Hours__c&quot;,&quot;TR1__FieldIdMapping__c&quot;,&quot;TR1__Fixed_Assets__c&quot;,&quot;TR1__Fyre_Account_Settings__c&quot;,&quot;TR1__Fyre_Parameter_Mapping__c&quot;,&quot;TR1__Fyre_Payload_Job_Type_Mapping__c&quot;,&quot;TR1__Fyre_VMS__c&quot;,&quot;TR1__GDPRConfigurations__c&quot;,&quot;TR1__Generated_Document__c&quot;,&quot;TR1__Gross_Profit__c&quot;,&quot;TR1__Hirabl_Account_Settings__c&quot;,&quot;TR1__Interaction__c&quot;,&quot;TR1__Internal_Onboarding__c&quot;,&quot;TR1__Invoice__c&quot;,&quot;TR1__JobManagerActionMenu__c&quot;,&quot;TR1__JobManagerViewMenu__c&quot;,&quot;TR1__JobRecordType__c&quot;,&quot;TR1__Job_Board_Application__c&quot;,&quot;TR1__Job_Board_Search_Options__c&quot;,&quot;TR1__Job_Board__c&quot;,&quot;TR1__Job_Finder_Source_Setting__c&quot;,&quot;TR1__Job_Leads__c&quot;,&quot;TR1__Job_Reporting__c&quot;,&quot;TR1__Job__c&quot;,&quot;TR1__Jobee_Parameter_Mapping__c&quot;,&quot;TR1__Jobs_Feeds__c&quot;,&quot;TR1__LKIntegrationMapping__c&quot;,&quot;TR1__LK_EasyApplyAPIParameters__c&quot;,&quot;TR1__LK_EasyApplyApplicant__c&quot;,&quot;TR1__LK_IntegrationRecord__c&quot;,&quot;TR1__LabelUtility__c&quot;,&quot;TR1__LinkedIn_App__c&quot;,&quot;TR1__MassResumeProcessor__c&quot;,&quot;TR1__Mass_Job_Monitor__c&quot;,&quot;TR1__Mass_Reject__c&quot;,&quot;TR1__Master_Skill__c&quot;,&quot;TR1__Master_Skills_Translation__c&quot;,&quot;TR1__Matching_Job_Fields_in_Scheduler_Popup__c&quot;,&quot;TR1__Message__c&quot;,&quot;TR1__Mini_Profile__c&quot;,&quot;TR1__Monitor_Bulk_Job__c&quot;,&quot;TR1__Offer__c&quot;,&quot;TR1__Opportunity_Discussed__c&quot;,&quot;TR1__Other_Utility__c&quot;,&quot;TR1__Potential__c&quot;,&quot;TR1__Purchase_Order_Spend__c&quot;,&quot;TR1__Purchase_Order__c&quot;,&quot;TR1__Qualification_Package__c&quot;,&quot;TR1__Qualification__c&quot;,&quot;TR1__RC_Article__c&quot;,&quot;TR1__RateLimit__c&quot;,&quot;TR1__RatePeriod__c&quot;,&quot;TR1__Rate__c&quot;,&quot;TR1__Rates_Mapping__c&quot;,&quot;TR1__Reference__c&quot;,&quot;TR1__Report_Utility__c&quot;,&quot;TR1__Resource_Availability_Overlap__c&quot;,&quot;TR1__ResumeParserCredentials__c&quot;,&quot;TR1__ResumeSearch__c&quot;,&quot;TR1__SAM_User_Settings__c&quot;,&quot;TR1__SF_Purchase_Order_Send__c&quot;,&quot;TR1__SF_Purchase_Order__c&quot;,&quot;TR1__Saved_Search_Contact_Link__c&quot;,&quot;TR1__Saved_Search__c&quot;,&quot;TR1__SchedulerMethods__c&quot;,&quot;TR1__Scheduler_Utilities__c&quot;,&quot;TR1__Screening__c&quot;,&quot;TR1__Search_History__c&quot;,&quot;TR1__Search_Synonym__c&quot;,&quot;TR1__Send_Out_Schedule_V2__c&quot;,&quot;TR1__Send_Out_Schedule__c&quot;,&quot;TR1__Send_Out__c&quot;,&quot;TR1__ShiftWork__c&quot;,&quot;TR1__Skills__c&quot;,&quot;TR1__StateRegionalAreaMapping__c&quot;,&quot;TR1__Submittal__c&quot;,&quot;TR1__SystemProperties__c&quot;,&quot;TR1__TalentRoverProperties__c&quot;,&quot;TR1__Template__c&quot;,&quot;TR1__TextKernel__c&quot;,&quot;TR1__TimeType__c&quot;,&quot;TR1__Timesheet_Detail__c&quot;,&quot;TR1__Timesheet__c&quot;,&quot;TR1__Train_Station__c&quot;,&quot;TR1__UserSubscription__c&quot;,&quot;TR1__Vacancy_D2D__c&quot;,&quot;TR1__Worker_Comp__c&quot;,&quot;TR1__Zip_Code_Mapping__c&quot;,&quot;TabDefinition&quot;,&quot;Task&quot;,&quot;Tenant&quot;,&quot;TenantParameterMap&quot;,&quot;TimeSheet&quot;,&quot;TimeSheetEntry&quot;,&quot;TimeSheetTemplate&quot;,&quot;TimeSlot&quot;,&quot;Topic&quot;,&quot;TrialEnvironmentSignup&quot;,&quot;UsageEntitlement&quot;,&quot;UsageEntitlementPeriod&quot;,&quot;UsageEntitlementUsage&quot;,&quot;UsageFactor&quot;,&quot;User&quot;,&quot;UserAppMenuItem&quot;,&quot;UserLicenseDefinition&quot;,&quot;Vacanc_Category_Mapping__c&quot;,&quot;Vacancy_Country_Mapping__c&quot;,&quot;Vacancy_Education_Level__c&quot;,&quot;Vacancy_Employment_Type_Mapping__c&quot;,&quot;Vacancy_Experience_Duration_Mapping__c&quot;,&quot;Vacancy_Industry_Mapping__c&quot;,&quot;Vacancy_Level_Mapping__c&quot;,&quot;Vacancy_Parameter_Mapping__c&quot;,&quot;Vacancy_Salary_Frequency__c&quot;,&quot;Vacancy_Shift_Mapping__c&quot;,&quot;Vacancy_Status_Mapping__c&quot;,&quot;Vacancy_Sub_Catagory_Mapping__c&quot;,&quot;VisionPredictionSettings&quot;,&quot;Visit&quot;,&quot;WorkCapacityLimit&quot;,&quot;WorkCapacityUsage&quot;,&quot;WorkOrder&quot;,&quot;WorkOrderLineItem&quot;,&quot;WorkSkillRouting&quot;,&quot;WorkType&quot;,&quot;WorkTypeGroup&quot;,&quot;WorkTypeGroupMember&quot;],&quot;appId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;storable&quot;:true},{&quot;id&quot;:&quot;1468;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getKeyPrefixesWithRecordTypes&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=27&amp;ui-force-components-controllers-platformStateManager.PlatformStateManager.getActionOverrides=1&amp;ui-force-components-controllers-platformStateManager.PlatformStateManager.getKeyPrefixesWithRecordTypes=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">710900000009564d0d</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1343 /aura?r=23&amp;ui-search-components-forcesearch-sgdp.MRUCache.getGlobalMrus=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1387;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.search.components.forcesearch.sgdp.MRUCacheController/ACTION$getGlobalMrus&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;maxResults&quot;:200,&quot;lastTenMrus&quot;:null}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=23&amp;ui-search-components-forcesearch-sgdp.MRUCache.getGlobalMrus=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">70103000000bc9c6d4</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1354 /aura?r=28&amp;ui-global-components-one-onboardingManager.OnboardingManager.getPayload=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1479;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.onboardingManager.OnboardingManagerController/ACTION$getPayload&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=28&amp;ui-global-components-one-onboardingManager.OnboardingManager.getPayload=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">7256100000027b9cb8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1341 /_nc_external/system/security/session/SessionTimeServlet" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="buster" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">buster</stringProp>
                  <stringProp name="Argument.value">${__time(,)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/_nc_external/system/security/session/SessionTimeServlet</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1345 /aura?r=24&amp;ui-setup-components-aura-components-gear.Gear.getGearSetupApps=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1419;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.setup.components.aura.components.gear.GearController/ACTION$getGearSetupApps&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;customAppId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=24&amp;ui-setup-components-aura-components-gear.Gear.getGearSetupApps=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">7010500000016cad2d</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="S3_03_Click_Parser" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1360 /aura?r=29&amp;aura.Component.getComponent=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1584;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$getComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;name&quot;:&quot;markup://forceChatter:lightningComponent&quot;,&quot;attributes&quot;:{&quot;contextualMessages&quot;:[],&quot;publisherId&quot;:&quot;00D3F0000009PPi:Global::Dockable:Desktop:09D1N000007PtSd&quot;,&quot;publisherFeedType&quot;:&quot;News&quot;,&quot;quickActionLabel&quot;:&quot;Resume Parser&quot;,&quot;quickActionApiName&quot;:&quot;TR1__Lightning_Resume_Parser&quot;,&quot;quickActionSubjectId&quot;:&quot;0051N000005pgpoQAA&quot;,&quot;isComposerContext&quot;:true,&quot;isInDockingPanel&quot;:true}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=29&amp;aura.Component.getComponent=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">924510000002d69061</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1361 /aura?r=30&amp;TR1.DocumentParser.fetchCompLiterals=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1612;a&quot;,&quot;descriptor&quot;:&quot;apex://TR1.DocumentParserController/ACTION$fetchCompLiterals&quot;,&quot;callingDescriptor&quot;:&quot;markup://TR1:DocumentParser&quot;,&quot;params&quot;:{},&quot;version&quot;:null,&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=30&amp;TR1.DocumentParser.fetchCompLiterals=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">9384000000041260b5</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1362 /aura?r=31&amp;ui-instrumentation-components-beacon.InstrumentationBeacon.sendData=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1620;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.instrumentation.components.beacon.InstrumentationBeaconController/ACTION$sendData&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:70089,\&quot;duration\&quot;:19,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;forceSearch:searchGDPCachePermsAndPrefs\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-search-sgdp-request-getPermsAndPrefs\&quot;,\&quot;attributes\&quot;:{\&quot;tStart\&quot;:1559032442131,\&quot;cacheHit\&quot;:true,\&quot;etCacheGet\&quot;:2,\&quot;tSending\&quot;:1559032442133,\&quot;etDataCopy\&quot;:0,\&quot;tEnd\&quot;:1559032442151,\&quot;etSendDataWait\&quot;:18,\&quot;etTransaction\&quot;:20,\&quot;name\&quot;:\&quot;DEFAULT\&quot;,\&quot;groupId\&quot;:\&quot;DEFAULT\&quot;,\&quot;requestType\&quot;:\&quot;getPermsAndPrefs\&quot;,\&quot;requestId\&quot;:\&quot;forceSearchInputDesktop:103:0;p\&quot;,\&quot;requestCmp\&quot;:\&quot;forceSearchInputDesktop\&quot;,\&quot;requestCmpId\&quot;:\&quot;103:0;p\&quot;,\&quot;params\&quot;:{},\&quot;sourceCmp\&quot;:\&quot;forceSearch:searchGDPCachePermsAndPrefs\&quot;,\&quot;time\&quot;:1559032442151,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:70091,\&quot;duration\&quot;:26,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{},\&quot;owner\&quot;:\&quot;forceSearch:searchGDPCacheScopes\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-search-sgdp-request-getScopeMaps\&quot;,\&quot;attributes\&quot;:{\&quot;tStart\&quot;:1559032442133,\&quot;cacheHit\&quot;:true,\&quot;etCacheGet\&quot;:2,\&quot;tSending\&quot;:1559032442135,\&quot;etDataCopy\&quot;:0,\&quot;tEnd\&quot;:1559032442159,\&quot;etSendDataWait\&quot;:24,\&quot;etTransaction\&quot;:26,\&quot;name\&quot;:\&quot;DEFAULT\&quot;,\&quot;groupId\&quot;:\&quot;DEFAULT\&quot;,\&quot;requestType\&quot;:\&quot;getScopeMaps\&quot;,\&quot;requestId\&quot;:\&quot;forceSearchInputDesktop:103:0;p\&quot;,\&quot;requestCmp\&quot;:\&quot;forceSearchInputDesktop\&quot;,\&quot;requestCmpId\&quot;:\&quot;103:0;p\&quot;,\&quot;params\&quot;:{\&quot;scopeTypes\&quot;:[\&quot;FILTER\&quot;,\&quot;SMART_SCOPE\&quot;,\&quot;PRIMARY\&quot;]},\&quot;sourceCmp\&quot;:\&quot;forceSearch:searchGDPCacheScopes\&quot;,\&quot;time\&quot;:1559032442159,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:72707,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:null,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-notification\&quot;,\&quot;attributes\&quot;:{\&quot;data\&quot;:{\&quot;notificationSupported\&quot;:true,\&quot;defaultNotificationPerm\&quot;:\&quot;default\&quot;,\&quot;userSetNotificationPerm\&quot;:\&quot;default\&quot;},\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:14,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;session-timeout-notification\&quot;,\&quot;scope\&quot;:\&quot;sessiontimeoutwarn\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:70087,\&quot;duration\&quot;:2662,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (196)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:71079,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1}],\&quot;transport\&quot;:[{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70099,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:21,\&quot;requestLength\&quot;:2968,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;1379;a\&quot;,\&quot;1380;a\&quot;,\&quot;1382;a\&quot;,\&quot;1383;a\&quot;,\&quot;1385;a\&quot;,\&quot;1409;a\&quot;,\&quot;1410;a\&quot;,\&quot;1414;a\&quot;,\&quot;1417;a\&quot;],\&quot;requestId\&quot;:\&quot;70100000000c575be7\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:31955,\&quot;xhrDuration\&quot;:921,\&quot;xhrStall\&quot;:24,\&quot;startTime\&quot;:70100,\&quot;fetchStart\&quot;:70100,\&quot;requestStart\&quot;:70124,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:25,\&quot;transfer\&quot;:896,\&quot;transferSize\&quot;:33888,\&quot;serverTime\&quot;:107,\&quot;xhrDelay\&quot;:1},\&quot;duration\&quot;:922},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70105,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:25,\&quot;requestLength\&quot;:830,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;1420;a\&quot;],\&quot;requestId\&quot;:\&quot;70105000000c091ac0\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6971,\&quot;xhrDuration\&quot;:1024,\&quot;xhrStall\&quot;:305,\&quot;startTime\&quot;:70105,\&quot;fetchStart\&quot;:70105,\&quot;requestStart\&quot;:70410,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:306,\&quot;transfer\&quot;:718,\&quot;transferSize\&quot;:8903,\&quot;serverTime\&quot;:29,\&quot;xhrDelay\&quot;:42},\&quot;duration\&quot;:1066},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70101,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:22,\&quot;requestLength\&quot;:175971,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;1378;a\&quot;],\&quot;requestId\&quot;:\&quot;70101000000d18900e\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6814,\&quot;xhrDuration\&quot;:1173,\&quot;xhrStall\&quot;:22,\&quot;startTime\&quot;:70102,\&quot;fetchStart\&quot;:70102,\&quot;requestStart\&quot;:70124,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:23,\&quot;transfer\&quot;:1150,\&quot;transferSize\&quot;:8747,\&quot;serverTime\&quot;:293,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:1176},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71067,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:26,\&quot;requestLength\&quot;:832,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;1421;a\&quot;],\&quot;requestId\&quot;:\&quot;71067000000826ec7c\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:8371,\&quot;xhrDuration\&quot;:794,\&quot;xhrStall\&quot;:61,\&quot;startTime\&quot;:71068,\&quot;fetchStart\&quot;:71068,\&quot;requestStart\&quot;:71129,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:61,\&quot;transfer\&quot;:733,\&quot;transferSize\&quot;:10303,\&quot;serverTime\&quot;:45,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:796},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71090,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:27,\&quot;requestLength\&quot;:13495,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;1467;a\&quot;,\&quot;1468;a\&quot;],\&quot;requestId\&quot;:\&quot;710900000009564d0d\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:13109,\&quot;xhrDuration\&quot;:1288,\&quot;xhrStall\&quot;:182,\&quot;startTime\&quot;:71094,\&quot;fetchStart\&quot;:71094,\&quot;requestStart\&quot;:71276,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:183,\&quot;transfer\&quot;:1105,\&quot;transferSize\&quot;:15042,\&quot;serverTime\&quot;:297,\&quot;xhrDelay\&quot;:5},\&quot;duration\&quot;:1293},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70121,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:6,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:2425,\&quot;startTime\&quot;:70122,\&quot;fetchStart\&quot;:71715,\&quot;requestStart\&quot;:71863,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:1592,\&quot;ttfb\&quot;:1741,\&quot;transfer\&quot;:684,\&quot;transferSize\&quot;:69650,\&quot;encodedBodySize\&quot;:68701,\&quot;decodedBodySize\&quot;:68701,\&quot;serverTime\&quot;:29,\&quot;defs\&quot;:[\&quot;markup://one:onboardingManager\&quot;],\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:2429},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70103,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:23,\&quot;requestLength\&quot;:855,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;1387;a\&quot;],\&quot;requestId\&quot;:\&quot;70103000000bc9c6d4\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:106370,\&quot;xhrDuration\&quot;:2641,\&quot;xhrStall\&quot;:21,\&quot;startTime\&quot;:70103,\&quot;fetchStart\&quot;:70103,\&quot;requestStart\&quot;:70124,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:22,\&quot;transfer\&quot;:2619,\&quot;transferSize\&quot;:108303,\&quot;serverTime\&quot;:447,\&quot;xhrDelay\&quot;:0},\&quot;duration\&quot;:2641}],\&quot;actions\&quot;:[{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70094,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1409;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;one:globalCreate\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.global.components.one.globalCreate.GlobalCreateController/ACTION$getDockableActionsList\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:45,\&quot;db\&quot;:12,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:16,\&quot;duration\&quot;:971},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70094,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1410;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;uns:notifications\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.notifications.components.notifications.controller.NotificationsController/ACTION$getNotifications\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:3,\&quot;db\&quot;:1,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:971},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70096,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1414;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;one:userProfileCardData\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.global.components.one.userProfileCard.UserProfileCardController/ACTION$loadProfileCardInfo\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:970},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70096,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1417;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;runtime_all_walkthroughs:player\&quot;,\&quot;def\&quot;:\&quot;java://ui.walkthroughs.components.controllers.PlayerController/ACTION$willDisplayWalkthroughInternalTool\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:970},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70097,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1420;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;setup:gear\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.setup.components.aura.components.gear.GearController/ACTION$getPermissions\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:6,\&quot;enqueueWait\&quot;:2,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:24,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:1075},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70097,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1421;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;setup:gear\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.setup.components.aura.components.gear.GearController/ACTION$getEntitySupport\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:968,\&quot;enqueueWait\&quot;:2,\&quot;serverTime\&quot;:{\&quot;total\&quot;:18,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:43,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:1771},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71088,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1467;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getActionOverrides\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:2,\&quot;serverTime\&quot;:{\&quot;total\&quot;:256,\&quot;db\&quot;:3,\&quot;xhrServerTime\&quot;:292,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:1299},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71095,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1469;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getActionOverrides\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:77,\&quot;enqueueWait\&quot;:2,\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1292},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71089,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1468;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getKeyPrefixesWithRecordTypes\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:8,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:292,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1298},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71095,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1470;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getKeyPrefixesWithRecordTypes\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:77,\&quot;enqueueWait\&quot;:2,\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1293}],\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://ui:menu\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:16},{\&quot;name\&quot;:\&quot;markup://one:onboardingManager\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:7}]},\&quot;owner\&quot;:\&quot;forceSearch:searchGDPCacheMrus\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-search-sgdp-fetch-getGlobalMrus\&quot;,\&quot;attributes\&quot;:{\&quot;tStart\&quot;:1559032442130,\&quot;cacheHit\&quot;:false,\&quot;actionId\&quot;:\&quot;1387;a\&quot;,\&quot;fetchedGlobalMrus\&quot;:200,\&quot;fetchedGlobalMruNumEntities\&quot;:10,\&quot;deletedGlobalMrus\&quot;:0,\&quot;name\&quot;:\&quot;DEFAULT\&quot;,\&quot;groupId\&quot;:\&quot;DEFAULT\&quot;,\&quot;requestType\&quot;:\&quot;getGlobalMrus\&quot;,\&quot;requestId\&quot;:\&quot;forceSearchSearchGDPCacheMrus:192:0;p\&quot;,\&quot;requestCmp\&quot;:\&quot;forceSearchSearchGDPCacheMrus\&quot;,\&quot;requestCmpId\&quot;:\&quot;192:0;p\&quot;,\&quot;params\&quot;:{},\&quot;sourceCmp\&quot;:\&quot;forceSearch:searchGDPCacheMrus\&quot;,\&quot;time\&quot;:1559032444792,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:89796,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;aura:html\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;click\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:15,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;global-action-button__menu-trigger-link\&quot;,\&quot;scope\&quot;:\&quot;one-header\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:90724,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;aura:html\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;click\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:16,\&quot;locator\&quot;:{\&quot;context\&quot;:{\&quot;devNameOrId\&quot;:\&quot;TR1__Lightning_Resume_Parser\&quot;},\&quot;target\&quot;:\&quot;global-action-item__menu-item\&quot;,\&quot;scope\&quot;:\&quot;one-header\&quot;},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningInteraction&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:interaction\&quot;,\&quot;ts\&quot;:90760,\&quot;pageStartTime\&quot;:1559032372042,\&quot;owner\&quot;:\&quot;force:dockingPanel\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;user\&quot;,\&quot;eventSource\&quot;:\&quot;synthetic-click\&quot;,\&quot;attributes\&quot;:{\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true},\&quot;sequence\&quot;:17,\&quot;locator\&quot;:{\&quot;target\&quot;:\&quot;force-dockingPanel-create\&quot;,\&quot;scope\&quot;:\&quot;one-one\&quot;,\&quot;context\&quot;:{\&quot;type\&quot;:\&quot;TR1__Lightning_Resume_Parser\&quot;}},\&quot;page\&quot;:{\&quot;context\&quot;:\&quot;home:landing\&quot;,\&quot;attributes\&quot;:{\&quot;app\&quot;:{\&quot;appName\&quot;:\&quot;Front_Office_tab\&quot;,\&quot;appType\&quot;:\&quot;Standard\&quot;},\&quot;url\&quot;:\&quot;/lightning/page/home\&quot;}}}&quot;},{&quot;topic&quot;:&quot;ailtn&quot;,&quot;schemaType&quot;:&quot;LightningPerformance&quot;,&quot;payload&quot;:&quot;{\&quot;id\&quot;:\&quot;ltng:performance\&quot;,\&quot;ts\&quot;:70081,\&quot;duration\&quot;:24609,\&quot;pageStartTime\&quot;:1559032372042,\&quot;marks\&quot;:{\&quot;custom\&quot;:[{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (196)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:71079,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (198)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:90772,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (199)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:90772,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (200)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:90773,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (201)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:90774,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (203)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93864,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (204)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93866,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (205)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93866,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (206)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93868,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:6},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (207)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93874,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (208)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93875,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (209)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93876,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (210)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93876,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (211)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93876,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (212)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93877,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (213)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93878,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (214)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93879,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (215)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93879,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:2},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (216)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93881,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:93885,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:0},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;&lt;undefined (221)&gt; - lwc-hydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:94637,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-hydrate\&quot;},\&quot;duration\&quot;:1},{\&quot;ns\&quot;:\&quot;default\&quot;,\&quot;name\&quot;:\&quot;lwc-rehydrate\&quot;,\&quot;phase\&quot;:\&quot;stamp\&quot;,\&quot;ts\&quot;:94639,\&quot;context\&quot;:{\&quot;measure\&quot;:\&quot;lwc-rehydrate\&quot;},\&quot;duration\&quot;:3}],\&quot;transport\&quot;:[{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70099,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:21,\&quot;requestLength\&quot;:2968,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;1379;a\&quot;,\&quot;1380;a\&quot;,\&quot;1382;a\&quot;,\&quot;1383;a\&quot;,\&quot;1385;a\&quot;,\&quot;1409;a\&quot;,\&quot;1410;a\&quot;,\&quot;1414;a\&quot;,\&quot;1417;a\&quot;],\&quot;requestId\&quot;:\&quot;70100000000c575be7\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:31955,\&quot;xhrDuration\&quot;:921,\&quot;xhrStall\&quot;:24,\&quot;startTime\&quot;:70100,\&quot;fetchStart\&quot;:70100,\&quot;requestStart\&quot;:70124,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:25,\&quot;transfer\&quot;:896,\&quot;transferSize\&quot;:33888,\&quot;serverTime\&quot;:107,\&quot;xhrDelay\&quot;:1},\&quot;duration\&quot;:922},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70105,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:25,\&quot;requestLength\&quot;:830,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;1420;a\&quot;],\&quot;requestId\&quot;:\&quot;70105000000c091ac0\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6971,\&quot;xhrDuration\&quot;:1024,\&quot;xhrStall\&quot;:305,\&quot;startTime\&quot;:70105,\&quot;fetchStart\&quot;:70105,\&quot;requestStart\&quot;:70410,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:306,\&quot;transfer\&quot;:718,\&quot;transferSize\&quot;:8903,\&quot;serverTime\&quot;:29,\&quot;xhrDelay\&quot;:42},\&quot;duration\&quot;:1066},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70101,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:22,\&quot;requestLength\&quot;:175971,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;1378;a\&quot;],\&quot;requestId\&quot;:\&quot;70101000000d18900e\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6814,\&quot;xhrDuration\&quot;:1173,\&quot;xhrStall\&quot;:22,\&quot;startTime\&quot;:70102,\&quot;fetchStart\&quot;:70102,\&quot;requestStart\&quot;:70124,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:23,\&quot;transfer\&quot;:1150,\&quot;transferSize\&quot;:8747,\&quot;serverTime\&quot;:293,\&quot;xhrDelay\&quot;:3},\&quot;duration\&quot;:1176},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71067,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:26,\&quot;requestLength\&quot;:832,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;1421;a\&quot;],\&quot;requestId\&quot;:\&quot;71067000000826ec7c\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:8371,\&quot;xhrDuration\&quot;:794,\&quot;xhrStall\&quot;:61,\&quot;startTime\&quot;:71068,\&quot;fetchStart\&quot;:71068,\&quot;requestStart\&quot;:71129,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:61,\&quot;transfer\&quot;:733,\&quot;transferSize\&quot;:10303,\&quot;serverTime\&quot;:45,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:796},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71090,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:27,\&quot;requestLength\&quot;:13495,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;1467;a\&quot;,\&quot;1468;a\&quot;],\&quot;requestId\&quot;:\&quot;710900000009564d0d\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:13109,\&quot;xhrDuration\&quot;:1288,\&quot;xhrStall\&quot;:182,\&quot;startTime\&quot;:71094,\&quot;fetchStart\&quot;:71094,\&quot;requestStart\&quot;:71276,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:183,\&quot;transfer\&quot;:1105,\&quot;transferSize\&quot;:15042,\&quot;serverTime\&quot;:297,\&quot;xhrDelay\&quot;:5},\&quot;duration\&quot;:1293},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70121,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:6,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:2425,\&quot;startTime\&quot;:70122,\&quot;fetchStart\&quot;:71715,\&quot;requestStart\&quot;:71863,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:1592,\&quot;ttfb\&quot;:1741,\&quot;transfer\&quot;:684,\&quot;transferSize\&quot;:69650,\&quot;encodedBodySize\&quot;:68701,\&quot;decodedBodySize\&quot;:68701,\&quot;serverTime\&quot;:29,\&quot;defs\&quot;:[\&quot;markup://one:onboardingManager\&quot;],\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:2429},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70103,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:23,\&quot;requestLength\&quot;:855,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;1387;a\&quot;],\&quot;requestId\&quot;:\&quot;70103000000bc9c6d4\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:106370,\&quot;xhrDuration\&quot;:2641,\&quot;xhrStall\&quot;:21,\&quot;startTime\&quot;:70103,\&quot;fetchStart\&quot;:70103,\&quot;requestStart\&quot;:70124,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:22,\&quot;transfer\&quot;:2619,\&quot;transferSize\&quot;:108303,\&quot;serverTime\&quot;:447,\&quot;xhrDelay\&quot;:0},\&quot;duration\&quot;:2641},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:72561,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:28,\&quot;requestLength\&quot;:817,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;1479;a\&quot;],\&quot;requestId\&quot;:\&quot;7256100000027b9cb8\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:6800,\&quot;xhrDuration\&quot;:763,\&quot;xhrStall\&quot;:3,\&quot;startTime\&quot;:72561,\&quot;fetchStart\&quot;:72561,\&quot;requestStart\&quot;:72564,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:3,\&quot;transfer\&quot;:760,\&quot;transferSize\&quot;:8732,\&quot;serverTime\&quot;:36,\&quot;xhrDelay\&quot;:1},\&quot;duration\&quot;:764},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70105,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:24,\&quot;requestLength\&quot;:876,\&quot;background\&quot;:true,\&quot;actionDefs\&quot;:[\&quot;1419;a\&quot;],\&quot;requestId\&quot;:\&quot;7010500000016cad2d\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:7071,\&quot;xhrDuration\&quot;:4144,\&quot;xhrStall\&quot;:20,\&quot;startTime\&quot;:70105,\&quot;fetchStart\&quot;:70105,\&quot;requestStart\&quot;:70125,\&quot;dns\&quot;:1,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:20,\&quot;transfer\&quot;:4124,\&quot;transferSize\&quot;:9003,\&quot;serverTime\&quot;:45,\&quot;xhrDelay\&quot;:0},\&quot;duration\&quot;:4144},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:90798,\&quot;context\&quot;:{\&quot;defLoaderId\&quot;:7,\&quot;initiatorType\&quot;:\&quot;script\&quot;,\&quot;duration\&quot;:1645,\&quot;startTime\&quot;:90799,\&quot;fetchStart\&quot;:91624,\&quot;requestStart\&quot;:91624,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;redirect\&quot;:825,\&quot;ttfb\&quot;:826,\&quot;transfer\&quot;:819,\&quot;transferSize\&quot;:224113,\&quot;encodedBodySize\&quot;:223162,\&quot;decodedBodySize\&quot;:223162,\&quot;serverTime\&quot;:124,\&quot;defs\&quot;:[\&quot;markup://forceChatter:lightningComponent\&quot;],\&quot;xhrDelay\&quot;:4},\&quot;duration\&quot;:1649},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:92451,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:29,\&quot;requestLength\&quot;:1252,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;1584;a\&quot;],\&quot;requestId\&quot;:\&quot;924510000002d69061\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:11651,\&quot;xhrDuration\&quot;:1325,\&quot;xhrStall\&quot;:1,\&quot;startTime\&quot;:92451,\&quot;fetchStart\&quot;:92451,\&quot;requestStart\&quot;:92452,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:3,\&quot;transfer\&quot;:1322,\&quot;transferSize\&quot;:13584,\&quot;serverTime\&quot;:632,\&quot;xhrDelay\&quot;:2},\&quot;duration\&quot;:1327},{\&quot;ns\&quot;:\&quot;transport\&quot;,\&quot;name\&quot;:\&quot;request\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:93840,\&quot;context\&quot;:{\&quot;auraXHRId\&quot;:30,\&quot;requestLength\&quot;:845,\&quot;background\&quot;:false,\&quot;actionDefs\&quot;:[\&quot;1612;a\&quot;],\&quot;requestId\&quot;:\&quot;9384000000041260b5\&quot;,\&quot;status\&quot;:200,\&quot;statusText\&quot;:\&quot;OK\&quot;,\&quot;responseLength\&quot;:8091,\&quot;xhrDuration\&quot;:788,\&quot;xhrStall\&quot;:2,\&quot;startTime\&quot;:93841,\&quot;fetchStart\&quot;:93841,\&quot;requestStart\&quot;:93843,\&quot;dns\&quot;:0,\&quot;tcp\&quot;:0,\&quot;ttfb\&quot;:2,\&quot;transfer\&quot;:786,\&quot;transferSize\&quot;:10023,\&quot;serverTime\&quot;:99,\&quot;xhrDelay\&quot;:1},\&quot;duration\&quot;:789}],\&quot;actions\&quot;:[{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70084,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1379;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:defenseHook\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.defenseHook.DefenseHookController/ACTION$getDefenseHook\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:13,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:16,\&quot;duration\&quot;:959},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70084,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1380;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;salesforceIdentity:sessionTimeoutWarn\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.identity.components.sessiontimeoutwarn.SessionTimeoutWarnController/ACTION$getSessionTimeoutConfig\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:13,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:960},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70085,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1382;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;support:crossFrameApiManager\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.support.components.crossFrameApiManager.CrossFrameApiManagerController/ACTION$getIsLightningOpenCtiUser\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:14,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:959},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70086,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1383;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;runtime_rtc:rtcDiscoveryBanner\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.rtc.components.aura.components.RtcDiscoveryBannerController/ACTION$getConfig\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:13,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:958},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70087,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1385;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;force:hostConfig\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.hostConfig.HostConfigController/ACTION$getConfigData\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:12,\&quot;serverTime\&quot;:{\&quot;total\&quot;:21,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:5,\&quot;duration\&quot;:962},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70094,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1409;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;one:globalCreate\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.global.components.one.globalCreate.GlobalCreateController/ACTION$getDockableActionsList\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:45,\&quot;db\&quot;:12,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:16,\&quot;duration\&quot;:971},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70094,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1410;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;uns:notifications\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.notifications.components.notifications.controller.NotificationsController/ACTION$getNotifications\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:3,\&quot;db\&quot;:1,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:971},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70096,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1414;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;one:userProfileCardData\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.global.components.one.userProfileCard.UserProfileCardController/ACTION$loadProfileCardInfo\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:970},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70096,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1417;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;runtime_all_walkthroughs:player\&quot;,\&quot;def\&quot;:\&quot;java://ui.walkthroughs.components.controllers.PlayerController/ACTION$willDisplayWalkthroughInternalTool\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:2,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:101,\&quot;boxCarCount\&quot;:9},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:970},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70097,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1420;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;setup:gear\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.setup.components.aura.components.gear.GearController/ACTION$getPermissions\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:6,\&quot;enqueueWait\&quot;:2,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:24,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:1075},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70081,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1378;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.instrumentation.components.beacon.InstrumentationBeaconController/ACTION$sendData\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:4,\&quot;enqueueWait\&quot;:16,\&quot;serverTime\&quot;:{\&quot;total\&quot;:0,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:290,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1197},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70097,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1421;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;setup:gear\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.setup.components.aura.components.gear.GearController/ACTION$getEntitySupport\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:968,\&quot;enqueueWait\&quot;:2,\&quot;serverTime\&quot;:{\&quot;total\&quot;:18,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:43,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:1771},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71088,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1467;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getActionOverrides\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:2,\&quot;serverTime\&quot;:{\&quot;total\&quot;:256,\&quot;db\&quot;:3,\&quot;xhrServerTime\&quot;:292,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:1,\&quot;duration\&quot;:1299},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71095,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1469;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getActionOverrides\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:77,\&quot;enqueueWait\&quot;:2,\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1292},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71089,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1468;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getKeyPrefixesWithRecordTypes\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:1,\&quot;serverTime\&quot;:{\&quot;total\&quot;:8,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:292,\&quot;boxCarCount\&quot;:2},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1298},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:71095,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1470;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;laf:platformPageResolver\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.force.components.controllers.platformStateManager.PlatformStateManagerController/ACTION$getKeyPrefixesWithRecordTypes\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:77,\&quot;enqueueWait\&quot;:2,\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:1293},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70088,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1387;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;forceSearch:searchGDPCacheMrus\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.search.components.forcesearch.sgdp.MRUCacheController/ACTION$getGlobalMrus\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:6,\&quot;enqueueWait\&quot;:9,\&quot;serverTime\&quot;:{\&quot;total\&quot;:412,\&quot;db\&quot;:1,\&quot;xhrServerTime\&quot;:442,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:3,\&quot;duration\&quot;:2662},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:72560,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1479;a\&quot;,\&quot;abortable\&quot;:false,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;one:onboardingManager\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.global.components.one.onboardingManager.OnboardingManagerController/ACTION$getPayload\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:1,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:5,\&quot;db\&quot;:0,\&quot;xhrServerTime\&quot;:32,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:0,\&quot;duration\&quot;:767},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:70096,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1419;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:true,\&quot;cmp\&quot;:\&quot;setup:gear\&quot;,\&quot;def\&quot;:\&quot;serviceComponent://ui.setup.components.aura.components.gear.GearController/ACTION$getGearSetupApps\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:6,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:17,\&quot;db\&quot;:9,\&quot;xhrServerTime\&quot;:44,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:4,\&quot;duration\&quot;:4160},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:92451,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1584;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:false,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;none\&quot;,\&quot;def\&quot;:\&quot;aura://ComponentController/ACTION$getComponent\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;params\&quot;:{\&quot;name\&quot;:\&quot;markup://forceChatter:lightningComponent\&quot;},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:0,\&quot;serverTime\&quot;:{\&quot;total\&quot;:130,\&quot;db\&quot;:3,\&quot;xhrServerTime\&quot;:475,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:58,\&quot;duration\&quot;:1387},{\&quot;ns\&quot;:\&quot;actions\&quot;,\&quot;name\&quot;:\&quot;enqueue\&quot;,\&quot;phase\&quot;:\&quot;processed\&quot;,\&quot;ts\&quot;:93837,\&quot;context\&quot;:{\&quot;id\&quot;:\&quot;1612;a\&quot;,\&quot;abortable\&quot;:true,\&quot;storable\&quot;:true,\&quot;background\&quot;:false,\&quot;cmp\&quot;:\&quot;TR1:DocumentParser\&quot;,\&quot;def\&quot;:\&quot;apex://TR1.DocumentParserController/ACTION$fetchCompLiterals\&quot;,\&quot;state\&quot;:\&quot;SUCCESS\&quot;,\&quot;cache\&quot;:false},\&quot;xhrWait\&quot;:0,\&quot;enqueueWait\&quot;:3,\&quot;serverTime\&quot;:{\&quot;total\&quot;:9,\&quot;db\&quot;:2,\&quot;xhrServerTime\&quot;:94,\&quot;boxCarCount\&quot;:1},\&quot;callbackTime\&quot;:3,\&quot;duration\&quot;:796}],\&quot;component\&quot;:[{\&quot;name\&quot;:\&quot;markup://ui:menu\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:16},{\&quot;name\&quot;:\&quot;markup://one:onboardingManager\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:7},{\&quot;name\&quot;:\&quot;markup://ui:tooltipAdvanced\&quot;,\&quot;createCount\&quot;:2,\&quot;createTimeTotal\&quot;:12},{\&quot;name\&quot;:\&quot;markup://force:dockableActionRunnable\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:56},{\&quot;name\&quot;:\&quot;markup://forceChatter:lightningComponent\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:57},{\&quot;name\&quot;:\&quot;markup://lightning:radioGroup\&quot;,\&quot;createCount\&quot;:1,\&quot;createTimeTotal\&quot;:0}]},\&quot;owner\&quot;:\&quot;instrumentation:beacon\&quot;,\&quot;unixTS\&quot;:false,\&quot;eventType\&quot;:\&quot;performance\&quot;,\&quot;eventSource\&quot;:\&quot;pageTracker\&quot;,\&quot;attributes\&quot;:{\&quot;pageId\&quot;:1,\&quot;pageTrackerId\&quot;:1,\&quot;phase\&quot;:\&quot;CONTINUE\&quot;,\&quot;cdnEnabled\&quot;:false,\&quot;uriDefsEnabled\&quot;:true}}&quot;}]}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=31&amp;ui-instrumentation-components-beacon.InstrumentationBeacon.sendData=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">94814000000ee78bcf</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="S3_04_Upload_txt_resume" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1365 /aura?r=32&amp;ui-content-components-forceContent-fileUploadAction.FileUploadAction.getUploadConfig=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1624;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.content.components.forceContent.fileUploadAction.FileUploadActionController/ACTION$getUploadConfig&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=32&amp;ui-content-components-forceContent-fileUploadAction.FileUploadAction.getUploadConfig=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">113754000000909caa</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1367 /aura?r=33&amp;ui-chatter-components-aura-components-forceChatter-chatter.PublisherFileAttachment.getFileUploaderParams=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1670;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.chatter.components.aura.components.forceChatter.chatter.PublisherFileAttachmentController/ACTION$getFileUploaderParams&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=33&amp;ui-chatter-components-aura-components-forceChatter-chatter.PublisherFileAttachment.getFileUploaderParams=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">114581000000b77cc0</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="csrfToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">csrfToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;csrfToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1368 /chatter/handlers/file/body" enabled="true">
            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
              <collectionProp name="HTTPFileArgs.files">
                <elementProp name="${path}" elementType="HTTPFileArg">
                  <stringProp name="File.path">${path}</stringProp>
                  <stringProp name="File.paramname">file</stringProp>
                  <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.wordprocessingml.document</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                  <stringProp name="Argument.value">${csrfToken}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fromUITier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromUITier</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="target" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">target</stringProp>
                  <stringProp name="Argument.value">ContentVersion</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/chatter/handlers/file/body</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="content_body_id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">content_body_id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;content_body_id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1369 /aura?r=34&amp;ui-chatter-components-aura-components-forceChatter-chatter.PublisherFileAttachment.saveContentVersion=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1691;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.chatter.components.aura.components.forceChatter.chatter.PublisherFileAttachmentController/ACTION$saveContentVersion&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;title&quot;:&quot;${name}&quot;,&quot;firstPublishLocationId&quot;:&quot;${firstPublishLocationId}&quot;,&quot;pathOnClient&quot;:&quot;${doc}&quot;,&quot;contentBodyId&quot;:&quot;${content_body_id}&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=34&amp;ui-chatter-components-aura-components-forceChatter-chatter.PublisherFileAttachment.saveContentVersion=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">1170790000005e133d</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="docid" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">docid</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;docid&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="S3_05_Click_Parser" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1370 /aura?r=35&amp;TR1.DocumentParser.parseDocument=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1730;a&quot;,&quot;descriptor&quot;:&quot;apex://TR1.DocumentParserController/ACTION$parseDocument&quot;,&quot;callingDescriptor&quot;:&quot;markup://TR1:DocumentParser&quot;,&quot;params&quot;:{&quot;docId&quot;:&quot;${docid}&quot;,&quot;docName&quot;:&quot;${doc}&quot;},&quot;version&quot;:null}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=35&amp;TR1.DocumentParser.parseDocument=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">13452500000060cbd3</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="data" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;data&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1377 /aura?r=40&amp;ui-force-components-controllers-recordGlobalValueProvider.RecordGvp.getRecord=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1737;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordGlobalValueProvider.RecordGvpController/ACTION$getRecord&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordDescriptor&quot;:&quot;${data}.undefined.null.null.null.Id,RecordTypeId.VIEW.true.null.null.null&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/page/home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=40&amp;ui-force-components-controllers-recordGlobalValueProvider.RecordGvp.getRecord=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/page/home</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">22303100000064125e</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1378 /aura?r=41&amp;ui-force-components-controllers-detail.Detail.getEntityConfig=1&amp;ui-force-components-controllers-detail.Detail.getRecord=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1923;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.detail.DetailController/ACTION$getRecord&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;${data}&quot;,&quot;record&quot;:null,&quot;inContextOfComponent&quot;:&quot;&quot;,&quot;mode&quot;:&quot;EDIT&quot;,&quot;layoutType&quot;:&quot;FULL&quot;,&quot;defaultFieldValues&quot;:null},&quot;storable&quot;:true},{&quot;id&quot;:&quot;1924;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.detail.DetailController/ACTION$getEntityConfig&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;${data}&quot;,&quot;layoutType&quot;:&quot;FULL&quot;,&quot;mode&quot;:&quot;EDIT&quot;},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=41&amp;ui-force-components-controllers-detail.Detail.getEntityConfig=1&amp;ui-force-components-controllers-detail.Detail.getRecord=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">2239670000008361a0</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1379 /aura?r=42&amp;ui-flexipage-components-page.FlexipageControllerV2.getPage=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1979;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.flexipage.components.page.FlexipageControllerV2/ACTION$getPage&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;flexiPageDeveloperName&quot;:&quot;Contact_3_Column_Page3&quot;,&quot;sObjectName&quot;:&quot;Contact&quot;},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=42&amp;ui-flexipage-components-page.FlexipageControllerV2.getPage=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">224006000000137b5e</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1380 /aura?r=43&amp;ui-force-components-controllers-recordLayoutBroker.RecordLayoutBroker.getRecordAndLayout=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1973;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordLayoutBroker.RecordLayoutBrokerController/ACTION$getRecordAndLayout&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;${data}&quot;,&quot;mode&quot;:&quot;VIEW&quot;,&quot;type&quot;:&quot;COMPACT&quot;,&quot;stencilOverride&quot;:&quot;force:highlightsStencilDesktop&quot;,&quot;inContextOfComponent&quot;:&quot;force:highlights&quot;,&quot;pageSize&quot;:-1,&quot;offset&quot;:0,&quot;updateMru&quot;:true,&quot;errorContext&quot;:{&quot;componentStack&quot;:&quot;[laf:pageHost] &gt; [one:recordHomeFlexipage] &gt; [one:recordHomeFlexipage] &gt; [one:recordHomeFlexipage] &gt; [force:recordLayoutBroker] &gt; [force:recordLayoutBroker] &gt; [force:recordLayoutBroker]&quot;}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=43&amp;ui-force-components-controllers-recordLayoutBroker.RecordLayoutBroker.getRecordAndLayout=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">224011000000648cfc</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1384 /aura?r=44&amp;ui-force-components-controllers-dedupe.DedupeManager.getConfig=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;2043;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.dedupe.DedupeManagerController/ACTION$getConfig&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;entityApiName&quot;:&quot;Contact&quot;,&quot;recordTypeId&quot;:&quot;0121N000001ZxLTQA0&quot;,&quot;recordId&quot;:&quot;${data}&quot;},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=44&amp;ui-force-components-controllers-dedupe.DedupeManager.getConfig=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">226351000000080d61</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1385 /aura?r=45&amp;ui-force-components-controllers-inputAddress.InputAddress.getAddressAutocompleteUrl=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;2812;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.inputAddress.InputAddressController/ACTION$getAddressAutocompleteUrl&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=45&amp;ui-force-components-controllers-inputAddress.InputAddress.getAddressAutocompleteUrl=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">2273650000006acfc8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1388 /apex/LinkedInProfilePluginPage" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                  <stringProp name="Argument.value">${data}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tour" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tour</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isdtp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isdtp</stringProp>
                  <stringProp name="Argument.value">p1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sfdcIFrameOrigin" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sfdcIFrameOrigin</stringProp>
                  <stringProp name="Argument.value">${protocol}://${host}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sfdcIFrameHost" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sfdcIFrameHost</stringProp>
                  <stringProp name="Argument.value">web</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="nonce" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">nonce</stringProp>
                  <stringProp name="Argument.value">${nonce}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ltn_app_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ltn_app_id</stringProp>
                  <stringProp name="Argument.value">${id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">clc</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">tr-release2--regtest--tr1.cs92.visual.force.com</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apex/LinkedInProfilePluginPage</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1389 /apex/ResumeManager5" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                  <stringProp name="Argument.value">${data}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tour" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tour</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isdtp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isdtp</stringProp>
                  <stringProp name="Argument.value">p1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sfdcIFrameOrigin" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sfdcIFrameOrigin</stringProp>
                  <stringProp name="Argument.value">${protocol}://${host}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sfdcIFrameHost" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sfdcIFrameHost</stringProp>
                  <stringProp name="Argument.value">web</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="nonce" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">nonce</stringProp>
                  <stringProp name="Argument.value">${nonce}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ltn_app_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ltn_app_id</stringProp>
                  <stringProp name="Argument.value">${id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">clc</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">tr-release2--regtest--tr1.cs92.visual.force.com</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apex/ResumeManager5</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1390 /apex/CandidateManager" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                  <stringProp name="Argument.value">${data}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tour" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tour</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isdtp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isdtp</stringProp>
                  <stringProp name="Argument.value">p1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sfdcIFrameOrigin" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sfdcIFrameOrigin</stringProp>
                  <stringProp name="Argument.value">${protocol}://${host}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sfdcIFrameHost" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sfdcIFrameHost</stringProp>
                  <stringProp name="Argument.value">web</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="nonce" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">nonce</stringProp>
                  <stringProp name="Argument.value">${nonce}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ltn_app_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ltn_app_id</stringProp>
                  <stringProp name="Argument.value">${id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">clc</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">tr-release2--regtest--tr1.cs92.visual.force.com</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apex/CandidateManager</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1391 /aura?r=46&amp;ui-force-components-controllers-recordLayoutBroker.RecordLayoutBroker.getLayout=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;1812;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.recordLayoutBroker.RecordLayoutBrokerController/ACTION$getRecordAndLayout&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;${data}&quot;,&quot;mode&quot;:&quot;VIEW&quot;,&quot;type&quot;:&quot;COMPACT&quot;,&quot;stencilOverride&quot;:&quot;force:highlightsStencilDesktop&quot;,&quot;inContextOfComponent&quot;:&quot;force:highlights&quot;,&quot;pageSize&quot;:-1,&quot;offset&quot;:0,&quot;updateMru&quot;:true,&quot;errorContext&quot;:{&quot;componentStack&quot;:&quot;[laf:pageHost] &gt; [one:recordHomeFlexipage] &gt; [one:recordHomeFlexipage] &gt; [one:recordHomeFlexipage] &gt; [force:recordLayoutBroker] &gt; [force:recordLayoutBroker] &gt; [force:recordLayoutBroker]&quot;}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=46&amp;ui-force-components-controllers-recordLayoutBroker.RecordLayoutBroker.getLayout=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">2287280000008c15c0</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1392 /aura?r=48&amp;TR1.TRS_CreteCACtlr.getselectOptions=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;3692;a&quot;,&quot;descriptor&quot;:&quot;apex://TR1.TRS_CreteCACtlr/ACTION$getselectOptions&quot;,&quot;callingDescriptor&quot;:&quot;markup://TR1:CreateAvailability&quot;,&quot;params&quot;:{&quot;ObjectName&quot;:&quot;Candidate_Availability__c&quot;,&quot;fld&quot;:&quot;Type__c&quot;},&quot;version&quot;:null}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=48&amp;TR1.TRS_CreteCACtlr.getselectOptions=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">228751000000d49898</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1393 /aura?r=47&amp;TR1.TRS_CreteCACtlr.getOrgDefaults=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;3691;a&quot;,&quot;descriptor&quot;:&quot;apex://TR1.TRS_CreteCACtlr/ACTION$getOrgDefaults&quot;,&quot;callingDescriptor&quot;:&quot;markup://TR1:CreateAvailability&quot;,&quot;params&quot;:{},&quot;version&quot;:null}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=47&amp;TR1.TRS_CreteCACtlr.getOrgDefaults=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">228749000000c38de8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1396 /resource/1549981040000/TR1__JobApplicationManagerCSS" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/resource/1549981040000/TR1__JobApplicationManagerCSS</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/css,*/*;q=0.1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1397 /resource/1549438193000/TR1__BaseUtility" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/resource/1549438193000/TR1__BaseUtility</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1398 /aura?r=49&amp;ui-merge-components-controller.Merge.getMergeCandidates=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;3744;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.merge.components.controller.MergeController/ACTION$getMergeCandidates&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;0033F00000D3xEgQAJ&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=49&amp;ui-merge-components-controller.Merge.getMergeCandidates=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">228837000000ebc083</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1399 /aura?r=50&amp;ui-force-components-controllers-relatedList.RelatedListContainer.getRelatedListInfos=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;3760;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.relatedList.RelatedListContainerController/ACTION$getRelatedListInfos&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;location&quot;:&quot;ALL&quot;},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=50&amp;ui-force-components-controllers-relatedList.RelatedListContainer.getRelatedListInfos=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">228850000000dcf08a</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1400 /aura?r=51&amp;aura.Component.reportDeprecationUsages=3&amp;ui-force-components-controllers-socialPhoto.SocialPhoto.resolvePhotos=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;3669;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$reportDeprecationUsages&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;usages&quot;:{&quot;AuraComponentService.newComponentDeprecated&quot;:[&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;]}}},{&quot;id&quot;:&quot;3729;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$reportDeprecationUsages&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;usages&quot;:{&quot;AuraComponentService.newComponentDeprecated&quot;:[&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;]}}},{&quot;id&quot;:&quot;3779;a&quot;,&quot;descriptor&quot;:&quot;aura://ComponentController/ACTION$reportDeprecationUsages&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;usages&quot;:{&quot;AuraComponentService.newComponentDeprecated&quot;:[&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;,&quot;flexipage:runtimeComponent&quot;]}}},{&quot;id&quot;:&quot;3868;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.socialPhoto.SocialPhotoController/ACTION$resolvePhotos&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;records&quot;:{&quot;0011N00001W0YiJQAV&quot;:{}},&quot;refreshCached&quot;:false},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=51&amp;aura.Component.reportDeprecationUsages=3&amp;ui-force-components-controllers-socialPhoto.SocialPhoto.resolvePhotos=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">22898900000067fe33</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1402 /aura?r=52&amp;ui-force-components-controllers-socialPhoto.SocialPhoto.resolvePhotos=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;3972;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.socialPhoto.SocialPhotoController/ACTION$resolvePhotos&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;records&quot;:{&quot;0033F00000D3xEgQAJ&quot;:{}},&quot;refreshCached&quot;:false},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=52&amp;ui-force-components-controllers-socialPhoto.SocialPhoto.resolvePhotos=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">2296950000000166af</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1403 /aura?r=53&amp;ui-global-components-one-actionsManager.ActionsManager.handleAction=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;3954;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.actionsManager.ActionsManagerController/ACTION$handleAction&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;recordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;context&quot;:&quot;CHATTER&quot;,&quot;entityApiName&quot;:&quot;Contact&quot;,&quot;record&quot;:{&quot;sobjectType&quot;:&quot;Contact&quot;,&quot;Id&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;RecordTypeId&quot;:&quot;0121N000001ZxLTQA0&quot;,&quot;SystemModstamp&quot;:&quot;2019-05-28T08:36:35.000Z&quot;,&quot;SystemModstamp__f&quot;:&quot;28/05/2019 03:36&quot;,&quot;SystemModstamp__l&quot;:&quot;28/05/2019 03:36&quot;,&quot;Account&quot;:{&quot;sobjectType&quot;:&quot;Account&quot;,&quot;Id&quot;:&quot;0011N00001W0YiJQAV&quot;,&quot;Name&quot;:&quot;PoolAccountName - 7&quot;,&quot;RecordTypeId&quot;:&quot;0121N000001ZxLUQA0&quot;,&quot;RecordType&quot;:{&quot;sobjectType&quot;:&quot;RecordType&quot;,&quot;Id&quot;:&quot;0121N000001ZxLUQA0&quot;,&quot;Name&quot;:&quot;Account&quot;}},&quot;Account__f&quot;:&quot;PoolAccountName - 7&quot;,&quot;Account__l&quot;:&quot;PoolAccountName - 7&quot;,&quot;AccountId&quot;:&quot;0011N00001W0YiJQAV&quot;,&quot;CreatedDate&quot;:&quot;2019-05-28T08:36:26.000Z&quot;,&quot;CreatedDate__f&quot;:&quot;28/05/2019 03:36&quot;,&quot;CreatedDate__l&quot;:&quot;28/05/2019 03:36&quot;,&quot;Email&quot;:&quot;bethy.dimitrova@tut.com&quot;,&quot;FirstName&quot;:&quot;Bethy&quot;,&quot;LastModifiedById&quot;:&quot;0051N000005pgpoQAA&quot;,&quot;LastModifiedDate&quot;:&quot;2019-05-28T08:36:31.000Z&quot;,&quot;LastModifiedDate__f&quot;:&quot;28/05/2019 03:36&quot;,&quot;LastModifiedDate__l&quot;:&quot;28/05/2019 03:36&quot;,&quot;LastName&quot;:&quot;Dimitrova&quot;,&quot;MiddleName&quot;:null,&quot;MobilePhone&quot;:null,&quot;Name&quot;:&quot;Bethy Dimitrova&quot;,&quot;Owner&quot;:{&quot;sobjectType&quot;:&quot;User&quot;,&quot;Id&quot;:&quot;0051N000005pgpoQAA&quot;,&quot;Name&quot;:&quot;Talent Rover Administrator&quot;,&quot;SystemModstamp&quot;:&quot;2019-05-28T08:07:17.000Z&quot;,&quot;SystemModstamp__f&quot;:&quot;28/05/2019 03:07&quot;,&quot;SystemModstamp__l&quot;:&quot;28/05/2019 03:07&quot;},&quot;Owner__f&quot;:&quot;Talent Rover Administrator&quot;,&quot;Owner__l&quot;:&quot;Talent Rover Administrator&quot;,&quot;OwnerId&quot;:&quot;0051N000005pgpoQAA&quot;,&quot;Phone&quot;:null,&quot;PhotoUrl&quot;:&quot;/services/images/photo/0033F00000D3xEgQAJ&quot;,&quot;Salutation&quot;:null,&quot;Suffix&quot;:null,&quot;Title&quot;:&quot;Technical Operations Officer&quot;,&quot;RecordType&quot;:{&quot;sobjectType&quot;:&quot;RecordType&quot;,&quot;Id&quot;:&quot;0121N000001ZxLTQA0&quot;,&quot;Name&quot;:&quot;Candidate&quot;}},&quot;section&quot;:&quot;SINGLE_ACTION_LINKS&quot;,&quot;inContextOfComponent&quot;:&quot;highlightsStencilDesktopVertical&quot;,&quot;size&quot;:3,&quot;maxWidth&quot;:-1,&quot;actionTypes&quot;:[],&quot;bulkedAction&quot;:false,&quot;actionsRequestId&quot;:1},{&quot;recordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;context&quot;:&quot;RECORD&quot;,&quot;entityApiName&quot;:&quot;Contact&quot;,&quot;record&quot;:{&quot;sobjectType&quot;:&quot;Contact&quot;,&quot;Id&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;RecordTypeId&quot;:&quot;0121N000001ZxLTQA0&quot;,&quot;SystemModstamp&quot;:&quot;2019-05-28T08:36:35.000Z&quot;,&quot;SystemModstamp__f&quot;:&quot;28/05/2019 03:36&quot;,&quot;SystemModstamp__l&quot;:&quot;28/05/2019 03:36&quot;,&quot;Account&quot;:{&quot;sobjectType&quot;:&quot;Account&quot;,&quot;Id&quot;:&quot;0011N00001W0YiJQAV&quot;,&quot;Name&quot;:&quot;PoolAccountName - 7&quot;,&quot;RecordTypeId&quot;:&quot;0121N000001ZxLUQA0&quot;,&quot;RecordType&quot;:{&quot;sobjectType&quot;:&quot;RecordType&quot;,&quot;Id&quot;:&quot;0121N000001ZxLUQA0&quot;,&quot;Name&quot;:&quot;Account&quot;}},&quot;Account__f&quot;:&quot;PoolAccountName - 7&quot;,&quot;Account__l&quot;:&quot;PoolAccountName - 7&quot;,&quot;AccountId&quot;:&quot;0011N00001W0YiJQAV&quot;,&quot;CreatedDate&quot;:&quot;2019-05-28T08:36:26.000Z&quot;,&quot;CreatedDate__f&quot;:&quot;28/05/2019 03:36&quot;,&quot;CreatedDate__l&quot;:&quot;28/05/2019 03:36&quot;,&quot;Email&quot;:&quot;bethy.dimitrova@tut.com&quot;,&quot;FirstName&quot;:&quot;Bethy&quot;,&quot;LastModifiedById&quot;:&quot;0051N000005pgpoQAA&quot;,&quot;LastModifiedDate&quot;:&quot;2019-05-28T08:36:31.000Z&quot;,&quot;LastModifiedDate__f&quot;:&quot;28/05/2019 03:36&quot;,&quot;LastModifiedDate__l&quot;:&quot;28/05/2019 03:36&quot;,&quot;LastName&quot;:&quot;Dimitrova&quot;,&quot;MiddleName&quot;:null,&quot;MobilePhone&quot;:null,&quot;Name&quot;:&quot;Bethy Dimitrova&quot;,&quot;Owner&quot;:{&quot;sobjectType&quot;:&quot;User&quot;,&quot;Id&quot;:&quot;0051N000005pgpoQAA&quot;,&quot;Name&quot;:&quot;Talent Rover Administrator&quot;,&quot;SystemModstamp&quot;:&quot;2019-05-28T08:07:17.000Z&quot;,&quot;SystemModstamp__f&quot;:&quot;28/05/2019 03:07&quot;,&quot;SystemModstamp__l&quot;:&quot;28/05/2019 03:07&quot;},&quot;Owner__f&quot;:&quot;Talent Rover Administrator&quot;,&quot;Owner__l&quot;:&quot;Talent Rover Administrator&quot;,&quot;OwnerId&quot;:&quot;0051N000005pgpoQAA&quot;,&quot;Phone&quot;:null,&quot;PhotoUrl&quot;:&quot;/services/images/photo/0033F00000D3xEgQAJ&quot;,&quot;Salutation&quot;:null,&quot;Suffix&quot;:null,&quot;Title&quot;:&quot;Technical Operations Officer&quot;,&quot;RecordType&quot;:{&quot;sobjectType&quot;:&quot;RecordType&quot;,&quot;Id&quot;:&quot;0121N000001ZxLTQA0&quot;,&quot;Name&quot;:&quot;Candidate&quot;}},&quot;section&quot;:&quot;PAGE&quot;,&quot;inContextOfComponent&quot;:&quot;force:highlights&quot;,&quot;size&quot;:3,&quot;maxWidth&quot;:0,&quot;actionTypes&quot;:[],&quot;bulkedAction&quot;:false,&quot;actionsRequestId&quot;:2}]}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=53&amp;ui-global-components-one-actionsManager.ActionsManager.handleAction=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">229744000000622817</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1407 /resource/1548078413000/TR1__KanbanSwimlaneCSS" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/resource/1548078413000/TR1__KanbanSwimlaneCSS</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/css,*/*;q=0.1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1408 /resource/1518000972000/TR1__LightningJqueryV3" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/resource/1518000972000/TR1__LightningJqueryV3</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1409 /aura?r=54&amp;TR1.ATSv2_Candidate_ListView.getInit=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;4012;a&quot;,&quot;descriptor&quot;:&quot;apex://TR1.ATSv2_Candidate_ListViewController/ACTION$getInit&quot;,&quot;callingDescriptor&quot;:&quot;markup://TR1:ATSv2_Candidate_ListView&quot;,&quot;params&quot;:{&quot;sObjectName&quot;:&quot;Application_V2__c&quot;,&quot;fieldSetName&quot;:&quot;ATSv2_Candidate_ListView&quot;,&quot;parentRecordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;stage&quot;:&quot;ALL&quot;,&quot;selectiveType&quot;:&quot;All&quot;},&quot;version&quot;:null}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=54&amp;TR1.ATSv2_Candidate_ListView.getInit=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">230370000000eb5554</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1410 /aura?r=55&amp;ui-force-components-controllers-multiTemplateVirtualList.MultiTemplateVirtualList.getRecordLayoutComponent=4&amp;ui-force-components-controllers-relatedList.RelatedListContainerDataProvider.getRecords=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;4045;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.multiTemplateVirtualList.MultiTemplateVirtualListController/ACTION$getRecordLayoutComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;inContextOfComponent&quot;:&quot;force:relatedListCard&quot;,&quot;listReference&quot;:{&quot;inContextOfRecordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;listViewIdOrName&quot;:&quot;TR1__References__r&quot;,&quot;entityKeyPrefixOrApiName&quot;:&quot;TR1__Reference__c&quot;},&quot;layoutType&quot;:&quot;RELATED_LIST&quot;}},{&quot;id&quot;:&quot;4059;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.multiTemplateVirtualList.MultiTemplateVirtualListController/ACTION$getRecordLayoutComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;inContextOfComponent&quot;:&quot;force:relatedListCard&quot;,&quot;listReference&quot;:{&quot;inContextOfRecordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;listViewIdOrName&quot;:&quot;TR1__Opportunities_Discussed__r&quot;,&quot;entityKeyPrefixOrApiName&quot;:&quot;TR1__Opportunity_Discussed__c&quot;},&quot;layoutType&quot;:&quot;RELATED_LIST&quot;}},{&quot;id&quot;:&quot;4073;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.multiTemplateVirtualList.MultiTemplateVirtualListController/ACTION$getRecordLayoutComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;inContextOfComponent&quot;:&quot;force:relatedListCard&quot;,&quot;listReference&quot;:{&quot;inContextOfRecordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;listViewIdOrName&quot;:&quot;TR1__Closes__r&quot;,&quot;entityKeyPrefixOrApiName&quot;:&quot;TR1__Closing_Report__c&quot;},&quot;layoutType&quot;:&quot;RELATED_LIST&quot;}},{&quot;id&quot;:&quot;4087;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.multiTemplateVirtualList.MultiTemplateVirtualListController/ACTION$getRecordLayoutComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;inContextOfComponent&quot;:&quot;force:relatedListCard&quot;,&quot;listReference&quot;:{&quot;inContextOfRecordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;listViewIdOrName&quot;:&quot;TR1__Timesheets__r&quot;,&quot;entityKeyPrefixOrApiName&quot;:&quot;TR1__Timesheet__c&quot;},&quot;layoutType&quot;:&quot;RELATED_LIST&quot;}},{&quot;id&quot;:&quot;4120;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.relatedList.RelatedListContainerDataProviderController/ACTION$getRecords&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;relatedListApiNames&quot;:[&quot;TR1__References__r&quot;,&quot;TR1__Opportunities_Discussed__r&quot;,&quot;TR1__Closes__r&quot;,&quot;TR1__Timesheets__r&quot;],&quot;numRecordsToShow&quot;:10,&quot;showPartialCount&quot;:true},&quot;storable&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=55&amp;ui-force-components-controllers-multiTemplateVirtualList.MultiTemplateVirtualList.getRecordLayoutComponent=4&amp;ui-force-components-controllers-relatedList.RelatedListContainerDataProvider.getRecords=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">231269000000743ac5</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1424 /aura?r=58&amp;TR1.TRS_CandidateCalendarCtrlCls.getAvailabilitiesOnload=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;4382;a&quot;,&quot;descriptor&quot;:&quot;apex://TR1.TRS_CandidateCalendarCtrlCls/ACTION$getAvailabilitiesOnload&quot;,&quot;callingDescriptor&quot;:&quot;markup://TR1:TRS_CandidateCalendar&quot;,&quot;params&quot;:{&quot;contactId&quot;:&quot;0033F00000D3xEgQAJ&quot;},&quot;version&quot;:null}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=58&amp;TR1.TRS_CandidateCalendarCtrlCls.getAvailabilitiesOnload=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">23390400000073a696</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1422 /aura?r=57&amp;ui-global-components-one-actionsManager.ActionsManager.handleAction=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;4374;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.global.components.one.actionsManager.ActionsManagerController/ACTION$handleAction&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;batch&quot;:[{&quot;context&quot;:&quot;RELATED_LIST&quot;,&quot;entityApiName&quot;:&quot;AttachedContentDocument&quot;,&quot;listNameOrId&quot;:&quot;AttachedContentDocuments&quot;,&quot;recordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;actionsRequestId&quot;:3}]}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=57&amp;ui-global-components-one-actionsManager.ActionsManager.handleAction=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">233790000000a63606</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1423 /aura?r=56&amp;ui-force-components-controllers-multiTemplateVirtualList.MultiTemplateVirtualList.getRecordLayoutComponent=4&amp;ui-force-components-controllers-relatedList.RelatedListContainerDataProvider.getRecords=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;4317;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.relatedList.RelatedListContainerDataProviderController/ACTION$getRecords&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;recordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;relatedListApiNames&quot;:[&quot;TR1__Consents__r&quot;,&quot;TR1__Contact_Documents__r&quot;,&quot;AttachedContentNotes&quot;,&quot;AttachedContentDocuments&quot;],&quot;numRecordsToShow&quot;:10,&quot;showPartialCount&quot;:true},&quot;storable&quot;:true},{&quot;id&quot;:&quot;4326;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.multiTemplateVirtualList.MultiTemplateVirtualListController/ACTION$getRecordLayoutComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;inContextOfComponent&quot;:&quot;force:relatedListCard&quot;,&quot;listReference&quot;:{&quot;inContextOfRecordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;listViewIdOrName&quot;:&quot;TR1__Consents__r&quot;,&quot;entityKeyPrefixOrApiName&quot;:&quot;TR1__Candidate_Consents__c&quot;},&quot;layoutType&quot;:&quot;RELATED_LIST&quot;}},{&quot;id&quot;:&quot;4341;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.multiTemplateVirtualList.MultiTemplateVirtualListController/ACTION$getRecordLayoutComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;inContextOfComponent&quot;:&quot;force:relatedListCard&quot;,&quot;listReference&quot;:{&quot;inContextOfRecordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;listViewIdOrName&quot;:&quot;TR1__Contact_Documents__r&quot;,&quot;entityKeyPrefixOrApiName&quot;:&quot;TR1__ContactDocument__c&quot;},&quot;layoutType&quot;:&quot;RELATED_LIST&quot;}},{&quot;id&quot;:&quot;4356;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.multiTemplateVirtualList.MultiTemplateVirtualListController/ACTION$getRecordLayoutComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;inContextOfComponent&quot;:&quot;force:relatedListCard&quot;,&quot;listReference&quot;:{&quot;inContextOfRecordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;listViewIdOrName&quot;:&quot;AttachedContentNotes&quot;,&quot;entityKeyPrefixOrApiName&quot;:&quot;AttachedContentNote&quot;},&quot;layoutType&quot;:&quot;RELATED_LIST&quot;}},{&quot;id&quot;:&quot;4371;a&quot;,&quot;descriptor&quot;:&quot;serviceComponent://ui.force.components.controllers.multiTemplateVirtualList.MultiTemplateVirtualListController/ACTION$getRecordLayoutComponent&quot;,&quot;callingDescriptor&quot;:&quot;UNKNOWN&quot;,&quot;params&quot;:{&quot;inContextOfComponent&quot;:&quot;force:relatedListCard&quot;,&quot;listReference&quot;:{&quot;inContextOfRecordId&quot;:&quot;0033F00000D3xEgQAJ&quot;,&quot;listViewIdOrName&quot;:&quot;AttachedContentDocuments&quot;,&quot;entityKeyPrefixOrApiName&quot;:&quot;AttachedContentDocument&quot;},&quot;layoutType&quot;:&quot;RELATED_LIST&quot;}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}/view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=56&amp;ui-force-components-controllers-multiTemplateVirtualList.MultiTemplateVirtualList.getRecordLayoutComponent=4&amp;ui-force-components-controllers-relatedList.RelatedListContainerDataProvider.getRecords=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">233789000000a3672e</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1425 /aura?r=59&amp;TR1.TRS_CandidateCalendarCtrlCls.getCalendarDefaults=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">{&quot;actions&quot;:[{&quot;id&quot;:&quot;4383;a&quot;,&quot;descriptor&quot;:&quot;apex://TR1.TRS_CandidateCalendarCtrlCls/ACTION$getCalendarDefaults&quot;,&quot;callingDescriptor&quot;:&quot;markup://TR1:TRS_CandidateCalendar&quot;,&quot;params&quot;:{},&quot;version&quot;:null}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.context</stringProp>
                  <stringProp name="Argument.value">{&quot;mode&quot;:&quot;PROD&quot;,&quot;fwuid&quot;:&quot;pxtF0ZdGYF-z00XsmRUcGQ&quot;,&quot;app&quot;:&quot;one:one&quot;,&quot;loaded&quot;:{&quot;APPLICATION@markup://one:one&quot;:&quot;Vel2xmipbW6B0F2Wfw22YA&quot;},&quot;dn&quot;:[],&quot;globals&quot;:{&quot;density&quot;:&quot;VIEW_TWO&quot;,&quot;srcdoc&quot;:true,&quot;appContextId&quot;:&quot;06m1N000001PDRjQAO&quot;},&quot;uad&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.pageURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">aura.pageURI</stringProp>
                  <stringProp name="Argument.value">/lightning/r/Contact/${data}view</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="aura.token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aura.token</stringProp>
                  <stringProp name="Argument.value">${token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/aura?r=59&amp;TR1.TRS_CandidateCalendarCtrlCls.getCalendarDefaults=1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${host}/lightning/r/Contact/0033F00000D3xEgQAJ/view</stringProp>
                </elementProp>
                <elementProp name="X-SFDC-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-SFDC-Request-Id</stringProp>
                  <stringProp name="Header.value">234665000000da48a2</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
